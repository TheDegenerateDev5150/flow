Error ------------------------------------------------------------------------------------- err1/boolean_literal.js:4:13

This condition is likely truthy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/boolean_literal.js:4:13
   4|         if (x) {} // error, x is refined to `true`
                  ^

References:
   err1/boolean_literal.js:2:20
   2|     declare var x: boolean;
                         ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------- err1/boolean_literal.js:8:13

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/boolean_literal.js:8:13
   8|         if (x) {} // error, x is refined to `false`
                  ^

References:
   err1/boolean_literal.js:2:20
   2|     declare var x: boolean;
                         ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err1/function.js:3:9

This condition is likely truthy. Perhaps you meant to call the function?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/function.js:3:9
   3|     if (x) { } // error, x is truthy
              ^

References:
   err1/function.js:2:13
   2|     let x = function (y: number) { return y; };
                  ^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err1/function.js:7:9

This condition is likely truthy. Perhaps you meant to call the function?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/function.js:7:9
   7|     if (y) { } // error, y is truthy
              ^

References:
   err1/function.js:6:13
   6|     let y = (a:number) => a/2;
                  ^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- err1/function.js:11:9

This condition is likely truthy. Perhaps you meant to call the function?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/function.js:11:9
   11|     if (z) { } // error, z is truthy
               ^

References:
   err1/function.js:10:13
   10|     let z = () => "";
                   ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- err1/null_void.js:4:13

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make the type of this expression nullable
(`T` -> `?T`). [constant-condition]

   4|         if (x) {} // error, x is refined to `null | void`
                  ^


Error -------------------------------------------------------------------------------------------- err1/null_void.js:8:9

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/null_void.js:8:9
   8|     if (y) {} // error, y is undefined
              ^

References:
   err1/null_void.js:7:9
   7|     let y: Array<number>;
              ^ [1]


Error ---------------------------------------------------------------------------------------------- err1/promise.js:3:8

This condition is likely truthy. Perhaps you meant to use `await` to resolve the promise?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/promise.js:3:8
   3|     if(p0) {} // Error, using unresolved promise
             ^^

References:
   err1/promise.js:2:13
   2|     let p0: Promise<0> = Promise.resolve(0);
                  ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- err1/promise.js:7:8

This condition is likely truthy. Perhaps you meant to use `await` to resolve the promise?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/promise.js:7:8
   7|     if(p1) {} // Error, using unresolved promise
             ^^

References:
   err1/promise.js:6:13
   6|     let p1: Promise<number> = Promise.resolve(1);
                  ^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err1/promise.js:12:8

This condition is likely falsy. Perhaps you meant to use `await` to resolve the promise?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/promise.js:12:8
   12|     if(!!!p2) {} // Error, using unresolved promise
              ^^^^^

References:
   err1/promise.js:11:13
   11|     let p2: Promise<boolean> = Promise.resolve(true);
                   ^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err1/promise.js:16:8

This condition is likely truthy. Perhaps you meant to use `await` to resolve the promise?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/promise.js:16:8
   16|     if(p3) {} // Error, using unresolved promise
              ^^

References:
   err1/promise.js:15:13
   15|     let p3: Promise<null> = Promise.resolve(null);
                   ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err1/promise.js:20:8

This condition is likely truthy. Perhaps you meant to use `await` to resolve the promise?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/promise.js:20:8
   20|     if(p4) {} // Error, using unresolved promise
              ^^

References:
   err1/promise.js:19:13
   19|     let p4: Promise<void> = Promise.resolve();
                   ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err1/promise.js:24:8

This condition is likely truthy. Perhaps you meant to use `await` to resolve the promise?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/promise.js:24:8
   24|     if(p5) {} // Error, using unresolved promise
              ^^

References:
   err1/promise.js:23:13
   23|     let p5: Promise<true> = Promise.resolve(true);
                   ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err1/promise.js:28:8

This condition is likely truthy. Perhaps you meant to use `await` to resolve the promise?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err1/promise.js:28:8
   28|     if(p6) {} // Error, using unresolved promise
              ^^

References:
   err1/promise.js:27:13
   27|     let p6: Promise<false> = Promise.resolve(false);
                   ^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------- err2/boolean_literal.js:4:13

This condition is likely truthy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err2/boolean_literal.js:4:13
   4|         if (x) {} // error, x is refined to `true`
                  ^

References:
   err2/boolean_literal.js:2:20
   2|     declare var x: boolean;
                         ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------- err2/boolean_literal.js:8:13

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err2/boolean_literal.js:8:13
   8|         if (x) {} // error, x is refined to `false`
                  ^

References:
   err2/boolean_literal.js:2:20
   2|     declare var x: boolean;
                         ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err2/function.js:3:9

This condition is likely truthy. Perhaps you meant to call the function?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err2/function.js:3:9
   3|     if (x) { } // error, x is truthy
              ^

References:
   err2/function.js:2:13
   2|     let x = function (y: number) { return y; };
                  ^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- err2/function.js:7:9

This condition is likely truthy. Perhaps you meant to call the function?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err2/function.js:7:9
   7|     if (y) { } // error, y is truthy
              ^

References:
   err2/function.js:6:13
   6|     let y = (a:number) => a/2;
                  ^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- err2/function.js:11:9

This condition is likely truthy. Perhaps you meant to call the function?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err2/function.js:11:9
   11|     if (z) { } // error, z is truthy
               ^

References:
   err2/function.js:10:13
   10|     let z = () => "";
                   ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- err2/null_void.js:4:13

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make the type of this expression nullable
(`T` -> `?T`). [constant-condition]

   4|         if (x) {} // error, x is refined to `null | void`
                  ^


Error -------------------------------------------------------------------------------------------- err2/null_void.js:8:9

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   err2/null_void.js:8:9
   8|     if (y) {} // error, y is undefined
              ^

References:
   err2/null_void.js:7:9
   7|     let y: Array<number>;
              ^ [1]


Error ---------------------------------------------------------------------------------------------- null_literal.js:2:9

This condition is falsy. [constant-condition]

   2|     if (null) {} // ERROR
              ^^^^


Error ---------------------------------------------------------------------------------------------- null_literal.js:5:9

This condition is falsy. [constant-condition]

   5|     x = null ? 5 : 6; // ERROR
              ^^^^


Error ---------------------------------------------------------------------------------------------- null_literal.js:7:5

This condition is falsy. [constant-condition]

   7|     null && 5; // ERROR
          ^^^^


Error ---------------------------------------------------------------------------------------------- null_literal.js:9:5

This condition is falsy. [constant-condition]

   9|     null || 5; // ERROR
          ^^^^


Error --------------------------------------------------------------------------------------------- null_literal.js:11:5

This condition is falsy. [constant-condition]

   11|     null ?? 5; // ERROR
           ^^^^


Error -------------------------------------------------------------------------------------------- string_literal.js:2:9

This condition is falsy. [constant-condition]

   2|     if ('') {} // ERROR
              ^^


Error -------------------------------------------------------------------------------------------- string_literal.js:3:9

This condition is truthy. [constant-condition]

   3|     if ('\'') {} // ERROR
              ^^^^


Error -------------------------------------------------------------------------------------------- string_literal.js:4:9

This condition is truthy. [constant-condition]

   4|     if ('a') {} // ERROR
              ^^^


Error -------------------------------------------------------------------------------------------- string_literal.js:5:9

This condition is truthy. [constant-condition]

   5|     if ('hfudiashfkdsnfsa') {} // ERROR
              ^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- string_literal.js:8:9

This condition is falsy. [constant-condition]

   8|     x = '' ? 5 : 6; // ERROR
              ^^


Error -------------------------------------------------------------------------------------------- string_literal.js:9:9

This condition is truthy. [constant-condition]

   9|     x = '\'' ? 5 : 6; // ERROR
              ^^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:10:9

This condition is truthy. [constant-condition]

   10|     x = 'a' ? 5 : 6; // ERROR
               ^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:11:9

This condition is truthy. [constant-condition]

   11|     x = 'fdsgfdgsfdga' ? 5 : 6; // ERROR
               ^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:13:5

This condition is falsy. [constant-condition]

   13|     '' && 5; // ERROR
           ^^


Error ------------------------------------------------------------------------------------------- string_literal.js:14:5

This condition is truthy. [constant-condition]

   14|     '\'' && 5; // ERROR
           ^^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:15:5

This condition is truthy. [constant-condition]

   15|     'a' && 5; // ERROR
           ^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:16:5

This condition is truthy. [constant-condition]

   16|     'fdsgfdgsfdga' && 5; // ERROR
           ^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:18:5

This condition is falsy. [constant-condition]

   18|     '' || 5; // ERROR
           ^^


Error ------------------------------------------------------------------------------------------- string_literal.js:19:5

This condition is truthy. [constant-condition]

   19|     '\'' || 5; // ERROR
           ^^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:20:5

This condition is truthy. [constant-condition]

   20|     'a' || 5; // ERROR
           ^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:21:5

This condition is truthy. [constant-condition]

   21|     'fdsgfdgsfdga' || 5; // ERROR
           ^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:23:5

This condition is falsy. [constant-condition]

   23|     '' ?? 5; // ERROR
           ^^


Error ------------------------------------------------------------------------------------------- string_literal.js:24:5

This condition is truthy. [constant-condition]

   24|     '\'' ?? 5; // ERROR
           ^^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:25:5

This condition is truthy. [constant-condition]

   25|     'a' ?? 5; // ERROR
           ^^^


Error ------------------------------------------------------------------------------------------- string_literal.js:26:5

This condition is truthy. [constant-condition]

   26|     'fdsgfdgsfdga' ?? 5; // ERROR
           ^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------------ test.js:4:7

This condition is falsy. [constant-condition]

   4|   if ('') {} // ERROR
            ^^


Error ------------------------------------------------------------------------------------------------------ test.js:5:7

This condition is truthy. [constant-condition]

   5|   if ('\'') {} // ERROR
            ^^^^


Error ------------------------------------------------------------------------------------------------------ test.js:6:7

This condition is truthy. [constant-condition]

   6|   if ('a') {} // ERROR
            ^^^


Error ------------------------------------------------------------------------------------------------------ test.js:8:6

This condition is truthy. [constant-condition]

   8|   if('a' || 'b') {} // ERROR
           ^^^


Error ------------------------------------------------------------------------------------------------------ test.js:8:6

This condition is truthy. [constant-condition]

   8|   if('a' || 'b') {} // ERROR
           ^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:10:3

This condition is falsy. [constant-condition]

   10|   '' ? 1 : 2; // ERROR
         ^^


Error ----------------------------------------------------------------------------------------------------- test.js:11:3

This condition is truthy. [constant-condition]

   11|   'a' ? 1 : 2; // ERROR
         ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:12:3

This condition is falsy. [constant-condition]

   12|   '' || 1; // ERROR
         ^^


Error ----------------------------------------------------------------------------------------------------- test.js:13:3

This condition is falsy. [constant-condition]

   13|   '' && 1; // ERROR
         ^^


Error ----------------------------------------------------------------------------------------------------- test.js:14:3

This condition is truthy. [constant-condition]

   14|   'a' && 1; // ERROR
         ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:15:3

This condition is falsy. [constant-condition]

   15|   '' ?? 1; // ERROR
         ^^


Error ----------------------------------------------------------------------------------------------------- test.js:16:3

This condition is truthy. [constant-condition]

   16|   'a' ?? 1; // ERROR
         ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:18:8

This condition is truthy. [constant-condition]

   18|   if (('a'?1:2)||3) {} // ERROR
              ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:19:8

This condition is truthy. [constant-condition]

   19|   if (('a'?1:2)&&3) {} // ERROR
              ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:20:8

This condition is truthy. [constant-condition]

   20|   if (('a'?1:2)??3) {} // ERROR
              ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:25:7

This condition is truthy. [constant-condition]

   25|   if ('a' && x) {} // ERROR
             ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:36:6

This condition is falsy. [constant-condition]

   36|   if(null) {} // ERROR
            ^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:37:3

This condition is falsy. [constant-condition]

   37|   null ? 1 : 2; // ERROR
         ^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:43:7

This condition is truthy. [constant-condition]

   43|   if (2) {} // ERROR
             ^


Error ----------------------------------------------------------------------------------------------------- test.js:47:7

This condition is truthy. [constant-condition]

   47|   if (2n) {} // ERROR
             ^^


Error ----------------------------------------------------------------------------------------------------- test.js:53:7

This condition is truthy. [constant-condition]

   53|   if (-2) {} // ERROR
             ^^


Error ----------------------------------------------------------------------------------------------------- test.js:57:7

This condition is truthy. [constant-condition]

   57|   if (-2n) {} // ERROR
             ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:59:7

This condition is falsy. [constant-condition]

   59|   if (void 6) {} // ERROR
             ^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:60:7

This condition is truthy. [constant-condition]

   60|   if (typeof 'aaa') {} // ERROR
             ^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:65:7

This condition is truthy. [constant-condition]

   65|   if (/hello/) {} // ERROR
             ^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:76:6

This condition is truthy. [constant-condition]

   76|   if([0]) {} // ERROR
            ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:77:6

This condition is truthy. [constant-condition]

   77|   if([0,1,2]) {} // ERROR
            ^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:81:6

This condition is truthy. [constant-condition]

   81|   if(new Set<string>()) {} // ERROR
            ^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:82:6

This condition is truthy. [constant-condition]

   82|   if(new Set([0])) {} // ERROR
            ^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:83:6

This condition is truthy. [constant-condition]

   83|   if(new Set([1])) {} // ERROR
            ^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:84:6

This condition is truthy. [constant-condition]

   84|   if(new Set([2])) {} // ERROR
            ^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:91:8

This condition is truthy. [constant-condition]

   91|   if(x=2) {} // ERROR
              ^


Error ----------------------------------------------------------------------------------------------------- test.js:94:5

This condition is truthy. [constant-condition]

   94|   x=2 ? 1 : 2; // ERROR
           ^


Error --------------------------------------------------------------------------------------------------- test.js:102:14

This condition is truthy. [constant-condition]

   102|   if ((x,x,x,2)) {} // ERROR
                     ^


Error --------------------------------------------------------------------------------------------------- test.js:103:12

This condition is truthy. [constant-condition]

   103|   if ((0,0,()=>0)) {} // ERROR
                   ^^^^^


Error --------------------------------------------------------------------------------------------------- test.js:104:11

This condition is likely truthy. Perhaps you meant to call the function?
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   test.js:104:11
   104|   if((0,0,f)) {} // ERROR: f is always truthy
                  ^

References:
   test.js:99:11
    99|   let f = () => 0;
                  ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:106:13

This condition is truthy. [constant-condition]

   106|   if((0,1,2,'a'?f():3)) {} // ERROR
                    ^^^


Error ---------------------------------------------------------------------------------------------------- test.js:108:5

This condition is truthy. [constant-condition]

   108|     'a'?f():3, // ERROR
            ^^^


Error ---------------------------------------------------------------------------------------------------- test.js:109:5

This condition is truthy. [constant-condition]

   109|     2) // ERROR
            ^


Error ---------------------------------------------------------------------------------------------------- test.js:112:5

This condition is truthy. [constant-condition]

   112|     'a'?f():3, // ERROR
            ^^^


Error ---------------------------------------------------------------------------------------------------- test.js:118:6

This condition is truthy. [constant-condition]

             v
   118|   if({
   119|     a: 1,
   120|     b: 2,
   121|   }){} // ERROR
          ^


Error ---------------------------------------------------------------------------------------------------- test.js:125:6

This condition is truthy. [constant-condition]

   125|   if(function(num: number){return num%2===0}) {} // ERROR
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:128:6

This condition is truthy. [constant-condition]

   128|   if((a:number) => a%2===0) {} // ERROR
             ^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:133:7

This condition is truthy. [constant-condition]

   133|   if (`I'm TemplateLiteral`) {} // ERROR
              ^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:137:7

This condition is truthy. [constant-condition]

   137|   if (<div>true</div>) {} // ERROR
              ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:138:7

This condition is truthy. [constant-condition]

   138|   if (<div>false</div>) {} // ERROR
              ^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:139:7

This condition is truthy. [constant-condition]

   139|   if (<>true</>) {} // ERROR
              ^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:140:7

This condition is truthy. [constant-condition]

   140|   if (<>false</>) {} // ERROR
              ^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:144:6

This condition is truthy. [constant-condition]

   144|   if(class A {}){} // ERROR
             ^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- test.js:148:11

This condition is truthy. [constant-condition]

   148|       if (yield i) {} // ERROR
                  ^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:154:8

This condition is truthy. [constant-condition]

   154|   if ((('a'?2:3)?4:5)) {} // ERROR
               ^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:154:9

This condition is truthy. [constant-condition]

   154|   if ((('a'?2:3)?4:5)) {} // ERROR
                ^^^


Error ---------------------------------------------------------------------------------------------------- test.js:154:9

This condition is truthy. [constant-condition]

   154|   if ((('a'?2:3)?4:5)) {} // ERROR
                ^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:155:7

This condition is truthy. [constant-condition]

   155|   if ((true?2:3)?4:5) {} // ERROR
              ^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:155:8

This condition is truthy. [constant-condition]

   155|   if ((true?2:3)?4:5) {} // ERROR
               ^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:156:7

This condition is truthy. [constant-condition]

   156|   if ((false?2:3)?4:5) {} // ERROR
              ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:156:8

This condition is truthy. [constant-condition]

   156|   if ((false?2:3)?4:5) {} // ERROR
               ^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:157:7

This condition is truthy. [constant-condition]

   157|   if ((('a'?2:3)?4:5)?6:7) {} // ERROR
              ^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:157:8

This condition is truthy. [constant-condition]

   157|   if ((('a'?2:3)?4:5)?6:7) {} // ERROR
               ^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:157:9

This condition is truthy. [constant-condition]

   157|   if ((('a'?2:3)?4:5)?6:7) {} // ERROR
                ^^^


Error ---------------------------------------------------------------------------------------------------- test.js:157:9

This condition is truthy. [constant-condition]

   157|   if ((('a'?2:3)?4:5)?6:7) {} // ERROR
                ^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:158:7

This condition is truthy. [constant-condition]

   158|   if (((true?2:3)?4:5)?6:7) {} // ERROR
              ^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:158:8

This condition is truthy. [constant-condition]

   158|   if (((true?2:3)?4:5)?6:7) {} // ERROR
               ^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:158:9

This condition is truthy. [constant-condition]

   158|   if (((true?2:3)?4:5)?6:7) {} // ERROR
                ^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:159:7

This condition is truthy. [constant-condition]

   159|   if (((false?2:3)?4:5)?6:7) {} // ERROR
              ^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:159:8

This condition is truthy. [constant-condition]

   159|   if (((false?2:3)?4:5)?6:7) {} // ERROR
               ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:159:9

This condition is truthy. [constant-condition]

   159|   if (((false?2:3)?4:5)?6:7) {} // ERROR
                ^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:160:7

This condition is truthy. [constant-condition]

   160|   if (((('a'?2:3)?4:5)?6:7)?8:9) {} // ERROR
              ^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:160:8

This condition is truthy. [constant-condition]

   160|   if (((('a'?2:3)?4:5)?6:7)?8:9) {} // ERROR
               ^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:160:9

This condition is truthy. [constant-condition]

   160|   if (((('a'?2:3)?4:5)?6:7)?8:9) {} // ERROR
                ^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- test.js:160:10

This condition is truthy. [constant-condition]

   160|   if (((('a'?2:3)?4:5)?6:7)?8:9) {} // ERROR
                 ^^^


Error --------------------------------------------------------------------------------------------------- test.js:160:10

This condition is truthy. [constant-condition]

   160|   if (((('a'?2:3)?4:5)?6:7)?8:9) {} // ERROR
                 ^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:161:7

This condition is truthy. [constant-condition]

   161|   if ((((true?2:3)?4:5)?6:7)?8:9) {} // ERROR
              ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:161:8

This condition is truthy. [constant-condition]

   161|   if ((((true?2:3)?4:5)?6:7)?8:9) {} // ERROR
               ^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:161:9

This condition is truthy. [constant-condition]

   161|   if ((((true?2:3)?4:5)?6:7)?8:9) {} // ERROR
                ^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- test.js:161:10

This condition is truthy. [constant-condition]

   161|   if ((((true?2:3)?4:5)?6:7)?8:9) {} // ERROR
                 ^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:162:7

This condition is truthy. [constant-condition]

   162|   if ((((false?2:3)?4:5)?6:7)?8:9) {} // ERROR
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:162:8

This condition is truthy. [constant-condition]

   162|   if ((((false?2:3)?4:5)?6:7)?8:9) {} // ERROR
               ^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:162:9

This condition is truthy. [constant-condition]

   162|   if ((((false?2:3)?4:5)?6:7)?8:9) {} // ERROR
                ^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- test.js:162:10

This condition is truthy. [constant-condition]

   162|   if ((((false?2:3)?4:5)?6:7)?8:9) {} // ERROR
                 ^^^^^^^^^


Error ----------------------------------------------------------------------------------------------- typed_check.js:6:7

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   typed_check.js:6:7
   6|   if (x2) {} // ERROR, falls to SingletonStrT
            ^^

References:
   typed_check.js:5:12
   5|   let x2 = '' as const
                 ^^ [1]


Error ---------------------------------------------------------------------------------------------- typed_check.js:11:9

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   typed_check.js:11:9
   11|     if (x3) {} // ERROR, refined, falsy, falls to SingletonStrT
               ^^

References:
   typed_check.js:8:11
    8|   let x3: string = 'avuyv'
                 ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typed_check.js:15:9

This condition is likely truthy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   typed_check.js:15:9
   15|     if (x3) {} // ERROR we don't know what this is
               ^^

References:
   typed_check.js:8:11
    8|   let x3: string = 'avuyv'
                 ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typed_check.js:97:6

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   typed_check.js:97:6
   97|   if(d) {} // D is always truthy
            ^

References:
   typed_check.js:93:7
   93|   let d: C;
             ^ [1]


Error --------------------------------------------------------------------------------------------- typed_check.js:120:8

This condition is likely truthy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   typed_check.js:120:8
   120|     if(x1) {} // error, truthy
               ^^

References:
   typed_check.js:118:11
   118|   let x1: number = 6;
                  ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- typed_check.js:124:9

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   typed_check.js:124:9
   124|     if (x1) {} // error, falsy
                ^^

References:
   typed_check.js:118:11
   118|   let x1: number = 6;
                  ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- typed_check.js:162:3

Cannot compare `x` [1] to string literal `foox` [2], because `x` [1] is not a subtype of string literal `foox` [2] and
string literal `foox` [2] is not a subtype of `x` [1]. In **rare** cases, these types may have overlapping values but
lack a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check.
 [invalid-compare]

   typed_check.js:162:3
   162|   x === 'foox'; // error
          ^^^^^^^^^^^^

References:
   typed_check.js:161:17
   161|   declare const x: ?T;
                        ^ [1]
   typed_check.js:162:9
   162|   x === 'foox'; // error
                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:172:8

Cannot get `y.ha` because property `ha` is missing in `Boolean` [1]. [prop-missing]

   typed_check.js:172:8
   172|   && y.ha === 'fdas'; // [prop-missing] double errors
               ^^

References:
   typed_check.js:170:20
   170|   declare const y: boolean | idk;
                           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- typed_check.js:172:8

Cannot get `y.ha` because property `ha` is missing in `Boolean` [1]. [prop-missing]

   typed_check.js:172:8
   172|   && y.ha === 'fdas'; // [prop-missing] double errors
               ^^

References:
   typed_check.js:170:30
   170|   declare const y: boolean | idk;
                                     ^^^ [1]


Error --------------------------------------------------------------------------------------------- typed_check.js:191:7

Cannot compare `a` [1] to `b` [2], because `a` [1] is not a subtype of `b` [2] and `b` [2] is not a subtype of `a` [1].
In **rare** cases, these types may have overlapping values but lack a subtyping relationship. If that happens, you can
cast one side to the union of both types to pass the flow check.  [invalid-compare]

   typed_check.js:191:7
   191|   if (a === b){} // error
              ^^^^^^^

References:
   typed_check.js:189:7
   189|   let a: even = 2;
              ^ [1]
   typed_check.js:190:7
   190|   let b: odd = 1;
              ^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:192:7

Cannot compare `a` [1] to null [2], because [2] is null and `a` [1] does not contain null. Perhaps you meant to use
`==`, which checks for both `undefined` and `null`? [invalid-compare]

   typed_check.js:192:7
   192|   if (a === null){} // error
              ^^^^^^^^^^

References:
   typed_check.js:189:7
   189|   let a: even = 2;
              ^ [1]
   typed_check.js:192:13
   192|   if (a === null){} // error
                    ^^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:194:7

Cannot compare null [1] to `a` [2], because [1] is null and `a` [2] does not contain null. Perhaps you meant to use
`==`, which checks for both `undefined` and `null`? [invalid-compare]

   typed_check.js:194:7
   194|   if (null === a){} // error
              ^^^^^^^^^^

References:
   typed_check.js:194:7
   194|   if (null === a){} // error
              ^^^^ [1]
   typed_check.js:189:7
   189|   let a: even = 2;
              ^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:202:7

Cannot compare `c` [1] to `d` [2], because `c` [1] is not a subtype of `d` [2] and `d` [2] is not a subtype of `c` [1].
In **rare** cases, these types may have overlapping values but lack a subtyping relationship. If that happens, you can
cast one side to the union of both types to pass the flow check.  [invalid-compare]

   typed_check.js:202:7
   202|   if (c === d){} // error by current implementation. This is not a good error.
              ^^^^^^^

References:
   typed_check.js:200:7
   200|   let c: evenAndZero = 0;
              ^ [1]
   typed_check.js:201:7
   201|   let d: oddAndZero = 0;
              ^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:231:7

Cannot compare `a` [1] to string literal `s3` [2], because `a` [1] is not a subtype of string literal `s3` [2] and
string literal `s3` [2] is not a subtype of `a` [1]. In **rare** cases, these types may have overlapping values but lack
a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check. 
[invalid-compare]

   typed_check.js:231:7
   231|   if (a===('s3' as const)) {} // error
              ^^^^^^^^^^^^^^^^^^^

References:
   typed_check.js:226:7
   226|   let a : s1 = 's1';
              ^ [1]
   typed_check.js:231:12
   231|   if (a===('s3' as const)) {} // error
                   ^^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:233:7

Cannot compare `a` [1] to string literal `s3` [2], because `a` [1] is not a subtype of string literal `s3` [2] and
string literal `s3` [2] is not a subtype of `a` [1]. In **rare** cases, these types may have overlapping values but lack
a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check. 
[invalid-compare]

   typed_check.js:233:7
   233|   if (a==='s3') {} // error
              ^^^^^^^^

References:
   typed_check.js:226:7
   226|   let a : s1 = 's1';
              ^ [1]
   typed_check.js:233:11
   233|   if (a==='s3') {} // error
                  ^^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:238:7

Cannot compare `a` [1] to string literal `s3` [2], because `a` [1] is not a subtype of string literal `s3` [2] and
string literal `s3` [2] is not a subtype of `a` [1]. In **rare** cases, these types may have overlapping values but lack
a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check. 
[invalid-compare]

   typed_check.js:238:7
   238|   if (a!==('s3' as const)) {} // error
              ^^^^^^^^^^^^^^^^^^^

References:
   typed_check.js:226:7
   226|   let a : s1 = 's1';
              ^ [1]
   typed_check.js:238:12
   238|   if (a!==('s3' as const)) {} // error
                   ^^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:240:7

Cannot compare `a` [1] to string literal `s3` [2], because `a` [1] is not a subtype of string literal `s3` [2] and
string literal `s3` [2] is not a subtype of `a` [1]. In **rare** cases, these types may have overlapping values but lack
a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check. 
[invalid-compare]

   typed_check.js:240:7
   240|   if (a!=='s3') {} // error
              ^^^^^^^^

References:
   typed_check.js:226:7
   226|   let a : s1 = 's1';
              ^ [1]
   typed_check.js:240:11
   240|   if (a!=='s3') {} // error
                  ^^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:256:7

Cannot compare `v1` [1] to string literal `b` [2], because string literal `a` [3] is not a subtype of string literal
`b` [2] and string literal `b` [2] is not a subtype of string literal `a` [3]. In **rare** cases, these types may have
overlapping values but lack a subtyping relationship. If that happens, you can cast one side to the union of both types
to pass the flow check.  [invalid-compare]

   typed_check.js:256:7
   256|   if (v1 === ('b' as const)) {} // not supposed to error, but there's bug with intersections: T230742740
              ^^^^^^^^^^^^^^^^^^^^^

References:
   typed_check.js:255:7
   255|   let v1: KEYS_AGG = 'a';
              ^^ [1]
   typed_check.js:256:15
   256|   if (v1 === ('b' as const)) {} // not supposed to error, but there's bug with intersections: T230742740
                      ^^^ [2]
   typed_check.js:256:7
   256|   if (v1 === ('b' as const)) {} // not supposed to error, but there's bug with intersections: T230742740
              ^^ [3]


Error --------------------------------------------------------------------------------------------- typed_check.js:257:7

Cannot compare `v1` [1] to string literal `b` [2], because string literal `a` [3] is not a subtype of string literal
`b` [2] and string literal `b` [2] is not a subtype of string literal `a` [3]. In **rare** cases, these types may have
overlapping values but lack a subtyping relationship. If that happens, you can cast one side to the union of both types
to pass the flow check.  [invalid-compare]

   typed_check.js:257:7
   257|   if (v1 !== ('b' as const)) {} // not supposed to error, but there's bug with intersections: T230742740
              ^^^^^^^^^^^^^^^^^^^^^

References:
   typed_check.js:255:7
   255|   let v1: KEYS_AGG = 'a';
              ^^ [1]
   typed_check.js:257:15
   257|   if (v1 !== ('b' as const)) {} // not supposed to error, but there's bug with intersections: T230742740
                      ^^^ [2]
   typed_check.js:257:7
   257|   if (v1 !== ('b' as const)) {} // not supposed to error, but there's bug with intersections: T230742740
              ^^ [3]


Error --------------------------------------------------------------------------------------------- typed_check.js:268:3

Cannot compare `b` [1] to null [2], because [2] is null and string [3] does not contain null. Perhaps you meant to use
`==`, which checks for both `undefined` and `null`? [invalid-compare]

   typed_check.js:268:3
   268|   b === null; // error, null is not allowed
          ^^^^^^^^^^

References:
   typed_check.js:267:17
   267|   declare const b: string;
                        ^ [1]
   typed_check.js:268:9
   268|   b === null; // error, null is not allowed
                ^^^^ [2]
   typed_check.js:267:20
   267|   declare const b: string;
                           ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- typed_check.js:269:3

Cannot compare `b` [1] to null [2], because [2] is null and string [3] does not contain null. Perhaps you meant to use
`==`, which checks for both `undefined` and `null`? [invalid-compare]

   typed_check.js:269:3
   269|   b !== null; // error, null is not allowed
          ^^^^^^^^^^

References:
   typed_check.js:267:17
   267|   declare const b: string;
                        ^ [1]
   typed_check.js:269:9
   269|   b !== null; // error, null is not allowed
                ^^^^ [2]
   typed_check.js:267:20
   267|   declare const b: string;
                           ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- typed_check.js:270:3

Cannot compare null [1] to `b` [2], because [1] is null and string [3] does not contain null. Perhaps you meant to use
`==`, which checks for both `undefined` and `null`? [invalid-compare]

   typed_check.js:270:3
   270|   null === b; // error, null is not allowed
          ^^^^^^^^^^

References:
   typed_check.js:270:3
   270|   null === b; // error, null is not allowed
          ^^^^ [1]
   typed_check.js:267:17
   267|   declare const b: string;
                        ^ [2]
   typed_check.js:267:20
   267|   declare const b: string;
                           ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- typed_check.js:271:3

Cannot compare null [1] to `b` [2], because [1] is null and string [3] does not contain null. Perhaps you meant to use
`==`, which checks for both `undefined` and `null`? [invalid-compare]

   typed_check.js:271:3
   271|   null !== b; // error, null is not allowed
          ^^^^^^^^^^

References:
   typed_check.js:271:3
   271|   null !== b; // error, null is not allowed
          ^^^^ [1]
   typed_check.js:267:17
   267|   declare const b: string;
                        ^ [2]
   typed_check.js:267:20
   267|   declare const b: string;
                           ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- typed_check.js:280:3

Cannot compare `d` [1] to string literal `a` [2], because `d` [1] is empty.  [invalid-compare]

   typed_check.js:280:3
   280|   d === 'a'; // error, empty is not allowed
          ^^^^^^^^^

References:
   typed_check.js:279:17
   279|   declare const d: empty;
                        ^ [1]
   typed_check.js:280:9
   280|   d === 'a'; // error, empty is not allowed
                ^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:281:3

Cannot compare `d` [1] to string literal `a` [2], because `d` [1] is empty.  [invalid-compare]

   typed_check.js:281:3
   281|   d !== 'a'; // error, empty is not allowed
          ^^^^^^^^^

References:
   typed_check.js:279:17
   279|   declare const d: empty;
                        ^ [1]
   typed_check.js:281:9
   281|   d !== 'a'; // error, empty is not allowed
                ^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:282:3

Cannot compare string literal `a` [1] to `d` [2], because `d` [2] is empty.  [invalid-compare]

   typed_check.js:282:3
   282|   'a' === d; // error, empty is not allowed
          ^^^^^^^^^

References:
   typed_check.js:282:3
   282|   'a' === d; // error, empty is not allowed
          ^^^ [1]
   typed_check.js:279:17
   279|   declare const d: empty;
                        ^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:283:3

Cannot compare string literal `a` [1] to `d` [2], because `d` [2] is empty.  [invalid-compare]

   typed_check.js:283:3
   283|   'a' !== d; // error, empty is not allowed
          ^^^^^^^^^

References:
   typed_check.js:283:3
   283|   'a' !== d; // error, empty is not allowed
          ^^^ [1]
   typed_check.js:279:17
   279|   declare const d: empty;
                        ^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:293:5

Cannot compare `a` [1] to string literal `c` [2], because `a` [1] is not a subtype of string literal `c` [2] and string
literal `c` [2] is not a subtype of `a` [1]. In **rare** cases, these types may have overlapping values but lack a
subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check. 
[invalid-compare]

   typed_check.js:293:5
   293|     case 'c': // error
            ^^^^^^^^

References:
   typed_check.js:287:17
   287|   declare const a: 'a' | 'b';
                        ^ [1]
   typed_check.js:293:10
   293|     case 'c': // error
                 ^^^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:302:5

Cannot compare `a` [1] to `b` [2], because string [3] is not a subtype of number literal `0` [2] and number literal
`0` [2] is not a subtype of string [3]. In **rare** cases, these types may have overlapping values but lack a subtyping
relationship. If that happens, you can cast one side to the union of both types to pass the flow check. 
[invalid-compare]

   typed_check.js:302:5
   302|     a === b; // error
            ^^^^^^^

References:
   typed_check.js:299:17
   299|   declare const a: string;
                        ^ [1]
   typed_check.js:302:11
   302|     a === b; // error
                  ^ [2]
   typed_check.js:299:20
   299|   declare const a: string;
                           ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- typed_check.js:312:3

Cannot compare `a` [1] to `c` [2], because `a` [1] is empty.  [invalid-compare]

   typed_check.js:312:3
   312|   a === c; // error
          ^^^^^^^

References:
   typed_check.js:307:17
   307|   declare const a: empty;
                        ^ [1]
   typed_check.js:309:17
   309|   declare const c: string;
                        ^ [2]


Error --------------------------------------------------------------------------------------------- typed_check.js:313:3

Cannot compare `a` [1] to `c` [2], because `a` [1] is empty.  [invalid-compare]

   typed_check.js:313:3
   313|   a !== c; // error
          ^^^^^^^

References:
   typed_check.js:307:17
   307|   declare const a: empty;
                        ^ [1]
   typed_check.js:309:17
   309|   declare const c: string;
                        ^ [2]


Error ------------------------------------------------------------------------------------------------- unary_not.js:2:8

This condition is falsy. [constant-condition]

   2|     if(!'afa') {} // ERROR -> falsy
             ^^^^^^


Error ------------------------------------------------------------------------------------------------- unary_not.js:9:8

This condition is truthy. [constant-condition]

   9|     if(a ? 'afa' : 5) {} // ERROR -> truthy
             ^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:10:8

This condition is falsy. [constant-condition]

   10|     if(a ? !'afa' : !5) {} // ERROR -> falsy
              ^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:12:5

This condition is truthy. [constant-condition]

   12|     'afa' && a; // ERROR -> truthy
           ^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:13:6

This condition is falsy. [constant-condition]

   13|     (!'afa') && a; // ERROR -> falsy
            ^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:15:5

This condition is truthy. [constant-condition]

   15|     'afa' || a; // ERROR -> truthy
           ^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:16:6

This condition is falsy. [constant-condition]

   16|     (!'afa') || a; // ERROR -> falsy
            ^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:18:5

This condition is truthy. [constant-condition]

   18|     'afa' ?? a; // ERROR -> truthy
           ^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:19:6

This condition is falsy. [constant-condition]

   19|     (!'afa') ?? a; // ERROR -> falsy
            ^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:24:8

This condition is falsy. [constant-condition]

   24|     if(!!!'afa') {} // ERROR -> falsy
              ^^^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:31:8

This condition is falsy. [constant-condition]

   31|     if(!(a ? !!'afa' : !!5)) {} // ERROR -> falsy
              ^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:32:8

This condition is falsy. [constant-condition]

   32|     if(a ? !!!!!!!'afa' : !!!5) {} // ERROR -> falsy
              ^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:34:5

This condition is truthy. [constant-condition]

   34|     'afa' && a; // ERROR -> truthy
           ^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:35:6

This condition is falsy. [constant-condition]

   35|     (!!!'afa') && a; // ERROR -> falsy
            ^^^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:37:5

This condition is truthy. [constant-condition]

   37|     'afa' || a; // ERROR -> truthy
           ^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:38:6

This condition is falsy. [constant-condition]

   38|     (!!!!!!!'afa') || a; // ERROR -> falsy
            ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:40:5

This condition is truthy. [constant-condition]

   40|     'afa' ?? a; // ERROR -> truthy
           ^^^^^


Error ------------------------------------------------------------------------------------------------ unary_not.js:41:6

This condition is falsy. [constant-condition]

   41|     (!!!!!!!!!!!'afa') ?? a; // ERROR -> falsy
            ^^^^^^^^^^^^^^^^



Found 175 errors
