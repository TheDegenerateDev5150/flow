Error ---------------------------------------------------------------------------------------------------- test.js:11:10

Cannot return `x` because number [1] is incompatible with `Queue` [2]. [incompatible-type]

   test.js:11:10
   11|   return x;
                ^

References:
   test.js:10:35
   10| function flowsSomethingToQueue(x: number): Queue {
                                         ^^^^^^ [1]
   test.js:10:44
   10| function flowsSomethingToQueue(x: number): Queue {
                                                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:14:10

Cannot return `q` because `Queue` [1] is incompatible with number [2]. [incompatible-type]

   test.js:14:10
   14|   return q;
                ^

References:
   test.js:13:35
   13| function flowsQueueToSomething(q: Queue): number {
                                         ^^^^^ [1]
   test.js:13:43
   13| function flowsQueueToSomething(q: Queue): number {
                                                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:19:19

Cannot call `counter_to_number` with `y` bound to `c` because number [1] is incompatible with `Counter` [2].
[incompatible-type]

   test.js:19:19
   19| counter_to_number(y); // Error: number ~> Counter
                         ^

References:
   test.js:18:9
   18| var y = c + 1; // Fine, since Counter is a number.
               ^^^^^ [1]
   flow-typed/decls.js:8:39
    8| declare function counter_to_number(c: Counter): number;
                                             ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:28:10

Cannot return `x` because number [1] is incompatible with string [2] in type argument `T` [3]. [incompatible-type]

   test.js:28:10
   28|   return x; // Error: string ~> number, number ~> string
                ^

References:
   test.js:27:45
   27| function convertNumberToString(x: PolyStack<number>): PolyStack<string> {
                                                   ^^^^^^ [1]
   test.js:27:65
   27| function convertNumberToString(x: PolyStack<number>): PolyStack<string> {
                                                                       ^^^^^^ [2]
   flow-typed/decls.js:10:38
   10| declare export opaque type PolyStack<T>;
                                            ^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:35:10

Cannot return `x` because number [1] is incompatible with string [2] in type argument `T` [3]. [incompatible-type]

   test.js:35:10
   35|   return x; // Error string ~> number
                ^

References:
   test.js:34:30
   34| function contraBad(x: Contra<number>): Contra<number | string> {
                                    ^^^^^^ [1]
   test.js:34:56
   34| function contraBad(x: Contra<number>): Contra<number | string> {
                                                              ^^^^^^ [2]
   flow-typed/decls.js:15:36
   15| declare export opaque type Contra<-T>;
                                          ^ [3]



Found 5 errors
