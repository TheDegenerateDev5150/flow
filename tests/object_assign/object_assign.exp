Error ------------------------------------------------------------------------------------------------------- A.js:16:21

Cannot assign `Bad.foo()` to `bad` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:16:21
   16|   var bad: number = Bad.foo();
                           ^^^^^^^^^

References:
   A.js:8:44
    8| var Bad = Object.assign({} as {foo?: () => string}, EventEmitter.prototype, {
                                                  ^^^^^^ [1]
   A.js:16:12
   16|   var bad: number = Bad.foo();
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:21:26

Cannot cast object literal to object type because property `foo` is missing in object literal [1] but exists in object
type [2]. [incompatible-type]

   A.js:21:26
   21| var Good = Object.assign({} as {foo: () => string}, MyEventEmitter.prototype, {
                                ^^ [1]

References:
   A.js:21:32
   21| var Good = Object.assign({} as {foo: () => string}, MyEventEmitter.prototype, {
                                      ^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:29:22

Cannot assign `Good.foo()` to `good` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:29:22
   29|   var good: number = Good.foo();
                            ^^^^^^^^^^

References:
   A.js:21:44
   21| var Good = Object.assign({} as {foo: () => string}, MyEventEmitter.prototype, {
                                                  ^^^^^^ [1]
   A.js:29:13
   29|   var good: number = Good.foo();
                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:36:23

Cannot assign `A.Good.foo()` to `good_` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:36:23
   36|   var good_: number = A.Good.foo(); // string ~> number
                             ^^^^^^^^^^^^

References:
   A.js:21:44
   21| var Good = Object.assign({} as {foo: () => string}, MyEventEmitter.prototype, {
                                                  ^^^^^^ [1]
   A.js:36:14
   36|   var good_: number = A.Good.foo(); // string ~> number
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:39:22

Cannot assign `f()` to `bad_` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:39:22
   39|   var bad_: number = f(); // error: string ~> number
                            ^^^

References:
   A.js:8:44
    8| var Bad = Object.assign({} as {foo?: () => string}, EventEmitter.prototype, {
                                                  ^^^^^^ [1]
   A.js:39:13
   39|   var bad_: number = f(); // error: string ~> number
                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:39:22

Cannot call `f` because undefined [1] is not a function. [not-a-function]

   A.js:39:22
   39|   var bad_: number = f(); // error: string ~> number
                            ^

References:
   A.js:8:38
    8| var Bad = Object.assign({} as {foo?: () => string}, EventEmitter.prototype, {
                                            ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- A.js:41:23

Cannot assign `A.Bad.foo()` to `bad__` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:41:23
   41|   var bad__: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                             ^^^^^^^^^^^

References:
   A.js:8:44
    8| var Bad = Object.assign({} as {foo?: () => string}, EventEmitter.prototype, {
                                                  ^^^^^^ [1]
   A.js:41:14
   41|   var bad__: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:41:29

Cannot call `A.Bad.foo` because undefined [1] is not a function. [not-a-function]

   A.js:41:29
   41|   var bad__: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                                   ^^^

References:
   A.js:8:38
    8| var Bad = Object.assign({} as {foo?: () => string}, EventEmitter.prototype, {
                                            ^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- intersection.js:5:15

Incorrect arguments passed to `Object.assign` because: [incompatible-use]
 - Either incorrect arguments passed to `Object.assign` because property `bar` is missing in object type [1].
 - Or incorrect arguments passed to `Object.assign` because property `foo` is missing in object type [2].

   intersection.js:5:15
   5| Object.assign(inter1, {foo: '', bar: 3}); // error: should be ok
                    ^^^^^^

References:
   intersection.js:1:23
   1| declare const inter1: {foo: string, ...} & {bar: number, ...};
                            ^^^^^^^^^^^^^^^^^^ [1]
   intersection.js:1:44
   1| declare const inter1: {foo: string, ...} & {bar: number, ...};
                                                 ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- intersection.js:6:15

Incorrect arguments passed to `Object.assign` because: [incompatible-use]
 - Either incorrect arguments passed to `Object.assign` because number [1] is incompatible with string [2].
 - Or incorrect arguments passed to `Object.assign` because property `foo` is missing in object type [3].

   intersection.js:6:15
   6| Object.assign(inter1, {foo: 3});; // error
                    ^^^^^^

References:
   intersection.js:6:29
   6| Object.assign(inter1, {foo: 3});; // error
                                  ^ [1]
   intersection.js:1:29
   1| declare const inter1: {foo: string, ...} & {bar: number, ...};
                                  ^^^^^^ [2]
   intersection.js:1:44
   1| declare const inter1: {foo: string, ...} & {bar: number, ...};
                                                 ^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- intersection.js:7:15

Incorrect arguments passed to `Object.assign` because: [incompatible-use]
 - Either incorrect arguments passed to `Object.assign` because property `bar` is missing in object type [1].
 - Or incorrect arguments passed to `Object.assign` because string [2] is incompatible with number [3].

   intersection.js:7:15
   7| Object.assign(inter1, {bar: ''});; // error
                    ^^^^^^

References:
   intersection.js:1:23
   1| declare const inter1: {foo: string, ...} & {bar: number, ...};
                            ^^^^^^^^^^^^^^^^^^ [1]
   intersection.js:7:29
   7| Object.assign(inter1, {bar: ''});; // error
                                  ^^ [2]
   intersection.js:1:50
   1| declare const inter1: {foo: string, ...} & {bar: number, ...};
                                                       ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- maybe.js:12:34

Cannot assign `Object.assign(...)` to `target[annotationTypeName]` because number [1] is incompatible with string [2] in
the indexer property. [incompatible-type]

   maybe.js:12:34
                                        v----------------------
   12|     target[annotationTypeName] = Object.assign( // error
   13|       target[annotationTypeName],
   14|       source[annotationTypeName],
   15|     );
           ^

References:
   maybe.js:3:21
    3|   int: ?{[string]: ?number, ...},
                           ^^^^^^ [1]
   maybe.js:2:24
    2|   string: ?{[string]: ?string, ...},
                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- non_objects.js:3:1

Incorrect arguments passed to `Object.assign` because property `a` is missing in string [1]. [incompatible-use]

   non_objects.js:3:1
   3| Object.assign("123", {a: "foo"});
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   non_objects.js:3:15
   3| Object.assign("123", {a: "foo"});
                    ^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- non_objects.js:4:1

Incorrect arguments passed to `Object.assign` because property `a` is missing in number [1]. [incompatible-use]

   non_objects.js:4:1
   4| Object.assign(123, {a: "foo"});
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   non_objects.js:4:15
   4| Object.assign(123, {a: "foo"});
                    ^^^ [1]


Error ----------------------------------------------------------------------------------------------- non_objects.js:5:1

Incorrect arguments passed to `Object.assign` because number [1] is not an object. [not-an-object]

   non_objects.js:5:1
   5| Object.assign({a: "foo"}, 123);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   non_objects.js:5:27
   5| Object.assign({a: "foo"}, 123);
                                ^^^ [1]


Error ----------------------------------------------------------------------------------------------- non_objects.js:6:8

Cannot call method `assign` because `Object.assign` [1] requires another argument. [incompatible-type]

   non_objects.js:6:8
   6| Object.assign();
             ^^^^^^

References:
   non_objects.js:6:1
   6| Object.assign();
      ^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- scope.js:32:3

Cannot cast `obj.attr` to number because string [1] is incompatible with number [2]. [incompatible-type]

   scope.js:32:3
   32|   obj.attr as number;
         ^^^^^^^^

References:
   scope.js:30:16
   30|     obj.attr = 'hello';
                      ^^^^^^^ [1]
   scope.js:32:15
   32|   obj.attr as number;
                     ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:5:28

Cannot cast `Object.assign(...)` to object type because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   spread.js:5:28
   5| (Object.assign(({}: {foo?: string}), ...arrOfObjs): { foo?: number}); // Error: string ~> number
                                 ^^^^^^ [1]

References:
   spread.js:5:61
   5| (Object.assign(({}: {foo?: string}), ...arrOfObjs): { foo?: number}); // Error: string ~> number
                                                                  ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:6:28

Cannot cast `Object.assign(...)` to object type because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   spread.js:6:28
   6| (Object.assign(({}: {foo?: string}), ...roArrOfObjs): { foo?: number}); // Error: string ~> number
                                 ^^^^^^ [1]

References:
   spread.js:6:63
   6| (Object.assign(({}: {foo?: string}), ...roArrOfObjs): { foo?: number}); // Error: string ~> number
                                                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:7:42

Cannot cast `Object.assign(...)` to object type because number [1] is incompatible with boolean [2] in property `bar`.
[incompatible-type]

   spread.js:7:42
   7| (Object.assign(({}: {foo?: string, bar?: number}), ...tup): { foo?: string, bar?: boolean}); // Error: number ~> boolean
                                               ^^^^^^ [1]

References:
   spread.js:7:83
   7| (Object.assign(({}: {foo?: string, bar?: number}), ...tup): { foo?: string, bar?: boolean}); // Error: number ~> boolean
                                                                                        ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:10:25

Cannot cast `Object.assign(...)` to object type because string [1] is incompatible with boolean literal `true` [2] in
property `b`. [incompatible-type]

   spread.js:10:25
   10|   ({}: {a?: number, b?: string, c?: boolean}),
                               ^^^^^^ [1]

References:
   spread.js:13:21
   13| ): {a?: number, b?: true, c?: boolean}); // Error: 'foo' => true
                           ^^^^ [2]



Found 21 errors
