Error ------------------------------------------------------------------------------------------------- array_lib.js:6:7

Cannot call `foo` with `x` bound to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   array_lib.js:6:7
   6|   foo(x);
            ^

References:
   array_lib.js:4:10
   4| var a = [0];
               ^ [1]
   array_lib.js:2:17
   2| function foo(x: string) {}
                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_lib.js:11:17

Cannot assign `b[0]` to `d` because string [1] is incompatible with number [2]. [incompatible-type]

   array_lib.js:11:17
   11| var d: number = b[0];
                       ^^^^

References:
   array_lib.js:7:10
    7|   return '' + x;
                ^^^^^^ [1]
   array_lib.js:11:8
   11| var d: number = b[0];
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_lib.js:13:24

Cannot assign `a.reverse()` to `e` because `number` [1] is not exactly the same as `string` [2] in array element.
[incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<number>` [3] and `Array<string>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   array_lib.js:13:24
     13| var e: Array<string> = a.reverse();
                                ^^^^^^^^^^^

References:
   array_lib.js:4:10
      4| var a = [0];
                  ^ [1]
   array_lib.js:13:14
     13| var e: Array<string> = a.reverse();
                      ^^^^^^ [2]
   <BUILTINS>/core.js:1129:16
   1129|     reverse(): Array<T>;
                        ^^^^^^^^ [3]
   array_lib.js:13:8
     13| var e: Array<string> = a.reverse();
                ^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------- array_lib.js:26:24

Cannot assign `h.concat(...)` to `n` because `number | "a" | "b" | "c"` [1] is not exactly the same as `number` [2] in
array element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<number | "a" | "b" | "c">` [3] and `Array<number>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   array_lib.js:26:24
    26| var n: Array<number> = h.concat('a', 'b', 'c'); // Error
                               ^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:739:66
   739|     concat<S = T>(...items: Array<$ReadOnlyArray<S> | S>): Array<T | S>;
                                                                         ^^^^^ [1]
   array_lib.js:26:14
    26| var n: Array<number> = h.concat('a', 'b', 'c'); // Error
                     ^^^^^^ [2]
   <BUILTINS>/core.js:739:60
   739|     concat<S = T>(...items: Array<$ReadOnlyArray<S> | S>): Array<T | S>;
                                                                   ^^^^^^^^^^^^ [3]
   array_lib.js:26:8
    26| var n: Array<number> = h.concat('a', 'b', 'c'); // Error
               ^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------- array_lib.js:58:29

Cannot use operator `*` with operands string [1] and number [2] [unsafe-arithmetic]

   array_lib.js:58:29
     58|   [''].reduce((acc, str) => acc * str.length); // error, string ~> number
                                     ^^^^^^^^^^^^^^^^

References:
   array_lib.js:58:4
     58|   [''].reduce((acc, str) => acc * str.length); // error, string ~> number
            ^^ [1]
   <BUILTINS>/core.js:1449:13
   1449|     length: number;
                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_lib.js:59:34

Cannot use operator `*` with operands string [1] and number [2] [unsafe-arithmetic]

   array_lib.js:59:34
     59|   [''].reduceRight((acc, str) => acc * str.length); // error, string ~> number
                                          ^^^^^^^^^^^^^^^^

References:
   array_lib.js:59:4
     59|   [''].reduceRight((acc, str) => acc * str.length); // error, string ~> number
            ^^ [1]
   <BUILTINS>/core.js:1449:13
   1449|     length: number;
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ array_lib.js:71:3

Cannot cast `Array.from(...)` to array type because `string` [1] is not exactly the same as `empty` [2] in array
element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<string>` [3] and `Array<empty>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   array_lib.js:71:3
     71|   Array.from('abcd') as Array<empty>; // ERROR
           ^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1182:37
   1182|     static from(str: string): Array<string>;
                                             ^^^^^^ [1]
   array_lib.js:71:31
     71|   Array.from('abcd') as Array<empty>; // ERROR
                                       ^^^^^ [2]
   <BUILTINS>/core.js:1182:31
   1182|     static from(str: string): Array<string>;
                                       ^^^^^^^^^^^^^ [3]
   array_lib.js:71:25
     71|   Array.from('abcd') as Array<empty>; // ERROR
                                 ^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------- array_lib.js:80:57

Cannot call `Array.of` because number [1] is incompatible with string [2] in array element. [incompatible-type]

   array_lib.js:80:57
   80|   var incompatibleTypeNotOkay: Array<string> = Array.of(1, 2);
                                                               ^ [1]

References:
   array_lib.js:80:38
   80|   var incompatibleTypeNotOkay: Array<string> = Array.of(1, 2);
                                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_lib.js:80:60

Cannot call `Array.of` because number [1] is incompatible with string [2] in array element. [incompatible-type]

   array_lib.js:80:60
   80|   var incompatibleTypeNotOkay: Array<string> = Array.of(1, 2);
                                                                  ^ [1]

References:
   array_lib.js:80:38
   80|   var incompatibleTypeNotOkay: Array<string> = Array.of(1, 2);
                                            ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------------- at.js:6:5

Cannot call `arr.at` because function [1] requires another argument. [incompatible-type]

   at.js:6:5
     6| arr.at(); // ERROR
            ^^

References:
   <BUILTINS>/core.js:733:5
   733|     at(index: number): T | void;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------------- at.js:7:8

Cannot call `arr.at` with `"1"` bound to `index` because string [1] is incompatible with number [2]. [incompatible-type]

   at.js:7:8
     7| arr.at("1"); // ERROR
               ^^^ [1]

References:
   <BUILTINS>/core.js:733:15
   733|     at(index: number): T | void;
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- at.js:14:7

Cannot call `roArr.at` because function [1] requires another argument. [incompatible-type]

   at.js:14:7
    14| roArr.at(); // ERROR
              ^^

References:
   <BUILTINS>/core.js:733:5
   733|     at(index: number): T | void;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ at.js:15:10

Cannot call `roArr.at` with `"1"` bound to `index` because string [1] is incompatible with number [2].
[incompatible-type]

   at.js:15:10
    15| roArr.at("1"); // ERROR
                 ^^^ [1]

References:
   <BUILTINS>/core.js:733:15
   733|     at(index: number): T | void;
                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- callback_this.js:6:25

Cannot get `this.y` because property `y` is missing in undefined [1]. [incompatible-use]

   callback_this.js:6:25
   6|             return this.y; // error, function has wrong this
                              ^

References:
   callback_this.js:5:45
   5|         this.x = this.x.map(function (this: void, z) {
                                                  ^^^^ [1]


Error ----------------------------------------------------------------------------- filter_error_msg_quality_test.js:3:9

Cannot call `str_arr.filter` because: [incompatible-type]
 - Either number [1] is incompatible with boolean [2] in the return value.
 - Or string [3] is incompatible with boolean [4] in array element.

   filter_error_msg_quality_test.js:3:9
      3| str_arr.filter(s => s.length) as Array<boolean>;
                 ^^^^^^

References:
   <BUILTINS>/core.js:1449:13
   1449|     length: number;
                     ^^^^^^ [1]
   <BUILTINS>/core.js:1025:103
   1025|     filter<This, S: T>(callbackfn: (this: This, value: T, index: number, array: $ReadOnlyArray<T>) => implies value is S, thisArg: This): Array<S>;
                                                                                                               ^^^^^^^^^^^^^^^^^^ [2]
   filter_error_msg_quality_test.js:2:30
      2| declare const str_arr: Array<string>;
                                      ^^^^^^ [3]
   filter_error_msg_quality_test.js:3:40
      3| str_arr.filter(s => s.length) as Array<boolean>;
                                                ^^^^^^^ [4]


Error ---------------------------------------------------------------------------- filter_error_msg_quality_test.js:7:18

Cannot call `nullable_str_arr.filter` because: [incompatible-type]
 - Either null or undefined [1] is incompatible with string [2] in array element.
 - Or function [3] is incompatible with class `Boolean` [4].

   filter_error_msg_quality_test.js:7:18
      7| nullable_str_arr.filter(s => !!s) as Array<string>;
                          ^^^^^^

References:
   filter_error_msg_quality_test.js:6:39
      6| declare const nullable_str_arr: Array<?string>;
                                               ^^^^^^^ [1]
   filter_error_msg_quality_test.js:7:44
      7| nullable_str_arr.filter(s => !!s) as Array<string>;
                                                    ^^^^^^ [2]
   filter_error_msg_quality_test.js:7:25
      7| nullable_str_arr.filter(s => !!s) as Array<string>;
                                 ^^^^^^^^ [3]
   <BUILTINS>/core.js:1018:24
   1018|     filter(callbackfn: typeof Boolean): Array<$NonMaybeType<T>>;
                                ^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- flat.js:3:34

Cannot assign `arr1.flat()` to `result1_1` because `number extends $ReadOnlyArray<infer E> ? E : T` [1] is not exactly
the same as `string` [2] in array element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<number extends $ReadOnlyArray<infer E> ? E : T>` [3] and `Array<string>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:3:34
     3| const result1_1: Array<string> = arr1.flat(); // Error
                                         ^^^^^^^^^^^

References:
   <BUILTINS>/core.js:884:34
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   flat.js:3:24
     3| const result1_1: Array<string> = arr1.flat(); // Error
                               ^^^^^^ [2]
   <BUILTINS>/core.js:884:28
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   flat.js:3:18
     3| const result1_1: Array<string> = arr1.flat(); // Error
                         ^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- flat.js:5:43

Cannot assign `arr1.flat()` to `result1_3` because number [1] is incompatible with string [2] in array element.
[incompatible-type]

   flat.js:5:43
   5| const result1_3: $ReadOnlyArray<string> = arr1.flat(); // Error
                                                ^^^^^^^^^^^

References:
   flat.js:1:15
   1| const arr1 = [1];
                    ^ [1]
   flat.js:5:33
   5| const result1_3: $ReadOnlyArray<string> = arr1.flat(); // Error
                                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- flat.js:9:34

Cannot assign `arr2.flat()` to `result2_1` because `Array<number> extends $ReadOnlyArray<infer E> ? E : T` [1] is not
exactly the same as `string` [2] in array element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<Array<number> extends $ReadOnlyArray<infer E> ? E : T>` [3] and `Array<string>` [4] exactly the
same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:9:34
     9| const result2_1: Array<string> = arr2.flat(); // Error
                                         ^^^^^^^^^^^

References:
   <BUILTINS>/core.js:884:34
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   flat.js:9:24
     9| const result2_1: Array<string> = arr2.flat(); // Error
                               ^^^^^^ [2]
   <BUILTINS>/core.js:884:28
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   flat.js:9:18
     9| const result2_1: Array<string> = arr2.flat(); // Error
                         ^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- flat.js:11:34

Cannot assign `arr2.flat(...)` to `result2_3` because `Array<number>` [1] is not exactly the same as `number` [2] in
array element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<Array<number>>` [3] and `Array<number>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:11:34
    11| const result2_3: Array<number> = arr2.flat(0); // Error
                                         ^^^^^^^^^^^^

References:
   flat.js:7:19
     7| const arr2: Array<Array<number>> = [[1]];
                          ^^^^^^^^^^^^^ [1]
   flat.js:11:24
    11| const result2_3: Array<number> = arr2.flat(0); // Error
                               ^^^^^^ [2]
   <BUILTINS>/core.js:877:21
   877|     flat(depth: 0): Array<T>;
                            ^^^^^^^^ [3]
   flat.js:11:18
    11| const result2_3: Array<number> = arr2.flat(0); // Error
                         ^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- flat.js:13:34

Cannot assign `arr2.flat(...)` to `result2_5` because `Array<number> extends $ReadOnlyArray<infer E> ? E : T` [1] is not
exactly the same as `string` [2] in array element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<Array<number> extends $ReadOnlyArray<infer E> ? E : T>` [3] and `Array<string>` [4] exactly the
same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:13:34
    13| const result2_5: Array<string> = arr2.flat(1); // Error
                                         ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:884:34
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   flat.js:13:24
    13| const result2_5: Array<string> = arr2.flat(1); // Error
                               ^^^^^^ [2]
   <BUILTINS>/core.js:884:28
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   flat.js:13:18
    13| const result2_5: Array<string> = arr2.flat(1); // Error
                         ^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- flat.js:17:34

Cannot assign `arr3.flat()` to `result3_1` because `Array<Array<number>> extends $ReadOnlyArray<infer E> ? E : T` [1] is
not exactly the same as `number` [2] in array element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<Array<Array<number>> extends $ReadOnlyArray<infer E> ? E : T>` [3] and `Array<number>` [4] exactly
the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:17:34
    17| const result3_1: Array<number> = arr3.flat(); // Error
                                         ^^^^^^^^^^^

References:
   <BUILTINS>/core.js:884:34
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   flat.js:17:24
    17| const result3_1: Array<number> = arr3.flat(); // Error
                               ^^^^^^ [2]
   <BUILTINS>/core.js:884:28
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   flat.js:17:18
    17| const result3_1: Array<number> = arr3.flat(); // Error
                         ^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- flat.js:20:34

Cannot assign `arr3.flat(...)` to `result3_2` because `mixed` [1] is not exactly the same as `number` [2] in array
element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<mixed>` [3] and `Array<number>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:20:34
    20| const result3_2: Array<number> = arr3.flat(2); // Error - don't support this
                                         ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:891:32
   891|     flat(depth: number): Array<mixed>;
                                       ^^^^^ [1]
   flat.js:20:24
    20| const result3_2: Array<number> = arr3.flat(2); // Error - don't support this
                               ^^^^^^ [2]
   <BUILTINS>/core.js:891:26
   891|     flat(depth: number): Array<mixed>;
                                 ^^^^^^^^^^^^ [3]
   flat.js:20:18
    20| const result3_2: Array<number> = arr3.flat(2); // Error - don't support this
                         ^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- flat.js:25:34

Cannot assign `arr2.flat(...)` to `result2_6` because `mixed` [1] is not exactly the same as `number` [2] in array
element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<mixed>` [3] and `Array<number>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:25:34
    25| const result2_6: Array<number> = arr2.flat(x); // Error - don't support this
                                         ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:891:32
   891|     flat(depth: number): Array<mixed>;
                                       ^^^^^ [1]
   flat.js:25:24
    25| const result2_6: Array<number> = arr2.flat(x); // Error - don't support this
                               ^^^^^^ [2]
   <BUILTINS>/core.js:891:26
   891|     flat(depth: number): Array<mixed>;
                                 ^^^^^^^^^^^^ [3]
   flat.js:25:18
    25| const result2_6: Array<number> = arr2.flat(x); // Error - don't support this
                         ^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- flat.js:30:41

Cannot assign `arr4.flat()` to `result4_1` because
`(number | Array<number>) extends $ReadOnlyArray<infer E> ? E : T` [1] is not exactly the same as `Array<number>` [2] in
array element. [incompatible-type]

The above-mentioned two types must be the same because arrays are invariantly typed. To fix the error,
- Either make `Array<(number | Array<number>) extends $ReadOnlyArray<infer E> ? E : T>` [3] and
`Array<Array<number>>` [4] exactly the same
- Or make array type [4] a `$ReadOnlyArray`.
See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   flat.js:30:41
    30| const result4_1: Array<Array<number>> = arr4.flat(); // Error - should be flattened to Array<number>
                                                ^^^^^^^^^^^

References:
   <BUILTINS>/core.js:884:34
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   flat.js:30:24
    30| const result4_1: Array<Array<number>> = arr4.flat(); // Error - should be flattened to Array<number>
                               ^^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:884:28
   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   flat.js:30:18
    30| const result4_1: Array<Array<number>> = arr4.flat(); // Error - should be flattened to Array<number>
                         ^^^^^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- length.js:7:3

Cannot assign `6` to `r.length` because property `length` is not writable. [cannot-write]

   7| r.length = 6; //ng
        ^^^^^^


Error --------------------------------------------------------------------------------------------------- length.js:10:3

Cannot assign `7` to `t.length` because property `length` is not writable. [cannot-write]

   10| t.length = 7; //ng
         ^^^^^^



Found 27 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
