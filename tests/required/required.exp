Error ------------------------------------------------------------------------------------ required-positioning.js:18:26

Cannot call `register` because `number` [1] is not exactly the same as `RecursiveProp` [2] in property `foo` of type
argument `T`. 

The above-mentioned two types must be the same because property `foo` is invariantly typed. To fix the error,
- Either make `{foo: number}` [3] and `{[string]: RecursiveProp}` [4] exactly the same
- Or make property `foo` in object type [5] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   required-positioning.js:18:26
   18| register(() => (x: {foo: number}) => null); // ERROR!
                                ^^^^^^ [1]

References:
   required-positioning.js:8:34
    8| type Props = Required<{[string]: RecursiveProp}>;
                                        ^^^^^^^^^^^^^ [2]
   required-positioning.js:18:20
   18| register(() => (x: {foo: number}) => null); // ERROR!
                          ^^^^^^^^^^^^^ [3]
   required-positioning.js:8:23
    8| type Props = Required<{[string]: RecursiveProp}>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   required-positioning.js:12:37
   12| declare export function register<T: Props>(
                                           ^^^^^ [5]


Error ------------------------------------------------------------------------------------------------------ test.js:9:2

Cannot cast object literal to required of `A` because properties `x` and `y` are missing in object literal [1] but exist
in `A` [2]. [incompatible-type]

   test.js:9:2
   9| ({}: Required<A>); // ERROR
       ^^ [1]

References:
   test.js:9:15
   9| ({}: Required<A>); // ERROR
                    ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:10:2

Cannot cast object literal to required of `A` because property `y` is missing in object literal [1] but exists in
`A` [2]. [incompatible-type]

   test.js:10:2
   10| ({x: 1}: Required<A>); // ERROR
        ^^^^^^ [1]

References:
   test.js:10:19
   10| ({x: 1}: Required<A>); // ERROR
                         ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:11:2

Cannot cast object literal to required of `A` because property `x` is missing in object literal [1] but exists in
`A` [2]. [incompatible-type]

   test.js:11:2
   11| ({y: 1}: Required<A>); // ERROR
        ^^^^^^ [1]

References:
   test.js:11:19
   11| ({y: 1}: Required<A>); // ERROR
                         ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:12:6

Cannot cast object literal to required of `A` because undefined [1] is incompatible with number [2] in property `x`.
[incompatible-type]

   test.js:12:6
   12| ({x: undefined, y: undefined}: Required<A>); // ERROR
            ^^^^^^^^^ [1]

References:
   test.js:1:15
    1| type A = {x?: number, y?: number};
                     ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:12:20

Cannot cast object literal to required of `A` because undefined [1] is incompatible with number [2] in property `y`.
[incompatible-type]

   test.js:12:20
   12| ({x: undefined, y: undefined}: Required<A>); // ERROR
                          ^^^^^^^^^ [1]

References:
   test.js:1:27
    1| type A = {x?: number, y?: number};
                                 ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:13:2

Cannot cast object literal to required of `A` because property `extra` is extra in object literal [1] but missing in
`A` [2]. Exact objects do not accept extra props. [incompatible-type]

   test.js:13:2
   13| ({x: 1, y: 1, extra: 1}: Required<A>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   test.js:13:35
   13| ({x: 1, y: 1, extra: 1}: Required<A>); // ERROR
                                         ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:19:2

Cannot cast `null` to required of undefined because null [1] is incompatible with undefined [2]. [incompatible-type]

   test.js:19:2
   19| (null: Required<void>); // ERROR
        ^^^^ [1]

References:
   test.js:19:17
   19| (null: Required<void>); // ERROR
                       ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:23:2

Cannot cast `undefined` to required of null because undefined [1] is incompatible with null [2]. [incompatible-type]

   test.js:23:2
   23| (undefined: Required<null>); // ERROR
        ^^^^^^^^^ [1]

References:
   test.js:23:22
   23| (undefined: Required<null>); // ERROR
                            ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:26:2

Cannot cast object literal to required of nullable `A` because: [incompatible-type]
 - Either properties `x` and `y` are missing in object literal [1] but exist in `A` [2].
 - Or object literal [1] is incompatible with null or undefined [3].

   test.js:26:2
   26| ({}: Required<?A>); // ERROR
        ^^ [1]

References:
   test.js:26:16
   26| ({}: Required<?A>); // ERROR
                      ^ [2]
   test.js:26:15
   26| ({}: Required<?A>); // ERROR
                     ^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:27:2

Cannot cast object literal to required of nullable `A` because: [incompatible-type]
 - Either property `y` is missing in object literal [1] but exists in `A` [2].
 - Or object literal [1] is incompatible with null or undefined [3].

   test.js:27:2
   27| ({x: 1}: Required<?A>); // ERROR
        ^^^^^^ [1]

References:
   test.js:27:20
   27| ({x: 1}: Required<?A>); // ERROR
                          ^ [2]
   test.js:27:19
   27| ({x: 1}: Required<?A>); // ERROR
                         ^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:28:2

Cannot cast object literal to required of nullable `A` because: [incompatible-type]
 - Either property `x` is missing in object literal [1] but exists in `A` [2].
 - Or object literal [1] is incompatible with null or undefined [3].

   test.js:28:2
   28| ({y: 1}: Required<?A>); // ERROR
        ^^^^^^ [1]

References:
   test.js:28:20
   28| ({y: 1}: Required<?A>); // ERROR
                          ^ [2]
   test.js:28:19
   28| ({y: 1}: Required<?A>); // ERROR
                         ^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:29:2

Cannot cast object literal to required of nullable `A` because: [incompatible-type]
 - Either undefined [1] is incompatible with number [2] in property `x`.
 - Or object literal [3] is incompatible with null or undefined [4].

   test.js:29:2
   29| ({x: undefined, y: undefined}: Required<?A>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]

References:
   test.js:29:6
   29| ({x: undefined, y: undefined}: Required<?A>); // ERROR
            ^^^^^^^^^ [1]
   test.js:1:15
    1| type A = {x?: number, y?: number};
                     ^^^^^^ [2]
   test.js:29:41
   29| ({x: undefined, y: undefined}: Required<?A>); // ERROR
                                               ^^ [4]


Error ---------------------------------------------------------------------------------------------------- test.js:36:21

Cannot instantiate required of number because number [1] is not an object. [not-an-object]

   36| type Err = Required<number>; // ERROR
                           ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:51:2

Cannot cast object literal to required of `IFace` because properties `x` and `y` are missing in object literal [1] but
exist in `IFace` [2]. [incompatible-type]

   test.js:51:2
   51| ({}: Required<IFace>); // ERROR
        ^^ [1]

References:
   test.js:51:15
   51| ({}: Required<IFace>); // ERROR
                     ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:52:2

Cannot cast object literal to required of `IFace` because property `y` is missing in object literal [1] but exists in
`IFace` [2]. [incompatible-type]

   test.js:52:2
   52| ({x: 1}: Required<IFace>); // ERROR
        ^^^^^^ [1]

References:
   test.js:52:19
   52| ({x: 1}: Required<IFace>); // ERROR
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:53:2

Cannot cast object literal to required of `IFace` because property `x` is missing in object literal [1] but exists in
`IFace` [2]. [incompatible-type]

   test.js:53:2
   53| ({y: 1}: Required<IFace>); // ERROR
        ^^^^^^ [1]

References:
   test.js:53:19
   53| ({y: 1}: Required<IFace>); // ERROR
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:54:6

Cannot cast object literal to required of `IFace` because undefined [1] is incompatible with number [2] in property `x`.
[incompatible-type]

   test.js:54:6
   54| ({x: undefined, y: undefined}: Required<IFace>); // ERROR
            ^^^^^^^^^ [1]

References:
   test.js:41:7
   41|   x?: number;
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:54:20

Cannot cast object literal to required of `IFace` because undefined [1] is incompatible with number [2] in property `y`.
[incompatible-type]

   test.js:54:20
   54| ({x: undefined, y: undefined}: Required<IFace>); // ERROR
                          ^^^^^^^^^ [1]

References:
   test.js:42:7
   42|   y?: number;
             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:68:2

Cannot cast object literal to required of `JFace` because properties `x`, `y`, and `z` are missing in object literal [1]
but exist in `JFace` [2]. [incompatible-type]

   test.js:68:2
   68| ({}: Required<JFace>); // ERROR
        ^^ [1]

References:
   test.js:68:15
   68| ({}: Required<JFace>); // ERROR
                     ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:69:2

Cannot cast object literal to required of `JFace` because properties `y` and `z` are missing in object literal [1] but
exist in `JFace` [2]. [incompatible-type]

   test.js:69:2
   69| ({x: 1}: Required<JFace>); // ERROR
        ^^^^^^ [1]

References:
   test.js:69:19
   69| ({x: 1}: Required<JFace>); // ERROR
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:70:2

Cannot cast object literal to required of `JFace` because property `z` is missing in object literal [1] but exists in
`JFace` [2]. [incompatible-type]

   test.js:70:2
   70| ({x: 1, y: 1}: Required<JFace>); // ERROR
        ^^^^^^^^^^^^ [1]

References:
   test.js:70:25
   70| ({x: 1, y: 1}: Required<JFace>); // ERROR
                               ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:71:6

Cannot cast object literal to required of `JFace` because undefined [1] is incompatible with number [2] in property `x`.
[incompatible-type]

   test.js:71:6
   71| ({x: undefined, y: undefined, z: undefined}: Required<JFace>); // ERROR
            ^^^^^^^^^ [1]

References:
   test.js:41:7
   41|   x?: number;
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:71:20

Cannot cast object literal to required of `JFace` because undefined [1] is incompatible with number [2] in property `y`.
[incompatible-type]

   test.js:71:20
   71| ({x: undefined, y: undefined, z: undefined}: Required<JFace>); // ERROR
                          ^^^^^^^^^ [1]

References:
   test.js:42:7
   42|   y?: number;
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:71:34

Cannot cast object literal to required of `JFace` because undefined [1] is incompatible with number [2] in property `z`.
[incompatible-type]

   test.js:71:34
   71| ({x: undefined, y: undefined, z: undefined}: Required<JFace>); // ERROR
                                        ^^^^^^^^^ [1]

References:
   test.js:60:7
   60|   z?: number;
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:11:5

Cannot assign `1` to `x.r` because property `r` is not writable. [cannot-write]

   11|   x.r = 1; // ERROR
           ^


Error ------------------------------------------------------------------------------------------------- variance.js:13:6

Cannot get `x.w` because property `w` is not readable. [cannot-read]

   13|   (x.w: number); // ERROR
            ^



Found 27 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
