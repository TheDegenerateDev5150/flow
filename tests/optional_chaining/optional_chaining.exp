Error -------------------------------------------------------------------------------------- computed_properties.js:12:1

Cannot cast `x1?.['foo']` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:12:1
   12| x1?.['foo'] as empty;
       ^^

References:
   computed_properties.js:6:17
    6| declare var x1: ?X;
                       ^^ [1]
   computed_properties.js:12:16
   12| x1?.['foo'] as empty;
                      ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:12:1

Cannot cast `x1?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:12:1
   12| x1?.['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:12:16
   12| x1?.['foo'] as empty;
                      ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:13:1

Cannot cast `x2?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:13:1
   13| x2?.['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:13:16
   13| x2?.['foo'] as empty;
                      ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:13:1

This use of optional chaining (`?.`) is unnecessary because `x2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:13:1
   13| x2?.['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:13:1
   13| x2?.['foo'] as empty;
       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:15:1

Cannot cast `y1?.['bar']?.['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:15:1
   15| y1?.['bar']?.['foo'] as empty;
       ^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   computed_properties.js:15:25
   15| y1?.['bar']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:15:1

Cannot cast `y1?.['bar']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:15:1
   15| y1?.['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:15:25
   15| y1?.['bar']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:15:1

This use of optional chaining (`?.`) is unnecessary because `y1?.['bar']` [1] cannot be nullish or because an earlier
`?.` will short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:15:1
   15| y1?.['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:15:1
   15| y1?.['bar']?.['foo'] as empty;
       ^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:16:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:16:1
   16| y2?.['bar']?.['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:16:1
   16| y2?.['bar']?.['foo'] as empty;
       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:16:1

Cannot cast `y2?.['bar']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:16:1
   16| y2?.['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:16:25
   16| y2?.['bar']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:16:1

This use of optional chaining (`?.`) is unnecessary because `y2?.['bar']` [1] cannot be nullish or because an earlier
`?.` will short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:16:1
   16| y2?.['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:16:1
   16| y2?.['bar']?.['foo'] as empty;
       ^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:17:1

Cannot cast `y1?.['baz']?.['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:17:1
   17| y1?.['baz']?.['foo'] as empty;
       ^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   computed_properties.js:17:25
   17| y1?.['baz']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:17:1

Cannot cast `y1?.['baz']?.['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:17:1
   17| y1?.['baz']?.['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   computed_properties.js:17:25
   17| y1?.['baz']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:17:1

Cannot cast `y1?.['baz']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:17:1
   17| y1?.['baz']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:17:25
   17| y1?.['baz']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:18:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:18:1
   18| y2?.['baz']?.['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:18:1
   18| y2?.['baz']?.['foo'] as empty;
       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:18:1

Cannot cast `y2?.['baz']?.['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:18:1
   18| y2?.['baz']?.['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   computed_properties.js:18:25
   18| y2?.['baz']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:18:1

Cannot cast `y2?.['baz']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:18:1
   18| y2?.['baz']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:18:25
   18| y2?.['baz']?.['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:20:1

Cannot cast `y1?.['bar']['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:20:1
   20| y1?.['bar']['foo'] as empty;
       ^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   computed_properties.js:20:23
   20| y1?.['bar']['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:20:1

Cannot cast `y1?.['bar']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:20:1
   20| y1?.['bar']['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:20:23
   20| y1?.['bar']['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:21:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:21:1
   21| y2?.['bar']['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:21:1
   21| y2?.['bar']['foo'] as empty;
       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:21:1

Cannot cast `y2?.['bar']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:21:1
   21| y2?.['bar']['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:21:23
   21| y2?.['bar']['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:22:1

Cannot cast `y1?.['baz']['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:22:1
   22| y1?.['baz']['foo'] as empty;
       ^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   computed_properties.js:22:23
   22| y1?.['baz']['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:22:1

Cannot cast `y1?.['baz']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:22:1
   22| y1?.['baz']['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:22:23
   22| y1?.['baz']['foo'] as empty;
                             ^^^^^ [2]


Error ------------------------------------------------------------------------------------- computed_properties.js:22:13

Cannot get `y1?.['baz']['foo']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:22:13
   22| y1?.['baz']['foo'] as empty;
                   ^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:23:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:23:1
   23| y2?.['baz']['foo'] as empty;
       ^^^^^^^^^^^

References:
   computed_properties.js:23:1
   23| y2?.['baz']['foo'] as empty;
       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:23:1

Cannot cast `y2?.['baz']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:23:1
   23| y2?.['baz']['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:23:23
   23| y2?.['baz']['foo'] as empty;
                             ^^^^^ [2]


Error ------------------------------------------------------------------------------------- computed_properties.js:23:13

Cannot get `y2?.['baz']['foo']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:23:13
   23| y2?.['baz']['foo'] as empty;
                   ^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:25:4

Cannot get `y1['bar']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:25:4
   25| y1['bar']?.['foo'] as empty;
          ^^^^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:25:1

Cannot cast `y1['bar']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:25:1
   25| y1['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:25:23
   25| y1['bar']?.['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:25:1

This use of optional chaining (`?.`) is unnecessary because `y1['bar']` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:25:1
   25| y1['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:25:1
   25| y1['bar']?.['foo'] as empty;
       ^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:26:1

Cannot cast `y2['bar']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:26:1
   26| y2['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:26:23
   26| y2['bar']?.['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:26:1

This use of optional chaining (`?.`) is unnecessary because `y2['bar']` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:26:1
   26| y2['bar']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:26:1
   26| y2['bar']?.['foo'] as empty;
       ^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:27:4

Cannot get `y1['baz']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:27:4
   27| y1['baz']?.['foo'] as empty;
          ^^^^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:27:1

Cannot cast `y1['baz']?.['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:27:1
   27| y1['baz']?.['foo'] as empty;
       ^^^^^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   computed_properties.js:27:23
   27| y1['baz']?.['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:27:1

Cannot cast `y1['baz']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:27:1
   27| y1['baz']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:27:23
   27| y1['baz']?.['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:28:1

Cannot cast `y2['baz']?.['foo']` to empty because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   computed_properties.js:28:1
   28| y2['baz']?.['foo'] as empty;
       ^^^^^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   computed_properties.js:28:23
   28| y2['baz']?.['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:28:1

Cannot cast `y2['baz']?.['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:28:1
   28| y2['baz']?.['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:28:23
   28| y2['baz']?.['foo'] as empty;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:30:1

Cannot cast `y1?.['bar']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:30:1
   30| (y1?.['bar'])['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:30:25
   30| (y1?.['bar'])['foo'] as empty;
                               ^^^^^ [2]


Error ------------------------------------------------------------------------------------- computed_properties.js:30:15

Cannot get `y1?.['bar']['foo']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:30:15
   30| (y1?.['bar'])['foo'] as empty;
                     ^^^^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:31:1

Cannot cast `y2?.['bar']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:31:1
   31| (y2?.['bar'])['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:31:25
   31| (y2?.['bar'])['foo'] as empty;
                               ^^^^^ [2]


Error -------------------------------------------------------------------------------------- computed_properties.js:31:2

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:31:2
   31| (y2?.['bar'])['foo'] as empty;
        ^^^^^^^^^^^

References:
   computed_properties.js:31:2
   31| (y2?.['bar'])['foo'] as empty;
        ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:32:1

Cannot cast `y1?.['baz']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:32:1
   32| (y1?.['baz'])['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:32:25
   32| (y1?.['baz'])['foo'] as empty;
                               ^^^^^ [2]


Error ------------------------------------------------------------------------------------- computed_properties.js:32:15

Cannot get `y1?.['baz']['foo']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:32:15
   32| (y1?.['baz'])['foo'] as empty;
                     ^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error ------------------------------------------------------------------------------------- computed_properties.js:32:15

Cannot get `y1?.['baz']['foo']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:32:15
   32| (y1?.['baz'])['foo'] as empty;
                     ^^^^^

References:
   computed_properties.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:33:1

Cannot cast `y2?.['baz']['foo']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   computed_properties.js:33:1
   33| (y2?.['baz'])['foo'] as empty;
       ^^^^^^^^^^^^^^^^^^^^

References:
   computed_properties.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   computed_properties.js:33:25
   33| (y2?.['baz'])['foo'] as empty;
                               ^^^^^ [2]


Error ------------------------------------------------------------------------------------- computed_properties.js:33:15

Cannot get `y2?.['baz']['foo']` because null or undefined [1] does not have properties. [incompatible-use]

   computed_properties.js:33:15
   33| (y2?.['baz'])['foo'] as empty;
                     ^^^^^

References:
   computed_properties.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error -------------------------------------------------------------------------------------- computed_properties.js:33:2

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   computed_properties.js:33:2
   33| (y2?.['baz'])['foo'] as empty;
        ^^^^^^^^^^^

References:
   computed_properties.js:33:2
   33| (y2?.['baz'])['foo'] as empty;
        ^^ [1]


Error -------------------------------------------------------------------------------------------------- deletion.js:9:8

Cannot delete `x?.a` because undefined [1] is incompatible with number [2]. [incompatible-type]

   deletion.js:9:8
   9| delete x?.a; // error from writing undefined to number, otherwise ok
             ^^^^

References:
   deletion.js:9:1
   9| delete x?.a; // error from writing undefined to number, otherwise ok
      ^^^^^^^^^^^ [1]
   deletion.js:3:21
   3| declare var x: ?{a: number, b?: {c: number}};
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- deletion.js:10:8

Cannot delete `x?.b?.c` because undefined [1] is incompatible with number [2]. [incompatible-type]

   deletion.js:10:8
   10| delete x?.b?.c; // error from writing undefined to number, otherwise ok
              ^^^^^^^

References:
   deletion.js:10:1
   10| delete x?.b?.c; // error from writing undefined to number, otherwise ok
       ^^^^^^^^^^^^^^ [1]
   deletion.js:3:37
    3| declare var x: ?{a: number, b?: {c: number}};
                                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- deletion.js:12:8

Cannot delete `z.d?.c` because undefined [1] is incompatible with number [2]. [incompatible-type]

   deletion.js:12:8
   12| delete z.d?.c; // error from writing undefined to number, otherwise ok
              ^^^^^^

References:
   deletion.js:12:1
   12| delete z.d?.c; // error from writing undefined to number, otherwise ok
       ^^^^^^^^^^^^^ [1]
   deletion.js:5:25
    5| declare var z: {d: ?{c: number}};
                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- deletion.js:13:8

This use of optional chaining (`?.`) is unnecessary because `z` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   deletion.js:13:8
   13| delete z?.d; // unnecessary chain
              ^^^^

References:
   deletion.js:13:8
   13| delete z?.d; // unnecessary chain
              ^ [1]


Error ------------------------------------------------------------------------------------------------- deletion.js:15:8

This use of optional chaining (`?.`) is unnecessary because `w?.g` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   deletion.js:15:8
   15| delete w?.g?.e; // one unnecessary chain
              ^^^^^^^

References:
   deletion.js:15:8
   15| delete w?.g?.e; // one unnecessary chain
              ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- deletion.js:16:8

This use of optional chaining (`?.`) is unnecessary because `w2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   deletion.js:16:8
   16| delete w2?.g?.e; // two unnecessary chains
              ^^^^^

References:
   deletion.js:16:8
   16| delete w2?.g?.e; // two unnecessary chains
              ^^ [1]


Error ------------------------------------------------------------------------------------------------- deletion.js:16:8

This use of optional chaining (`?.`) is unnecessary because `w2?.g` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   deletion.js:16:8
   16| delete w2?.g?.e; // two unnecessary chains
              ^^^^^^^^

References:
   deletion.js:16:8
   16| delete w2?.g?.e; // two unnecessary chains
              ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- deletion.js:20:1

Cannot cast `a.a` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   deletion.js:20:1
   20| a.a as empty; // don't refine a.a to definitely exist
       ^^^

References:
   deletion.js:18:21
   18| declare var a: ?{a: ?number};
                           ^^^^^^^ [1]
   deletion.js:20:8
   20| a.a as empty; // don't refine a.a to definitely exist
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- deletion.js:20:1

Cannot cast `a.a` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   deletion.js:20:1
   20| a.a as empty; // don't refine a.a to definitely exist
       ^^^

References:
   deletion.js:18:22
   18| declare var a: ?{a: ?number};
                            ^^^^^^ [1]
   deletion.js:20:8
   20| a.a as empty; // don't refine a.a to definitely exist
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- deletion.js:20:3

Cannot get `a.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   deletion.js:20:3
   20| a.a as empty; // don't refine a.a to definitely exist
         ^

References:
   deletion.js:18:16
   18| declare var a: ?{a: ?number};
                      ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- deletion.js:23:8

Cannot assign `42` to `w?.g.e` because property `e` is missing in null or undefined [1]. [incompatible-use]

   deletion.js:23:8
   23| (w?.g).e = 42; // should fail
              ^

References:
   deletion.js:6:16
    6| declare var w: ?{g: {e: ?number}};
                      ^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ deletion.js:24:15

Cannot delete `w?.g.e` because property `e` is missing in null or undefined [1]. [incompatible-use]

   deletion.js:24:15
   24| delete (w?.g).e; // should fail
                     ^

References:
   deletion.js:6:16
    6| declare var w: ?{g: {e: ?number}};
                      ^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- function_calls.js:8:1

Cannot cast `x1?.()` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   function_calls.js:8:1
   8| x1?.() as empty;
      ^^

References:
   function_calls.js:5:17
   5| declare var x1: ?X;
                      ^^ [1]
   function_calls.js:8:11
   8| x1?.() as empty;
                ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_calls.js:8:1

Cannot cast `x1?.()` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   function_calls.js:8:1
   8| x1?.() as empty;
      ^^^^^^

References:
   function_calls.js:3:16
   3| type X = () => number;
                     ^^^^^^ [1]
   function_calls.js:8:11
   8| x1?.() as empty;
                ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_calls.js:9:1

Cannot cast `x2?.()` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   function_calls.js:9:1
   9| x2?.() as empty;
      ^^^^^^

References:
   function_calls.js:3:16
   3| type X = () => number;
                     ^^^^^^ [1]
   function_calls.js:9:11
   9| x2?.() as empty;
                ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_calls.js:9:1

This use of optional chaining (`?.`) is unnecessary because `x2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   function_calls.js:9:1
   9| x2?.() as empty;
      ^^^^^^

References:
   function_calls.js:9:1
   9| x2?.() as empty;
      ^^ [1]


Error ------------------------------------------------------------------------------------------- function_calls.js:13:2

Cannot call `x3?.()` because null or undefined [1] is not a function. [not-a-function]

   function_calls.js:13:2
   13| (x3?.())();
        ^^^^^^

References:
   function_calls.js:11:17
   11| declare var x3: ?() => () => number;
                       ^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- in_line_refinements.js:16:6

This use of optional chaining (`?.`) is unnecessary because `x` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   in_line_refinements.js:16:6
   16| x?.i[x?.a]; // unnecessary optional chain
            ^^^^

References:
   in_line_refinements.js:16:6
   16| x?.i[x?.a]; // unnecessary optional chain
            ^ [1]


Error ------------------------------------------------------------------------------------- in_line_refinements.js:24:14

Cannot get `x.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   in_line_refinements.js:24:14
   24| x?.f2(x.a)(x.a); // havoc refinements
                    ^

References:
   in_line_refinements.js:3:16
                      v-
    3| declare var x: ?{
    4|   a: number,
    5|   f: number => string,
    6|   i: Array<number>,
    7|   of?: number => string,
    8|   oi?: Array<number>,
    9|   i2: Array<Array<number>>,
   10|   i3: Array<{a: ?number}>,
   11|   f2: number => number => string,
   12| };
       ^ [1]


Error ------------------------------------------------------------------------------------------------ lhs_types.js:12:1

This use of optional chaining (`?.`) is unnecessary because `x` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   lhs_types.js:12:1
   12| x?.foo as ?number; // no error, lint
       ^^^^^^

References:
   lhs_types.js:12:1
   12| x?.foo as ?number; // no error, lint
       ^ [1]


Error ------------------------------------------------------------------------------------------------ lhs_types.js:13:8

Cannot get `mixed?.foo` because property `foo` is missing in mixed [1]. [incompatible-use]

   lhs_types.js:13:8
   13| mixed?.foo as ?number; // error, no lint
              ^^^

References:
   lhs_types.js:6:20
    6| declare var mixed: mixed;
                          ^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- method_calls.js:9:1

Cannot cast `foo?.bar?.()` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:9:1
   9| foo?.bar?.() as empty;
      ^^^

References:
   method_calls.js:7:18
   7| declare var foo: ?X;
                       ^^ [1]
   method_calls.js:9:17
   9| foo?.bar?.() as empty;
                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- method_calls.js:9:1

Cannot cast `foo?.bar?.()` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:9:1
   9| foo?.bar?.() as empty;
      ^^^^^^^^

References:
   method_calls.js:4:8
   4|   bar: ?() => number,
             ^^^^^^^^^^^^^ [1]
   method_calls.js:9:17
   9| foo?.bar?.() as empty;
                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- method_calls.js:9:1

Cannot cast `foo?.bar?.()` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:9:1
   9| foo?.bar?.() as empty;
      ^^^^^^^^^^^^

References:
   method_calls.js:4:15
   4|   bar: ?() => number,
                    ^^^^^^ [1]
   method_calls.js:9:17
   9| foo?.bar?.() as empty;
                      ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- method_calls.js:10:5

Cannot call `foo.bar` because property `bar` is missing in null or undefined [1]. [incompatible-use]

   method_calls.js:10:5
   10| foo.bar?.() as empty;
           ^^^

References:
   method_calls.js:7:18
    7| declare var foo: ?X;
                        ^^ [1]


Error --------------------------------------------------------------------------------------------- method_calls.js:10:1

Cannot cast `foo.bar?.()` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:10:1
   10| foo.bar?.() as empty;
       ^^^^^^^

References:
   method_calls.js:4:8
    4|   bar: ?() => number,
              ^^^^^^^^^^^^^ [1]
   method_calls.js:10:16
   10| foo.bar?.() as empty;
                      ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- method_calls.js:10:1

Cannot cast `foo.bar?.()` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:10:1
   10| foo.bar?.() as empty;
       ^^^^^^^^^^^

References:
   method_calls.js:4:15
    4|   bar: ?() => number,
                     ^^^^^^ [1]
   method_calls.js:10:16
   10| foo.bar?.() as empty;
                      ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- method_calls.js:11:6

Cannot call `foo?.bar` because null or undefined [1] is not a function. [not-a-function]

   method_calls.js:11:6
   11| foo?.bar() as empty;
            ^^^

References:
   method_calls.js:4:8
    4|   bar: ?() => number,
              ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- method_calls.js:11:1

Cannot cast `foo?.bar()` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:11:1
   11| foo?.bar() as empty;
       ^^^

References:
   method_calls.js:7:18
    7| declare var foo: ?X;
                        ^^ [1]
   method_calls.js:11:15
   11| foo?.bar() as empty;
                     ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- method_calls.js:11:1

Cannot cast `foo?.bar()` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:11:1
   11| foo?.bar() as empty;
       ^^^^^^^^^^

References:
   method_calls.js:4:15
    4|   bar: ?() => number,
                     ^^^^^^ [1]
   method_calls.js:11:15
   11| foo?.bar() as empty;
                     ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- method_calls.js:12:2

Cannot call `foo?.bar` because null or undefined [1] is not a function. [not-a-function]

   method_calls.js:12:2
   12| (foo?.bar)() as empty;
        ^^^^^^^^

References:
   method_calls.js:4:8
    4|   bar: ?() => number,
              ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- method_calls.js:12:2

Cannot call `foo?.bar` because null or undefined [1] is not a function. [not-a-function]

   method_calls.js:12:2
   12| (foo?.bar)() as empty;
        ^^^^^^^^

References:
   method_calls.js:7:18
    7| declare var foo: ?X;
                        ^^ [1]


Error --------------------------------------------------------------------------------------------- method_calls.js:12:1

Cannot cast `foo?.bar()` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:12:1
   12| (foo?.bar)() as empty;
       ^^^^^^^^^^^^

References:
   method_calls.js:4:15
    4|   bar: ?() => number,
                     ^^^^^^ [1]
   method_calls.js:12:17
   12| (foo?.bar)() as empty;
                       ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:19:16

Cannot assign `a.b?.()?.c?.d` to `y` because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:19:16
   19| var y: empty = a.b?.()?.c?.d;
                      ^^^

References:
   method_calls.js:15:6
   15|   b: ?() => ?{c: ?{d: number}},
            ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:19:8
   19| var y: empty = a.b?.()?.c?.d;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:19:16

Cannot assign `a.b?.()?.c?.d` to `y` because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:19:16
   19| var y: empty = a.b?.()?.c?.d;
                      ^^^^^^^

References:
   method_calls.js:15:13
   15|   b: ?() => ?{c: ?{d: number}},
                   ^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:19:8
   19| var y: empty = a.b?.()?.c?.d;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:19:16

Cannot assign `a.b?.()?.c?.d` to `y` because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:19:16
   19| var y: empty = a.b?.()?.c?.d;
                      ^^^^^^^^^^

References:
   method_calls.js:15:18
   15|   b: ?() => ?{c: ?{d: number}},
                        ^^^^^^^^^^^^ [1]
   method_calls.js:19:8
   19| var y: empty = a.b?.()?.c?.d;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:19:16

Cannot assign `a.b?.()?.c?.d` to `y` because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:19:16
   19| var y: empty = a.b?.()?.c?.d;
                      ^^^^^^^^^^^^^

References:
   method_calls.js:15:23
   15|   b: ?() => ?{c: ?{d: number}},
                             ^^^^^^ [1]
   method_calls.js:19:8
   19| var y: empty = a.b?.()?.c?.d;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:20:16

Cannot assign `a.c?.d?.e` to `x` because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:20:16
   20| var x: empty = a.c?.d?.e;
                      ^^^

References:
   method_calls.js:16:6
   16|   c: ?{d: ?{e: number}},
            ^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:20:8
   20| var x: empty = a.c?.d?.e;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:20:16

Cannot assign `a.c?.d?.e` to `x` because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:20:16
   20| var x: empty = a.c?.d?.e;
                      ^^^^^^

References:
   method_calls.js:16:11
   16|   c: ?{d: ?{e: number}},
                 ^^^^^^^^^^^^ [1]
   method_calls.js:20:8
   20| var x: empty = a.c?.d?.e;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:20:16

Cannot assign `a.c?.d?.e` to `x` because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:20:16
   20| var x: empty = a.c?.d?.e;
                      ^^^^^^^^^

References:
   method_calls.js:16:16
   16|   c: ?{d: ?{e: number}},
                      ^^^^^^ [1]
   method_calls.js:20:8
   20| var x: empty = a.c?.d?.e;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:21:16

Cannot assign `a.d?.e.f().g` to `w` because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:21:16
   21| var w: empty = a.d?.e.f().g;
                      ^^^

References:
   method_calls.js:17:6
   17|   d: ?{e: {f: () => {g: number}}},
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:21:8
   21| var w: empty = a.d?.e.f().g;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:21:16

Cannot assign `a.d?.e.f().g` to `w` because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:21:16
   21| var w: empty = a.d?.e.f().g;
                      ^^^^^^^^^^^^

References:
   method_calls.js:17:25
   17|   d: ?{e: {f: () => {g: number}}},
                               ^^^^^^ [1]
   method_calls.js:21:8
   21| var w: empty = a.d?.e.f().g;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:24:37

Cannot assign `b.onClick !== null ? b.onClick?.() : 42` to `f` because undefined [1] is incompatible with empty [2].
[incompatible-type]

   method_calls.js:24:37
   24| var f: empty = b.onClick !== null ? b.onClick?.() : 42;
                                           ^^^^^^^^^

References:
   method_calls.js:23:27
   23| declare var b: {onClick?: null | (() => number)};
                                 ^^^^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:24:8
   24| var f: empty = b.onClick !== null ? b.onClick?.() : 42;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:24:37

Cannot assign `b.onClick !== null ? b.onClick?.() : 42` to `f` because number [1] is incompatible with empty [2].
[incompatible-type]

   method_calls.js:24:37
   24| var f: empty = b.onClick !== null ? b.onClick?.() : 42;
                                           ^^^^^^^^^^^^^

References:
   method_calls.js:23:41
   23| declare var b: {onClick?: null | (() => number)};
                                               ^^^^^^ [1]
   method_calls.js:24:8
   24| var f: empty = b.onClick !== null ? b.onClick?.() : 42;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:24:53

Cannot assign `b.onClick !== null ? b.onClick?.() : 42` to `f` because number [1] is incompatible with empty [2].
[incompatible-type]

   method_calls.js:24:53
   24| var f: empty = b.onClick !== null ? b.onClick?.() : 42;
                                                           ^^ [1]

References:
   method_calls.js:24:8
   24| var f: empty = b.onClick !== null ? b.onClick?.() : 42;
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:27:16

Cannot assign `c?.[0]?.()?.[0]?.[0]` to `z` because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   method_calls.js:27:16
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
                      ^

References:
   method_calls.js:26:16
   26| declare var c: ?Array<?() => ?Array<?Array<number>>>;
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:27:8
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:27:16

Cannot assign `c?.[0]?.()?.[0]?.[0]` to `z` because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   method_calls.js:27:16
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
                      ^^^^^^^^^^

References:
   method_calls.js:26:30
   26| declare var c: ?Array<?() => ?Array<?Array<number>>>;
                                    ^^^^^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:27:8
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:27:16

Cannot assign `c?.[0]?.()?.[0]?.[0]` to `z` because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   method_calls.js:27:16
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
                      ^^^^^^^^^^^^^^^

References:
   method_calls.js:26:37
   26| declare var c: ?Array<?() => ?Array<?Array<number>>>;
                                           ^^^^^^^^^^^^^^ [1]
   method_calls.js:27:8
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:27:16

Cannot assign `c?.[0]?.()?.[0]?.[0]` to `z` because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   method_calls.js:27:16
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
                      ^^^^^^^^^^^^^^^^^^^^

References:
   method_calls.js:26:23
   26| declare var c: ?Array<?() => ?Array<?Array<number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   method_calls.js:27:8
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
              ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- method_calls.js:27:16

Cannot assign `c?.[0]?.()?.[0]?.[0]` to `z` because number [1] is incompatible with empty [2]. [incompatible-type]

   method_calls.js:27:16
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
                      ^^^^^^^^^^^^^^^^^^^^

References:
   method_calls.js:26:44
   26| declare var c: ?Array<?() => ?Array<?Array<number>>>;
                                                  ^^^^^^ [1]
   method_calls.js:27:8
   27| var z: empty = c?.[0]?.()?.[0]?.[0];
              ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- method_calls.js:47:3

This use of optional chaining (`?.`) is unnecessary because `cc` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   method_calls.js:47:3
   47|   cc?.c();
         ^^^^^

References:
   method_calls.js:47:3
   47|   cc?.c();
         ^^ [1]


Error ---------------------------------------------------------------------------------------- private_properties.js:6:5

Cannot cast `this?.#foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   private_properties.js:6:5
   6|     this?.#foo as empty;
          ^^^^^^^^^^

References:
   private_properties.js:4:9
   4|   #foo: number;
              ^^^^^^ [1]
   private_properties.js:6:19
   6|     this?.#foo as empty;
                        ^^^^^ [2]


Error ---------------------------------------------------------------------------------------- private_properties.js:6:5

This use of optional chaining (`?.`) is unnecessary because `this` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   private_properties.js:6:5
   6|     this?.#foo as empty;
          ^^^^^^^^^^

References:
   private_properties.js:6:5
   6|     this?.#foo as empty;
          ^^^^ [1]


Error --------------------------------------------------------------------------------------- private_properties.js:14:5

Cannot cast `this?.#bar` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   private_properties.js:14:5
   14|     this?.#bar as empty;
           ^^^^^^^^^^

References:
   private_properties.js:11:9
   11|   #bar: X;
               ^ [1]
   private_properties.js:14:19
   14|     this?.#bar as empty;
                         ^^^^^ [2]


Error --------------------------------------------------------------------------------------- private_properties.js:14:5

This use of optional chaining (`?.`) is unnecessary because `this` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   private_properties.js:14:5
   14|     this?.#bar as empty;
           ^^^^^^^^^^

References:
   private_properties.js:14:5
   14|     this?.#bar as empty;
           ^^^^ [1]


Error --------------------------------------------------------------------------------------- private_properties.js:15:5

Cannot cast `this?.#baz` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   private_properties.js:15:5
   15|     this?.#baz as empty;
           ^^^^^^^^^^

References:
   private_properties.js:12:9
   12|   #baz: ?X;
               ^^ [1]
   private_properties.js:15:19
   15|     this?.#baz as empty;
                         ^^^^^ [2]


Error --------------------------------------------------------------------------------------- private_properties.js:15:5

Cannot cast `this?.#baz` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   private_properties.js:15:5
   15|     this?.#baz as empty;
           ^^^^^^^^^^

References:
   private_properties.js:12:10
   12|   #baz: ?X;
                ^ [1]
   private_properties.js:15:19
   15|     this?.#baz as empty;
                         ^^^^^ [2]


Error --------------------------------------------------------------------------------------- private_properties.js:15:5

This use of optional chaining (`?.`) is unnecessary because `this` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   private_properties.js:15:5
   15|     this?.#baz as empty;
           ^^^^^^^^^^

References:
   private_properties.js:15:5
   15|     this?.#baz as empty;
           ^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:17:9

Cannot get `a.b.c.d` because property `d` is missing in undefined [1]. [incompatible-use]

   refinements.js:17:9
   17|   a.b.c.d; // bad
               ^

References:
   refinements.js:10:12
   10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
                  ^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:18:3

This use of optional chaining (`?.`) is unnecessary because `a` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:18:3
   18|   a?.b.c?.d as ?number; // ok, one unneeded optional chain
         ^^^^

References:
   refinements.js:18:3
   18|   a?.b.c?.d as ?number; // ok, one unneeded optional chain
         ^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:19:3

This use of optional chaining (`?.`) is unnecessary because `a` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:19:3
   19|   a?.b.e as number; // ok, one unneeded optional chain
         ^^^^

References:
   refinements.js:19:3
   19|   a?.b.e as number; // ok, one unneeded optional chain
         ^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:20:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:20:3
   20|   a.b?.e as number; // ok, one unneeded optional chain
         ^^^^^^

References:
   refinements.js:20:3
   20|   a.b?.e as number; // ok, one unneeded optional chain
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:24:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:24:3
   24|   a.b?.f() as ?number; // unneeded chain and bad
         ^^^^^^

References:
   refinements.js:24:3
   24|   a.b?.f() as ?number; // unneeded chain and bad
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:24:8

Cannot call `a.b?.f` because null or undefined [1] is not a function. [not-a-function]

   refinements.js:24:8
   24|   a.b?.f() as ?number; // unneeded chain and bad
              ^

References:
   refinements.js:10:39
   10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
                                             ^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:32:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:32:3
   32|   a.b?.f?.() as ?number; // ok, one unneeded optional chain
         ^^^^^^

References:
   refinements.js:32:3
   32|   a.b?.f?.() as ?number; // ok, one unneeded optional chain
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:40:3

This use of optional chaining (`?.`) is unnecessary because `a.b.g` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:40:3
   40|   a.b.g?.() as number; // ok, unneeded chain
         ^^^^^^^^^

References:
   refinements.js:40:3
   40|   a.b.g?.() as number; // ok, unneeded chain
         ^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:44:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:44:3
   44|   a.b?.g() as number; // ok, unneeded chain
         ^^^^^^

References:
   refinements.js:44:3
   44|   a.b?.g() as number; // ok, unneeded chain
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:48:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:48:3
   48|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^^^^

References:
   refinements.js:48:3
   48|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:48:3

This use of optional chaining (`?.`) is unnecessary because `a.b.g` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:48:3
   48|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^^^^^^^^

References:
   refinements.js:48:3
   48|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:50:3

Cannot cast `a` to object type because null or undefined [1] is incompatible with object type [2]. [incompatible-type]

   refinements.js:50:3
   50|   a as {}; // should fail, sanity check
         ^

References:
   refinements.js:9:16
                      v-
    9| declare var a: ?{
   10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
   11| };
       ^ [1]
   refinements.js:50:8
   50|   a as {}; // should fail, sanity check
              ^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:51:3

Cannot cast `a` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements.js:51:3
   51|   a as null | void; // should fail, sanity check
         ^

References:
   refinements.js:9:17
                       v
    9| declare var a: ?{
   10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
   11| };
       ^ [1]
   refinements.js:51:8
   51|   a as null | void; // should fail, sanity check
              ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:55:7

Cannot compare `x?.a` [1] to null [2], because [2] is null and `x?.a` [1] does not contain null. Perhaps you meant to
use `==`, which checks for both `undefined` and `null`? [invalid-compare]

   refinements.js:55:7
   55|   if (x?.a === null) { // constant-condition error
             ^^^^^^^^^^^^^

References:
   refinements.js:55:7
   55|   if (x?.a === null) { // constant-condition error
             ^^^^ [1]
   refinements.js:55:16
   55|   if (x?.a === null) { // constant-condition error
                      ^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:61:5

Cannot get `x.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements.js:61:5
   61|   x.a as empty; // should fail
           ^

References:
   refinements.js:54:23
   54| function f<T: any>(x: ?T) {
                             ^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:68:9

Cannot get `a.b.c.d` because property `d` is missing in undefined [1]. [incompatible-use]

   refinements.js:68:9
   68|   a.b.c.d; // bad
               ^

References:
   refinements.js:10:12
   10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
                  ^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:69:3

This use of optional chaining (`?.`) is unnecessary because `a` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:69:3
   69|   a?.b.c?.d as ?number; // ok, one unneeded optional chain
         ^^^^

References:
   refinements.js:69:3
   69|   a?.b.c?.d as ?number; // ok, one unneeded optional chain
         ^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:70:3

This use of optional chaining (`?.`) is unnecessary because `a` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:70:3
   70|   a?.b.e as number; // ok, one unneeded optional chain
         ^^^^

References:
   refinements.js:70:3
   70|   a?.b.e as number; // ok, one unneeded optional chain
         ^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:71:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:71:3
   71|   a.b?.e as number; // ok, one unneeded optional chain
         ^^^^^^

References:
   refinements.js:71:3
   71|   a.b?.e as number; // ok, one unneeded optional chain
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:75:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:75:3
   75|   a.b?.f() as ?number; // unneeded chain and bad
         ^^^^^^

References:
   refinements.js:75:3
   75|   a.b?.f() as ?number; // unneeded chain and bad
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:75:8

Cannot call `a.b?.f` because null or undefined [1] is not a function. [not-a-function]

   refinements.js:75:8
   75|   a.b?.f() as ?number; // unneeded chain and bad
              ^

References:
   refinements.js:10:39
   10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
                                             ^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:83:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:83:3
   83|   a.b?.f?.() as ?number; // ok, one unneeded optional chain
         ^^^^^^

References:
   refinements.js:83:3
   83|   a.b?.f?.() as ?number; // ok, one unneeded optional chain
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:91:3

This use of optional chaining (`?.`) is unnecessary because `a.b.g` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:91:3
   91|   a.b.g?.() as number; // ok, unneeded chain
         ^^^^^^^^^

References:
   refinements.js:91:3
   91|   a.b.g?.() as number; // ok, unneeded chain
         ^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:95:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:95:3
   95|   a.b?.g() as number; // ok, unneeded chain
         ^^^^^^

References:
   refinements.js:95:3
   95|   a.b?.g() as number; // ok, unneeded chain
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:99:3

This use of optional chaining (`?.`) is unnecessary because `a.b` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:99:3
   99|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^^^^

References:
   refinements.js:99:3
   99|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:99:3

This use of optional chaining (`?.`) is unnecessary because `a.b.g` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   refinements.js:99:3
   99|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^^^^^^^^

References:
   refinements.js:99:3
   99|   a.b?.g?.() as number; // ok, two unneeded chains
         ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:101:3

Cannot cast `a` to object type because null or undefined [1] is incompatible with object type [2]. [incompatible-type]

   refinements.js:101:3
   101|   a as {}; // should fail, sanity check
          ^

References:
   refinements.js:9:16
                       v-
     9| declare var a: ?{
    10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
    11| };
        ^ [1]
   refinements.js:101:8
   101|   a as {}; // should fail, sanity check
               ^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:102:3

Cannot cast `a` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements.js:102:3
   102|   a as null | void; // should fail, sanity check
          ^

References:
   refinements.js:9:17
                        v
     9| declare var a: ?{
    10|   b?: {c?: {d: number}, e: number, f: ?() => number, g: ?() => number},
    11| };
        ^ [1]
   refinements.js:102:8
   102|   a as null | void; // should fail, sanity check
               ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:110:3

Cannot cast `b.x` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-type]

   refinements.js:110:3
   110|   b.x as false; // nope
          ^^^

References:
   refinements.js:105:21
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                            ^^^^^^^ [1]
   refinements.js:110:10
   110|   b.x as false; // nope
                 ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:110:5

Cannot get `b.x` because property `x` is missing in null or undefined [1]. [incompatible-use]

   refinements.js:110:5
   110|   b.x as false; // nope
            ^

References:
   refinements.js:105:16
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- refinements.js:113:10

Cannot get `b?.w.u` because property `u` is missing in undefined [1]. [incompatible-use]

   refinements.js:113:10
   113| if (b?.w.u) {
                 ^

References:
   refinements.js:105:53
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                                                            ^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- refinements.js:119:14

Cannot get `b.w.u` because property `u` is missing in undefined [1]. [incompatible-use]

   refinements.js:119:14
   119| if (b && b.w.u) {
                     ^

References:
   refinements.js:105:53
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                                                            ^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:127:5

Cannot get `b.z` because property `z` is missing in null or undefined [1]. [incompatible-use]

   refinements.js:127:5
   127|   b.z.value as string; // error
            ^

References:
   refinements.js:105:16
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:127:3

Cannot cast `b.z.value` to string because number [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:127:3
   127|   b.z.value as string; // error
          ^^^^^^^^^

References:
   refinements.js:104:32
   104| type Z = {|a: 'hello ', value: number|} | {|b: 'goodbye', value: string|};
                                       ^^^^^^ [1]
   refinements.js:127:16
   127|   b.z.value as string; // error
                       ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:130:5

Sketchy null check on boolean [1] which is potentially false. Perhaps you meant to check for null or undefined [1]?
[sketchy-null-bool]

   refinements.js:130:5
   130| if (b?.y) {
            ^^^^

References:
   refinements.js:105:34
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                                         ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:134:3

Cannot cast `b.y` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-type]

   refinements.js:134:3
   134|   b.y as false; // nope
          ^^^

References:
   refinements.js:105:34
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                                         ^^^^^^^ [1]
   refinements.js:134:10
   134|   b.y as false; // nope
                 ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:134:3

Cannot cast `b.y` to boolean literal `false` because undefined [1] is incompatible with boolean literal `false` [2].
[incompatible-type]

   refinements.js:134:3
   134|   b.y as false; // nope
          ^^^

References:
   refinements.js:105:34
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                                         ^^^^^^^ [1]
   refinements.js:134:10
   134|   b.y as false; // nope
                 ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:134:5

Cannot get `b.y` because property `y` is missing in null or undefined [1]. [incompatible-use]

   refinements.js:134:5
   134|   b.y as false; // nope
            ^

References:
   refinements.js:105:16
   105| declare var b: ?{x: boolean, y?: boolean, z: Z, w?: {u: () => number}};
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:141:8

Cannot get `c[1][0]` because null or undefined [1] does not have properties. [incompatible-use]

   refinements.js:141:8
   141|   c[1][0] as {}; // no
               ^

References:
   refinements.js:137:22
   137| declare var c: Array<?Array<{a: number, b: {c: {d: string}}}>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:147:5

Cannot call `d.a` because undefined [1] is not a function. [not-a-function]

   refinements.js:147:5
   147|   d.a().b.c as number; // nope, never was a refinement in the first place
            ^

References:
   refinements.js:145:22
   145| declare var d: ?{a?: () => {b?: {c: number}}, d: number};
                             ^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:147:5

Cannot call `d.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements.js:147:5
   147|   d.a().b.c as number; // nope, never was a refinement in the first place
            ^

References:
   refinements.js:145:16
   145| declare var d: ?{a?: () => {b?: {c: number}}, d: number};
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- refinements.js:147:11

Cannot get `d.a().b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   refinements.js:147:11
   147|   d.a().b.c as number; // nope, never was a refinement in the first place
                  ^

References:
   refinements.js:145:33
   145| declare var d: ?{a?: () => {b?: {c: number}}, d: number};
                                        ^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- refinements.js:153:18

Sketchy null check on string [1] which is potentially an empty string. Perhaps you meant to check for null or
undefined [2]? [sketchy-null-string]

   refinements.js:153:18
   153| var x11: empty = a11?.a || b11?.a;
                         ^^^^^^ [2]

References:
   refinements.js:150:24
   150| declare var a11: ?({a: string} | {});
                               ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- refinements.js:153:18

Sketchy null check on mixed [1] which is potentially false. Perhaps you meant to check for null or undefined [1]?
[sketchy-null-mixed]

   153| var x11: empty = a11?.a || b11?.a;
                         ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- refinements.js:153:18

Cannot assign `a11?.a || b11?.a` to `x11` because string [1] is incompatible with empty [2]. [incompatible-type]

   refinements.js:153:18
   153| var x11: empty = a11?.a || b11?.a;
                         ^^^^^^

References:
   refinements.js:150:24
   150| declare var a11: ?({a: string} | {});
                               ^^^^^^ [1]
   refinements.js:153:10
   153| var x11: empty = a11?.a || b11?.a;
                 ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- refinements.js:153:18

Cannot assign `a11?.a || b11?.a` to `x11` because property `a` of unknown type [1] is incompatible with empty [2].
[incompatible-type]

   refinements.js:153:18
   153| var x11: empty = a11?.a || b11?.a;
                         ^^^^^^ [1]

References:
   refinements.js:153:10
   153| var x11: empty = a11?.a || b11?.a;
                 ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- refinements.js:153:28

Cannot assign `a11?.a || b11?.a` to `x11` because null or undefined [1] is incompatible with empty [2].
[incompatible-type]

   refinements.js:153:28
   153| var x11: empty = a11?.a || b11?.a;
                                   ^^^

References:
   refinements.js:151:18
   151| declare var b11: ?{};
                         ^^^ [1]
   refinements.js:153:10
   153| var x11: empty = a11?.a || b11?.a;
                 ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- refinements.js:153:33

Cannot get `b11?.a` because property `a` is missing in object type [1]. [prop-missing]

   refinements.js:153:33
   153| var x11: empty = a11?.a || b11?.a;
                                        ^

References:
   refinements.js:151:19
   151| declare var b11: ?{};
                          ^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements2.js:9:3

Cannot cast `t` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:9:3
   9|   t as null | void; // no
        ^

References:
   refinements2.js:4:17
   4| declare var t: ?T;
                      ^ [1]
   refinements2.js:9:8
   9|   t as null | void; // no
             ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:10:3

Cannot cast `t.a` to number because null [1] is incompatible with number [2]. [incompatible-type]

   refinements2.js:10:3
   10|   t.a as number; // no for two reasons
         ^^^

References:
   refinements2.js:3:14
    3| type T = {a: null | number};
                    ^^^^ [1]
   refinements2.js:10:10
   10|   t.a as number; // no for two reasons
                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:10:5

Cannot get `t.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:10:5
   10|   t.a as number; // no for two reasons
           ^

References:
   refinements2.js:4:16
    4| declare var t: ?T;
                      ^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:13:3

Cannot cast `t` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:13:3
   13|   t as null | void; // no
         ^

References:
   refinements2.js:4:17
    4| declare var t: ?T;
                       ^ [1]
   refinements2.js:13:8
   13|   t as null | void; // no
              ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:14:3

Cannot cast `t.a` to number because null [1] is incompatible with number [2]. [incompatible-type]

   refinements2.js:14:3
   14|   t.a as number; // no for two reasons
         ^^^

References:
   refinements2.js:3:14
    3| type T = {a: null | number};
                    ^^^^ [1]
   refinements2.js:14:10
   14|   t.a as number; // no for two reasons
                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:14:5

Cannot get `t.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:14:5
   14|   t.a as number; // no for two reasons
           ^

References:
   refinements2.js:4:16
    4| declare var t: ?T;
                      ^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:23:3

Cannot cast `s` to `S` because null or undefined [1] is incompatible with `S` [2]. [incompatible-type]

   refinements2.js:23:3
   23|   s as S; // no, may be nulled
         ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]
   refinements2.js:23:8
   23|   s as S; // no, may be nulled
              ^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:24:3

Cannot cast `s.a` to union type because number [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:24:3
   24|   s.a as null | void; // no for two reasons
         ^^^

References:
   refinements2.js:20:15
   20| type S = {a: ?number};
                     ^^^^^^ [1]
   refinements2.js:24:10
   24|   s.a as null | void; // no for two reasons
                ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:24:5

Cannot get `s.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:24:5
   24|   s.a as null | void; // no for two reasons
           ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:33:3

Cannot cast `s` to `S` because null or undefined [1] is incompatible with `S` [2]. [incompatible-type]

   refinements2.js:33:3
   33|   s as S; // no, may be nulled
         ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]
   refinements2.js:33:8
   33|   s as S; // no, may be nulled
              ^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:34:3

Cannot cast `s.a` to union type because number [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:34:3
   34|   s.a as null | void; // no for two reasons
         ^^^

References:
   refinements2.js:20:15
   20| type S = {a: ?number};
                     ^^^^^^ [1]
   refinements2.js:34:10
   34|   s.a as null | void; // no for two reasons
                ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:34:5

Cannot get `s.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:34:5
   34|   s.a as null | void; // no for two reasons
           ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:37:3

Cannot cast `s` to `S` because null or undefined [1] is incompatible with `S` [2]. [incompatible-type]

   refinements2.js:37:3
   37|   s as S; // no, may be nulled
         ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]
   refinements2.js:37:8
   37|   s as S; // no, may be nulled
              ^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:38:3

Cannot cast `s.a` to union type because number [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:38:3
   38|   s.a as null | void; // no for two reasons
         ^^^

References:
   refinements2.js:20:15
   20| type S = {a: ?number};
                     ^^^^^^ [1]
   refinements2.js:38:10
   38|   s.a as null | void; // no for two reasons
                ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:38:5

Cannot get `s.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:38:5
   38|   s.a as null | void; // no for two reasons
           ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:41:3

Cannot cast `s.a` to number because null or undefined [1] is incompatible with number [2]. [incompatible-type]

   refinements2.js:41:3
   41|   s.a as number; // no: s.a can be null
         ^^^

References:
   refinements2.js:20:14
   20| type S = {a: ?number};
                    ^^^^^^^ [1]
   refinements2.js:41:10
   41|   s.a as number; // no: s.a can be null
                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:45:3

Cannot cast `s` to `S` because null or undefined [1] is incompatible with `S` [2]. [incompatible-type]

   refinements2.js:45:3
   45|   s as S; // no, may be nulled
         ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]
   refinements2.js:45:8
   45|   s as S; // no, may be nulled
              ^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:46:3

Cannot cast `s.a` to union type because number [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:46:3
   46|   s.a as null | void; // no for two reasons
         ^^^

References:
   refinements2.js:20:15
   20| type S = {a: ?number};
                     ^^^^^^ [1]
   refinements2.js:46:10
   46|   s.a as null | void; // no for two reasons
                ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:46:5

Cannot get `s.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:46:5
   46|   s.a as null | void; // no for two reasons
           ^

References:
   refinements2.js:21:16
   21| declare var s: ?S;
                      ^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:59:3

Cannot cast `w` to `W` because null or undefined [1] is incompatible with `W` [2]. [incompatible-type]

   refinements2.js:59:3
   59|   w as W; // no
         ^

References:
   refinements2.js:53:16
   53| declare var w: ?W;
                      ^^ [1]
   refinements2.js:59:8
   59|   w as W; // no
              ^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:60:5

Cannot get `w.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:60:5
   60|   w.a; // no
           ^

References:
   refinements2.js:53:16
   53| declare var w: ?W;
                      ^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:68:5

Cannot get `a.b` because property `b` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:68:5
   68|   a.b; // nope
           ^

References:
   refinements2.js:63:16
   63| declare var a: ?{b: number | string};
                      ^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:69:3

Cannot cast `a` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:69:3
   69|   a as null | void; // nope
         ^

References:
   refinements2.js:63:17
   63| declare var a: ?{b: number | string};
                       ^^^^^^^^^^^^^^^^^^^^ [1]
   refinements2.js:69:8
   69|   a as null | void; // nope
              ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:74:5

Cannot get `b.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:74:5
   74|   b.a; //nope
           ^

References:
   refinements2.js:72:16
   72| declare var b: ?{a?: number};
                      ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:75:3

Cannot cast `b` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:75:3
   75|   b as null | void; // nope
         ^

References:
   refinements2.js:72:17
   72| declare var b: ?{a?: number};
                       ^^^^^^^^^^^^ [1]
   refinements2.js:75:8
   75|   b as null | void; // nope
              ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:85:5

Cannot get `b.a` because property `a` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:85:5
   85|   b.a; // nope
           ^

References:
   refinements2.js:72:16
   72| declare var b: ?{a?: number};
                      ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:86:3

Cannot cast `b` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:86:3
   86|   b as null | void; // nope
         ^

References:
   refinements2.js:72:17
   72| declare var b: ?{a?: number};
                       ^^^^^^^^^^^^ [1]
   refinements2.js:86:8
   86|   b as null | void; // nope
              ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements2.js:94:5

Cannot get `c.d` because property `d` is missing in null or undefined [1]. [incompatible-use]

   refinements2.js:94:5
   94|   c.d; //nope
           ^

References:
   refinements2.js:89:16
   89| declare var c: ?{d?: Array<number>};
                      ^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements2.js:95:3

Cannot cast `c` to union type because object type [1] is incompatible with union type [2]. [incompatible-type]

   refinements2.js:95:3
   95|   c as null | void; //nope
         ^

References:
   refinements2.js:89:17
   89| declare var c: ?{d?: Array<number>};
                       ^^^^^^^^^^^^^^^^^^^ [1]
   refinements2.js:95:8
   95|   c as null | void; //nope
              ^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- refinements2.js:102:3

Cannot cast `b1.a` to number because undefined [1] is incompatible with number [2]. [incompatible-type]

   refinements2.js:102:3
   102|   b1.a as number; // b1.a may not exist and may not be number
          ^^^^

References:
   refinements2.js:99:23
    99| declare var b1: ?{a?: number};
                              ^^^^^^ [1]
   refinements2.js:102:11
   102|   b1.a as number; // b1.a may not exist and may not be number
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:12:1

Cannot cast `x1?.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:12:1
   12| x1?.foo as empty;
       ^^

References:
   static_members.js:6:17
    6| declare var x1: ?X;
                       ^^ [1]
   static_members.js:12:12
   12| x1?.foo as empty;
                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:12:1

Cannot cast `x1?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:12:1
   12| x1?.foo as empty;
       ^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:12:12
   12| x1?.foo as empty;
                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:13:1

Cannot cast `x2?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:13:1
   13| x2?.foo as empty;
       ^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:13:12
   13| x2?.foo as empty;
                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:13:1

This use of optional chaining (`?.`) is unnecessary because `x2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:13:1
   13| x2?.foo as empty;
       ^^^^^^^

References:
   static_members.js:13:1
   13| x2?.foo as empty;
       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:15:1

Cannot cast `y1?.bar?.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:15:1
   15| y1?.bar?.foo as empty;
       ^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   static_members.js:15:17
   15| y1?.bar?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:15:1

Cannot cast `y1?.bar?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:15:1
   15| y1?.bar?.foo as empty;
       ^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:15:17
   15| y1?.bar?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:15:1

This use of optional chaining (`?.`) is unnecessary because `y1?.bar` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:15:1
   15| y1?.bar?.foo as empty;
       ^^^^^^^^^^^^

References:
   static_members.js:15:1
   15| y1?.bar?.foo as empty;
       ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:16:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:16:1
   16| y2?.bar?.foo as empty;
       ^^^^^^^

References:
   static_members.js:16:1
   16| y2?.bar?.foo as empty;
       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:16:1

Cannot cast `y2?.bar?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:16:1
   16| y2?.bar?.foo as empty;
       ^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:16:17
   16| y2?.bar?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:16:1

This use of optional chaining (`?.`) is unnecessary because `y2?.bar` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:16:1
   16| y2?.bar?.foo as empty;
       ^^^^^^^^^^^^

References:
   static_members.js:16:1
   16| y2?.bar?.foo as empty;
       ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:17:1

Cannot cast `y1?.baz?.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:17:1
   17| y1?.baz?.foo as empty;
       ^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   static_members.js:17:17
   17| y1?.baz?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:17:1

Cannot cast `y1?.baz?.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:17:1
   17| y1?.baz?.foo as empty;
       ^^^^^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   static_members.js:17:17
   17| y1?.baz?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:17:1

Cannot cast `y1?.baz?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:17:1
   17| y1?.baz?.foo as empty;
       ^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:17:17
   17| y1?.baz?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:18:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:18:1
   18| y2?.baz?.foo as empty;
       ^^^^^^^

References:
   static_members.js:18:1
   18| y2?.baz?.foo as empty;
       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:18:1

Cannot cast `y2?.baz?.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:18:1
   18| y2?.baz?.foo as empty;
       ^^^^^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   static_members.js:18:17
   18| y2?.baz?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:18:1

Cannot cast `y2?.baz?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:18:1
   18| y2?.baz?.foo as empty;
       ^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:18:17
   18| y2?.baz?.foo as empty;
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:20:1

Cannot cast `y1?.bar.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:20:1
   20| y1?.bar.foo as empty;
       ^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   static_members.js:20:16
   20| y1?.bar.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:20:1

Cannot cast `y1?.bar.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:20:1
   20| y1?.bar.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:20:16
   20| y1?.bar.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:21:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:21:1
   21| y2?.bar.foo as empty;
       ^^^^^^^

References:
   static_members.js:21:1
   21| y2?.bar.foo as empty;
       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:21:1

Cannot cast `y2?.bar.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:21:1
   21| y2?.bar.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:21:16
   21| y2?.bar.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:22:1

Cannot cast `y1?.baz.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:22:1
   22| y1?.baz.foo as empty;
       ^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]
   static_members.js:22:16
   22| y1?.baz.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:22:1

Cannot cast `y1?.baz.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:22:1
   22| y1?.baz.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:22:16
   22| y1?.baz.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:22:9

Cannot get `y1?.baz.foo` because property `foo` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:22:9
   22| y1?.baz.foo as empty;
               ^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:23:1

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:23:1
   23| y2?.baz.foo as empty;
       ^^^^^^^

References:
   static_members.js:23:1
   23| y2?.baz.foo as empty;
       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:23:1

Cannot cast `y2?.baz.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:23:1
   23| y2?.baz.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:23:16
   23| y2?.baz.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:23:9

Cannot get `y2?.baz.foo` because property `foo` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:23:9
   23| y2?.baz.foo as empty;
               ^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:25:4

Cannot get `y1.bar` because property `bar` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:25:4
   25| y1.bar?.foo as empty;
          ^^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:25:1

Cannot cast `y1.bar?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:25:1
   25| y1.bar?.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:25:16
   25| y1.bar?.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:25:1

This use of optional chaining (`?.`) is unnecessary because `y1.bar` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:25:1
   25| y1.bar?.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:25:1
   25| y1.bar?.foo as empty;
       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:26:1

Cannot cast `y2.bar?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:26:1
   26| y2.bar?.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:26:16
   26| y2.bar?.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:26:1

This use of optional chaining (`?.`) is unnecessary because `y2.bar` [1] cannot be nullish or because an earlier `?.`
will short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:26:1
   26| y2.bar?.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:26:1
   26| y2.bar?.foo as empty;
       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:27:4

Cannot get `y1.baz` because property `baz` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:27:4
   27| y1.baz?.foo as empty;
          ^^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:27:1

Cannot cast `y1.baz?.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:27:1
   27| y1.baz?.foo as empty;
       ^^^^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   static_members.js:27:16
   27| y1.baz?.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:27:1

Cannot cast `y1.baz?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:27:1
   27| y1.baz?.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:27:16
   27| y1.baz?.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:28:1

Cannot cast `y2.baz?.foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:28:1
   28| y2.baz?.foo as empty;
       ^^^^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]
   static_members.js:28:16
   28| y2.baz?.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:28:1

Cannot cast `y2.baz?.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:28:1
   28| y2.baz?.foo as empty;
       ^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:28:16
   28| y2.baz?.foo as empty;
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:30:1

Cannot cast `y1?.bar.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:30:1
   30| (y1?.bar).foo as empty;
       ^^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:30:18
   30| (y1?.bar).foo as empty;
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------------------ static_members.js:30:11

Cannot get `y1?.bar.foo` because property `foo` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:30:11
   30| (y1?.bar).foo as empty;
                 ^^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:31:1

Cannot cast `y2?.bar.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:31:1
   31| (y2?.bar).foo as empty;
       ^^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:31:18
   31| (y2?.bar).foo as empty;
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- static_members.js:31:2

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:31:2
   31| (y2?.bar).foo as empty;
        ^^^^^^^

References:
   static_members.js:31:2
   31| (y2?.bar).foo as empty;
        ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:32:1

Cannot cast `y1?.baz.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:32:1
   32| (y1?.baz).foo as empty;
       ^^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:32:18
   32| (y1?.baz).foo as empty;
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------------------ static_members.js:32:11

Cannot get `y1?.baz.foo` because property `foo` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:32:11
   32| (y1?.baz).foo as empty;
                 ^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error ------------------------------------------------------------------------------------------ static_members.js:32:11

Cannot get `y1?.baz.foo` because property `foo` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:32:11
   32| (y1?.baz).foo as empty;
                 ^^^

References:
   static_members.js:9:17
    9| declare var y1: ?Y;
                       ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:33:1

Cannot cast `y2?.baz.foo` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   static_members.js:33:1
   33| (y2?.baz).foo as empty;
       ^^^^^^^^^^^^^

References:
   static_members.js:3:16
    3| type X = {foo: number};
                      ^^^^^^ [1]
   static_members.js:33:18
   33| (y2?.baz).foo as empty;
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------------------ static_members.js:33:11

Cannot get `y2?.baz.foo` because property `foo` is missing in null or undefined [1]. [incompatible-use]

   static_members.js:33:11
   33| (y2?.baz).foo as empty;
                 ^^^

References:
   static_members.js:4:24
    4| type Y = {bar: X, baz: ?X};
                              ^^ [1]


Error ------------------------------------------------------------------------------------------- static_members.js:33:2

This use of optional chaining (`?.`) is unnecessary because `y2` [1] cannot be nullish or because an earlier `?.` will
short-circuit the nullish case. [unnecessary-optional-chain]

   static_members.js:33:2
   33| (y2?.baz).foo as empty;
        ^^^^^^^

References:
   static_members.js:33:2
   33| (y2?.baz).foo as empty;
        ^^ [1]


Error ------------------------------------------------------------------------------------------ static_members.js:36:26

Cannot assign `a?.a` to `b` because: [incompatible-type]
 - Either undefined (result of null short-circuiting an optional chain) [1] is incompatible with null [2].
 - Or undefined (result of null short-circuiting an optional chain) [1] is incompatible with string [3].

   static_members.js:36:26
   36| const b: string | null = a?.a;
                                ^

References:
   static_members.js:35:16
   35| const a: any | null = 1337;
                      ^^^^ [1]
   static_members.js:36:19
   36| const b: string | null = a?.a;
                         ^^^^ [2]
   static_members.js:36:10
   36| const b: string | null = a?.a;
                ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------ static_members.js:38:26

Cannot assign `c?.c` to `d` because: [incompatible-type]
 - Either null or undefined [1] is incompatible with null [2].
 - Or null or undefined [1] is incompatible with string [3].

   static_members.js:38:26
   38| const d: string | null = c?.c;
                                ^

References:
   static_members.js:37:10
   37| const c: ?any = 1337;
                ^^^^ [1]
   static_members.js:38:19
   38| const d: string | null = c?.c;
                         ^^^^ [2]
   static_members.js:38:10
   38| const d: string | null = c?.c;
                ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ super_call.js:4:6

Cannot cast `super()?.a` to empty because undefined [1] is incompatible with empty [2]. [incompatible-type]

   super_call.js:4:6
   4|     (super()?.a: empty); // error
           ^^^^^^^

References:
   super_call.js:1:7
   1| class A {}
            ^ [1]
   super_call.js:4:18
   4|     (super()?.a: empty); // error
                       ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- typeof.js:6:23

Cannot access number literal `0` on `typeof y` because undefined [1] does not have properties. [incompatible-use]

   typeof.js:6:23
   6|   type T = (typeof y)[0]; // error: undefined does not have properties
                            ^

References:
   typeof.js:6:13
   6|   type T = (typeof y)[0]; // error: undefined does not have properties
                  ^^^^^^^^ [1]



Found 232 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
