Error ---------------------------------------------------------------------------------------------- annotations.js:10:3

Cannot cast `o[1]` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   annotations.js:10:3
   10|   o[1] as empty; // ERROR
         ^^^^

References:
   annotations.js:2:6
    2|   1: string,
            ^^^^^^ [1]
   annotations.js:10:11
   10|   o[1] as empty; // ERROR
                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- annotations.js:11:3

Cannot cast `o['1']` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   annotations.js:11:3
   11|   o['1'] as empty; // ERROR
         ^^^^^^

References:
   annotations.js:2:6
    2|   1: string,
            ^^^^^^ [1]
   annotations.js:11:13
   11|   o['1'] as empty; // ERROR
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- annotations.js:16:4

Cannot mix number literal keys and variance annotations, as the variance annotation could be interpreted as negating or
making positive the number literal. Consider using a string literal key name to disambiguate. [illegal-key]

   16|   -1: string, // ERROR
          ^


Error ---------------------------------------------------------------------------------------------- annotations.js:17:4

Cannot mix number literal keys and variance annotations, as the variance annotation could be interpreted as negating or
making positive the number literal. Consider using a string literal key name to disambiguate. [illegal-key]

   17|   +2: boolean, // ERROR
          ^


Error ---------------------------------------------------------------------------------------------- annotations.js:30:3

Unsupported key in object type. Only integer-like number literals are allowed. [illegal-key]

   30|   1.1: true, // ERROR
         ^^^


Error ---------------------------------------------------------------------------------------------- annotations.js:31:3

Unsupported key in object type. Number literals must not be larger than `Number.MAX_SAFE_INTEGER`. [illegal-key]

   31|   9007199254740992: false, // ERROR
         ^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- non_literal_number.js:5:5

Cannot access object with computed property using number [1]. [invalid-computed-prop]

   non_literal_number.js:5:5
   5|   o[n]; // ERROR
          ^

References:
   non_literal_number.js:4:20
   4|   declare const n: number;
                         ^^^^^^ [1]


Error --------------------------------------------------------------------------------------- non_literal_number.js:22:3

Cannot cast `o2` to object type because boolean [1] is incompatible with boolean literal `true` [2] in the indexer
property. [incompatible-cast]

   non_literal_number.js:22:3
   22|   o2 as {[number]: true}; // OK
         ^^

References:
   non_literal_number.js:19:32
   19|   declare const o1: {[number]: boolean};
                                      ^^^^^^^ [1]
   non_literal_number.js:22:20
   22|   o2 as {[number]: true}; // OK
                          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:8:3

Cannot cast `o` to object type because property `1` is missing in object type [1] but exists in object literal [2]. Any
property that does not exist in object type [1] must be compatible with its indexer symbol [3]. [incompatible-type]

   test.js:8:3
   8|   o as {[symbol]: boolean}; // ERROR
        ^

References:
   test.js:8:8
   8|   o as {[symbol]: boolean}; // ERROR
             ^^^^^^^^^^^^^^^^^^^ [1]
   test.js:2:13
                  v
   2|   const o = {
   3|     '1': true,
   4|     '2': false,
   5|   };
        ^ [2]
   test.js:8:10
   8|   o as {[symbol]: boolean}; // ERROR
               ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------------ test.js:8:3

Cannot cast `o` to object type because property `2` is missing in object type [1] but exists in object literal [2]. Any
property that does not exist in object type [1] must be compatible with its indexer symbol [3]. [incompatible-type]

   test.js:8:3
   8|   o as {[symbol]: boolean}; // ERROR
        ^

References:
   test.js:8:8
   8|   o as {[symbol]: boolean}; // ERROR
             ^^^^^^^^^^^^^^^^^^^ [1]
   test.js:2:13
                  v
   2|   const o = {
   3|     '1': true,
   4|     '2': false,
   5|   };
        ^ [2]
   test.js:8:10
   8|   o as {[symbol]: boolean}; // ERROR
               ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:16:3

Cannot cast `o` to object type because property `2` is missing in object type [1] but exists in object literal [2]. Any
property that does not exist in object type [1] must be compatible with its indexer number literal `1` [3].
[incompatible-type]

   test.js:16:3
   16|   o as {[1]: boolean}; // ERROR
         ^

References:
   test.js:16:8
   16|   o as {[1]: boolean}; // ERROR
              ^^^^^^^^^^^^^^ [1]
   test.js:2:13
                   v
    2|   const o = {
    3|     '1': true,
    4|     '2': false,
    5|   };
         ^ [2]
   test.js:16:10
   16|   o as {[1]: boolean}; // ERROR
                ^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:17:3

Cannot cast `o` to object type because property `2` is missing in object type [1] but exists in object literal [2]. Any
property that does not exist in object type [1] must be compatible with its indexer string literal `1` [3].
[incompatible-type]

   test.js:17:3
   17|   o as {['1']: boolean}; // ERROR
         ^

References:
   test.js:17:8
   17|   o as {['1']: boolean}; // ERROR
              ^^^^^^^^^^^^^^^^ [1]
   test.js:2:13
                   v
    2|   const o = {
    3|     '1': true,
    4|     '2': false,
    5|   };
         ^ [2]
   test.js:17:10
   17|   o as {['1']: boolean}; // ERROR
                ^^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:20:3

Cannot cast `o` to object type because boolean [1] is incompatible with boolean literal `true` [2] in property `1`.
[incompatible-cast]

   test.js:20:3
   20|   o as {'1': true, [number]: false}; // OK
         ^

References:
   test.js:3:10
    3|     '1': true,
                ^^^^ [1]
   test.js:20:14
   20|   o as {'1': true, [number]: false}; // OK
                    ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:20:3

Cannot cast `o` to object type because boolean [1] is incompatible with boolean literal `false` [2] in property `2`.
[incompatible-cast]

   test.js:20:3
   20|   o as {'1': true, [number]: false}; // OK
         ^

References:
   test.js:4:10
    4|     '2': false,
                ^^^^^ [1]
   test.js:20:30
   20|   o as {'1': true, [number]: false}; // OK
                                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:21:3

Cannot cast `o` to object type because boolean [1] is incompatible with boolean literal `true` [2] in property `1`.
[incompatible-cast]

   test.js:21:3
   21|   o as {'1': true, [number]: true}; // ERROR
         ^

References:
   test.js:3:10
    3|     '1': true,
                ^^^^ [1]
   test.js:21:14
   21|   o as {'1': true, [number]: true}; // ERROR
                    ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:21:3

Cannot cast `o` to object type because boolean [1] is incompatible with boolean literal `true` [2] in property `2`.
[incompatible-cast]

   test.js:21:3
   21|   o as {'1': true, [number]: true}; // ERROR
         ^

References:
   test.js:4:10
    4|     '2': false,
                ^^^^^ [1]
   test.js:21:30
   21|   o as {'1': true, [number]: true}; // ERROR
                                    ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:25:3

Cannot cast `'3'` to key set because property `3` is missing in object literal [1]. [prop-missing]

   test.js:25:3
   25|   '3' as $Keys<typeof o>; // ERROR
         ^^^

References:
   test.js:25:16
   25|   '3' as $Keys<typeof o>; // ERROR
                      ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:26:30

Cannot assign `1` to `x` because number [1] is incompatible with key set [2]. [incompatible-type]

   test.js:26:30
   26|   const x: $Keys<typeof o> = 1; // ERROR
                                    ^ [1]

References:
   test.js:26:12
   26|   const x: $Keys<typeof o> = 1; // ERROR
                  ^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:28:3

Cannot cast `Object.keys(...)` to array type because string literal `1` [1] is incompatible with number [2] in array
element. [incompatible-cast]

   test.js:28:3
   28|   Object.keys(o) as Array<number>; // ERROR
         ^^^^^^^^^^^^^^ [1]

References:
   test.js:28:27
   28|   Object.keys(o) as Array<number>; // ERROR
                                 ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:28:3

Cannot cast `Object.keys(...)` to array type because string literal `2` [1] is incompatible with number [2] in array
element. [incompatible-cast]

   test.js:28:3
   28|   Object.keys(o) as Array<number>; // ERROR
         ^^^^^^^^^^^^^^ [1]

References:
   test.js:28:27
   28|   Object.keys(o) as Array<number>; // ERROR
                                 ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:28:3

Cannot cast `Object.keys(...)` to array type because number [1] is incompatible with element of `Object.keys` [2] in
array element. 

Arrays are invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[incompatible-cast]

   test.js:28:3
   28|   Object.keys(o) as Array<number>; // ERROR
         ^^^^^^^^^^^^^^ [2]

References:
   test.js:28:27
   28|   Object.keys(o) as Array<number>; // ERROR
                                 ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:42:5

Cannot cast `x` to number because string `1` [1] is incompatible with number [2]. [incompatible-cast]

   test.js:42:5
   42|     x as number; // ERROR
           ^

References:
   test.js:32:13
                   v
   32|   const o = {
   33|     '1': true,
   34|     '2': false,
   35|   };
         ^ [1]
   test.js:42:10
   42|     x as number; // ERROR
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:42:5

Cannot cast `x` to number because string `2` [1] is incompatible with number [2]. [incompatible-cast]

   test.js:42:5
   42|     x as number; // ERROR
           ^

References:
   test.js:32:13
                   v
   32|   const o = {
   33|     '1': true,
   34|     '2': false,
   35|   };
         ^ [1]
   test.js:42:10
   42|     x as number; // ERROR
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:47:17

Cannot call `f` because string `1` [1] is incompatible with number [2] in type argument `Key`. [incompatible-call]

   test.js:47:17
   47|     const x = f(o); // ERROR
                       ^

References:
   test.js:32:13
                   v
   32|   const o = {
   33|     '1': true,
   34|     '2': false,
   35|   };
         ^ [1]
   test.js:46:28
   46|     declare const f: <Key: number, Value>(o: {[Key]: Value}) => Key;
                                  ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:47:17

Cannot call `f` because string `2` [1] is incompatible with number [2] in type argument `Key`. [incompatible-call]

   test.js:47:17
   47|     const x = f(o); // ERROR
                       ^

References:
   test.js:32:13
                   v
   32|   const o = {
   33|     '1': true,
   34|     '2': false,
   35|   };
         ^ [1]
   test.js:46:28
   46|     declare const f: <Key: number, Value>(o: {[Key]: Value}) => Key;
                                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:62:5

Cannot cast `x` to number because string `1` [1] is incompatible with number [2]. [incompatible-cast]

   test.js:62:5
   62|     x as number; // ERROR
           ^

References:
   test.js:61:22
   61|     declare const x: GetKeys<{'1': boolean, '2': string}>;
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:62:10
   62|     x as number; // ERROR
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:62:5

Cannot cast `x` to number because string `2` [1] is incompatible with number [2]. [incompatible-cast]

   test.js:62:5
   62|     x as number; // ERROR
           ^

References:
   test.js:61:22
   61|     declare const x: GetKeys<{'1': boolean, '2': string}>;
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:62:10
   62|     x as number; // ERROR
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:82:3

Cannot cast `o` to object type because boolean [1] is incompatible with string [2] in the indexer property.
[incompatible-cast]

   test.js:82:3
   82|   o as {+[string]: string}; // ERROR
         ^

References:
   test.js:76:15
   76|     [number]: boolean,
                     ^^^^^^^ [1]
   test.js:82:20
   82|   o as {+[string]: string}; // ERROR
                          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:82:3

Cannot cast `o` to object type because number [1] is incompatible with string [2] in the indexer property's key.
[incompatible-cast]

   test.js:82:3
   82|   o as {+[string]: string}; // ERROR
         ^

References:
   test.js:76:6
   76|     [number]: boolean,
            ^^^^^^ [1]
   test.js:82:11
   82|   o as {+[string]: string}; // ERROR
                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:105:3

Cannot cast `o` to object type because property `1.0234` is missing in object type [1] but exists in object literal [2].
Any property that does not exist in object type [1] must be compatible with its indexer number [3]. [incompatible-type]

   test.js:105:3
   105|   o as {[number]: boolean}; // ERROR
          ^

References:
   test.js:105:8
   105|   o as {[number]: boolean}; // ERROR
               ^^^^^^^^^^^^^^^^^^^ [1]
   test.js:102:13
                    v
   102|   const o = {
   103|     '1.0234': true,
   104|   };
          ^ [2]
   test.js:105:10
   105|   o as {[number]: boolean}; // ERROR
                 ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:114:3

Cannot cast `o` to object type because property `9007199254740992` is missing in object type [1] but exists in object
literal [2]. Any property that does not exist in object type [1] must be compatible with its indexer number [3].
[incompatible-type]

   test.js:114:3
   114|   o as {[number]: boolean}; // ERROR
          ^

References:
   test.js:114:8
   114|   o as {[number]: boolean}; // ERROR
               ^^^^^^^^^^^^^^^^^^^ [1]
   test.js:111:13
                    v
   111|   const o = {
   112|     '9007199254740992': true,
   113|   };
          ^ [2]
   test.js:114:10
   114|   o as {[number]: boolean}; // ERROR
                 ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:128:3

Cannot cast `o[1]` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:128:3
   128|   o[1] as empty; // ERROR
          ^^^^

References:
   test.js:121:10
   121|     [1]: true,
                 ^^^^ [1]
   test.js:128:11
   128|   o[1] as empty; // ERROR
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:129:3

Cannot cast `o['1']` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:129:3
   129|   o['1'] as empty; // ERROR
          ^^^^^^

References:
   test.js:121:10
   121|     [1]: true,
                 ^^^^ [1]
   test.js:129:13
   129|   o['1'] as empty; // ERROR
                    ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:141:3

Cannot cast `o[1]` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:141:3
   141|   o[1] as empty; // ERROR
          ^^^^

References:
   test.js:137:14
   137|     [E.One]: true,
                     ^^^^ [1]
   test.js:141:11
   141|   o[1] as empty; // ERROR
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:142:3

Cannot cast `o['1']` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:142:3
   142|   o['1'] as empty; // ERROR
          ^^^^^^

References:
   test.js:137:14
   137|     [E.One]: true,
                     ^^^^ [1]
   test.js:142:13
   142|   o['1'] as empty; // ERROR
                    ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:154:3

Cannot cast `o[1000]` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:154:3
   154|   o[1000] as empty; // ERROR
          ^^^^^^^

References:
   test.js:148:12
   148|     [1E3]: true, // OK
                   ^^^^ [1]
   test.js:154:14
   154|   o[1000] as empty; // ERROR
                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:157:3

Cannot cast `o[10]` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:157:3
   157|   o[10] as empty; // ERROR
          ^^^^^

References:
   test.js:149:12
   149|     [0XA]: true, // OK
                   ^^^^ [1]
   test.js:157:12
   157|   o[10] as empty; // ERROR
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:160:3

Cannot cast `o[8]` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:160:3
   160|   o[8] as empty; // ERROR
          ^^^^

References:
   test.js:150:12
   150|     [010]: true, // OK
                   ^^^^ [1]
   test.js:160:11
   160|   o[8] as empty; // ERROR
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:169:5

Cannot get `x['foo']` because property `foo` is missing in object type [1]. [prop-missing]

   test.js:169:5
   169|   x['foo']; // ERROR
            ^^^^^

References:
   test.js:165:20
   165|   declare const x: {[number]: boolean};
                           ^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:181:5

Cannot access object with computed property using number literal `1.1` [1]. Only integer-like number literals are
allowed. [invalid-computed-prop]

   181|   x[1.1]; // ERROR
            ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:182:5

Cannot access object with computed property using number literal `9007199254740992` [1]. Number literals must not be
larger than `Number.MAX_SAFE_INTEGER`. [invalid-computed-prop]

   182|   x[9007199254740992]; // ERROR
            ^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:188:6

Cannot use number literal `1.1` [1] to assign a computed property. Only integer-like number literals are allowed.
[invalid-computed-prop]

   188|     [1.1]: true, // ERROR
             ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:189:6

Cannot use number literal `9007199254740992` [1] to assign a computed property. Number literals must not be larger than
`Number.MAX_SAFE_INTEGER`. [invalid-computed-prop]

   189|     [9007199254740992]: false, // ERROR
             ^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:190:6

Cannot use number literal `-9007199254740992` [1] to assign a computed property. Number literals must not be smaller
than `Number.MIN_SAFE_INTEGER`. [invalid-computed-prop]

   190|     [-9007199254740992]: false, // ERROR
             ^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:193:5

Unsupported key in object literal. Only integer-like number literals are allowed. [illegal-key]

   193|     1.1: true, // ERROR
            ^^^


Error ---------------------------------------------------------------------------------------------------- test.js:194:5

Unsupported key in object literal. Number literals must not be larger than `Number.MAX_SAFE_INTEGER`. [illegal-key]

   194|     9007199254740992: false, // ERROR
            ^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:206:3

Cannot cast `o[1]` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:206:3
   206|   o[1] as empty; // ERROR
          ^^^^

References:
   test.js:201:8
   201|     1: true,
               ^^^^ [1]
   test.js:206:11
   206|   o[1] as empty; // ERROR
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:207:3

Cannot cast `o[9007199254740991]` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:207:3
   207|   o[9007199254740991] as empty; // ERROR
          ^^^^^^^^^^^^^^^^^^^

References:
   test.js:202:23
   202|     9007199254740991: false,
                              ^^^^^ [1]
   test.js:207:26
   207|   o[9007199254740991] as empty; // ERROR
                                 ^^^^^ [2]



Found 48 errors
