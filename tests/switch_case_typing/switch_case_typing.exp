Error ----------------------------------------------------------------------------------------------------- test.js:8:10

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:8:10
   8|     case 'qux': // error
               ^^^^^ [2]

References:
   test.js:3:20
   3|   declare const x: Enum;
                         ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:19:10

Invalid check of number literal `3` against `Enum` [1] because number [2] is incompatible with `Enum` [1].
[incompatible-type]

   test.js:19:10
   19|     case 3: // error
                ^ [2]

References:
   test.js:13:20
   13|   declare const x: Enum;
                          ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:30:10

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:30:10
   30|     case 'qux': // error
                ^^^^^ [2]

References:
   test.js:24:20
   24|   declare const x: Enum;
                          ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:39:18

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:39:18
   39|   else if (x === 'qux') {} // error
                        ^^^^^ [2]

References:
   test.js:35:20
   35|   declare const x: Enum;
                          ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:45:18

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:45:18
   45|   else if (x === 'qux') {} // error
                        ^^^^^ [2]

References:
   test.js:42:20
   42|   declare const x: Enum;
                          ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:54:10

Invalid check of number literal `4` against `eNum` [1] because number [2] is incompatible with `eNum` [1].
[incompatible-type]

   test.js:54:10
   54|     case 4: // error
                ^ [2]

References:
   test.js:50:20
   50|   declare const y: eNum;
                          ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:65:10

Invalid check of number literal `4` against `eNum` [1] because number [2] is incompatible with `eNum` [1].
[incompatible-type]

   test.js:65:10
   65|     case 4: // error
                ^ [2]

References:
   test.js:59:20
   59|   declare const y: eNum;
                          ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:77:10

Cannot compare string literal `qux` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare string literal `qux` [1] with property `type` of `o` [2] because string literal `qux` [1] is
   incompatible with string literal `foo` [3].
 - Or cannot compare string literal `qux` [1] with property `type` of `o` [2] because string literal `qux` [1] is
   incompatible with string literal `bar` [4].
 - Or cannot compare string literal `qux` [1] with property `type` of `o` [2] because string literal `qux` [1] is
   incompatible with string literal `baz` [5].

   test.js:77:10
   77|     case 'qux': // error
                ^^^^^ [1]

References:
   test.js:72:17
   72|   declare const o: DisjointUnion;
                       ^ [2]
   test.js:70:30
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                    ^^^^^ [3]
   test.js:70:48
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                      ^^^^^ [4]
   test.js:70:66
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                        ^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:87:7

Cannot cast `o.type` to empty because string literal `foo` [1] is incompatible with empty [2]. [incompatible-type]

   test.js:87:7
   87|       o.type as empty; // error
             ^^^^^^

References:
   test.js:70:30
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                    ^^^^^ [1]
   test.js:87:17
   87|       o.type as empty; // error
                       ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:87:7

Cannot cast `o.type` to empty because string literal `bar` [1] is incompatible with empty [2]. [incompatible-type]

   test.js:87:7
   87|       o.type as empty; // error
             ^^^^^^

References:
   test.js:70:48
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                      ^^^^^ [1]
   test.js:87:17
   87|       o.type as empty; // error
                       ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:87:7

Cannot cast `o.type` to empty because string literal `baz` [1] is incompatible with empty [2]. [incompatible-type]

   test.js:87:7
   87|       o.type as empty; // error
             ^^^^^^

References:
   test.js:70:66
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                        ^^^^^ [1]
   test.js:87:17
   87|       o.type as empty; // error
                       ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:87:7

Cannot cast `o.type` to empty because string literal `foo` [1] is incompatible with empty [2]. [incompatible-type]

   test.js:87:7
   87|       o.type as empty; // error
             ^^^^^^

References:
   test.js:84:10
   84|     case 'foo':
                ^^^^^ [1]
   test.js:87:17
   87|       o.type as empty; // error
                       ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:87:7

Cannot cast `o.type` to empty because string literal `bar` [1] is incompatible with empty [2]. [incompatible-type]

   test.js:87:7
   87|       o.type as empty; // error
             ^^^^^^

References:
   test.js:85:10
   85|     case 'bar':
                ^^^^^ [1]
   test.js:87:17
   87|       o.type as empty; // error
                       ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:89:10

Cannot compare string literal `qux` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare string literal `qux` [1] with property `type` of `o` [2] because string literal `qux` [1] is
   incompatible with string literal `foo` [3].
 - Or cannot compare string literal `qux` [1] with property `type` of `o` [2] because string literal `qux` [1] is
   incompatible with string literal `bar` [4].
 - Or cannot compare string literal `qux` [1] with property `type` of `o` [2] because string literal `qux` [1] is
   incompatible with string literal `baz` [5].

   test.js:89:10
   89|     case 'qux': // error
                ^^^^^ [1]

References:
   test.js:82:17
   82|   declare const o: DisjointUnion;
                       ^ [2]
   test.js:70:30
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                    ^^^^^ [3]
   test.js:70:48
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                      ^^^^^ [4]
   test.js:70:66
   70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                        ^^^^^ [5]


Error --------------------------------------------------------------------------------------------------- test.js:101:10

Cannot compare number literal `3` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare number literal `3` [1] with property `type` of `o` [2] because number [1] is incompatible with
   string literal `foo` [3].
 - Or cannot compare number literal `3` [1] with property `type` of `o` [2] because number [1] is incompatible with
   string literal `bar` [4].
 - Or cannot compare number literal `3` [1] with property `type` of `o` [2] because number [1] is incompatible with
   string literal `baz` [5].

   test.js:101:10
   101|     case 3: // error
                 ^ [1]

References:
   test.js:95:17
    95|   declare const o: DisjointUnion;
                        ^ [2]
   test.js:70:30
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [3]
   test.js:70:48
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [4]
   test.js:70:66
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [5]


Error --------------------------------------------------------------------------------------------------- test.js:108:13

Invalid check of string literal `a` against `String` [1] because string [2] is incompatible with `String` [1].
[incompatible-type]

   test.js:108:13
   108|   if (s === "a" || s === "b") {} // error
                    ^^^ [2]

References:
   test.js:107:20
   107|   declare const s: String;
                           ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:108:26

Invalid check of string literal `b` against `String` [1] because string [2] is incompatible with `String` [1].
[incompatible-type]

   test.js:108:26
   108|   if (s === "a" || s === "b") {} // error
                                 ^^^ [2]

References:
   test.js:107:20
   107|   declare const s: String;
                           ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:109:13

Invalid check of string literal `a` against `String` [1] because string [2] is incompatible with `String` [1].
[incompatible-type]

   test.js:109:13
   109|   if (s === "a" && s === "b") {} // error
                    ^^^ [2]

References:
   test.js:107:20
   107|   declare const s: String;
                           ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:109:26

Invalid check of string literal `b` against `String` [1] because string [2] is incompatible with `String` [1].
[incompatible-type]

   test.js:109:26
   109|   if (s === "a" && s === "b") {} // error
                                 ^^^ [2]

References:
   test.js:107:20
   107|   declare const s: String;
                           ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:114:14

Invalid check of number literal `1` against string [1] because number [2] is incompatible with string [1].
[incompatible-type]

   test.js:114:14
   114|   if (st === 1 || st === 2) {} // error
                     ^ [2]

References:
   test.js:113:19
   113|   declare var st: string;
                          ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:114:26

Invalid check of number literal `2` against string [1] because number [2] is incompatible with string [1].
[incompatible-type]

   test.js:114:26
   114|   if (st === 1 || st === 2) {} // error
                                 ^ [2]

References:
   test.js:113:19
   113|   declare var st: string;
                          ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:115:14

Invalid check of number literal `1` against string [1] because number [2] is incompatible with string [1].
[incompatible-type]

   test.js:115:14
   115|   if (st === 1 && st === 2) {} // error
                     ^ [2]

References:
   test.js:113:19
   113|   declare var st: string;
                          ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:115:26

Invalid check of number literal `2` against string [1] because number [2] is incompatible with string [1].
[incompatible-type]

   test.js:115:26
   115|   if (st === 1 && st === 2) {} // error
                                 ^ [2]

References:
   test.js:113:19
   113|   declare var st: string;
                          ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:121:21

Cannot compare number literal `1` [1] with property `field` of `obj` [2] because number [1] is incompatible with
string [3]. [incompatible-type]

   test.js:121:21
   121|   if (obj.field === 1 || obj.field === 2) {} // error
                            ^ [1]

References:
   test.js:120:15
   120|   declare var obj: Obj;
                      ^^^ [2]
   test.js:119:24
   119|   type Obj = { field : string };
                               ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- test.js:121:40

Cannot compare number literal `2` [1] with property `field` of `obj` [2] because number [1] is incompatible with
string [3]. [incompatible-type]

   test.js:121:40
   121|   if (obj.field === 1 || obj.field === 2) {} // error
                                               ^ [1]

References:
   test.js:120:15
   120|   declare var obj: Obj;
                      ^^^ [2]
   test.js:119:24
   119|   type Obj = { field : string };
                               ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- test.js:122:21

Cannot compare number literal `1` [1] with property `field` of `obj` [2] because number [1] is incompatible with
string [3]. [incompatible-type]

   test.js:122:21
   122|   if (obj.field === 1 && obj.field === 2) {} // error
                            ^ [1]

References:
   test.js:120:15
   120|   declare var obj: Obj;
                      ^^^ [2]
   test.js:119:24
   119|   type Obj = { field : string };
                               ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- test.js:132:18

Cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is
   incompatible with string literal `foo` [4].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is incompatible
   with string literal `bar` [5].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is incompatible
   with string literal `baz` [6].

   test.js:132:18
   132|   if (o.type === KeyObj.ERR) {} // error
                         ^^^^^^^^^^ [1]

References:
   test.js:131:17
   131|   declare const o: DisjointUnion;
                        ^ [2]
   test.js:128:10
   128|   "ERR": 'err',
                 ^^^^^ [3]
   test.js:70:30
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [4]
   test.js:70:48
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [5]
   test.js:70:66
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [6]


Error ---------------------------------------------------------------------------------------------------- test.js:133:7

Cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is
   incompatible with string literal `foo` [4].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is incompatible
   with string literal `bar` [5].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is incompatible
   with string literal `baz` [6].

   test.js:133:7
   133|   if (KeyObj.ERR === o.type) {} // error
              ^^^^^^^^^^ [1]

References:
   test.js:131:17
   131|   declare const o: DisjointUnion;
                        ^ [2]
   test.js:128:10
   128|   "ERR": 'err',
                 ^^^^^ [3]
   test.js:70:30
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [4]
   test.js:70:48
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [5]
   test.js:70:66
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [6]


Error --------------------------------------------------------------------------------------------------- test.js:140:10

Cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is
   incompatible with string literal `foo` [4].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is incompatible
   with string literal `bar` [5].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string literal `err` [3] is incompatible
   with string literal `baz` [6].

   test.js:140:10
   140|     case KeyObj.ERR: // error
                 ^^^^^^^^^^ [1]

References:
   test.js:136:17
   136|   declare const o: DisjointUnion;
                        ^ [2]
   test.js:128:10
   128|   "ERR": 'err',
                 ^^^^^ [3]
   test.js:70:30
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [4]
   test.js:70:48
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [5]
   test.js:70:66
    70| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [6]



Found 29 errors
