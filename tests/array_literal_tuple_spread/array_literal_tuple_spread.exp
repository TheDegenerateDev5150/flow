Error ---------------------------------------------------------------------------------------------------- test.js:29:31

Cannot assign array literal to `x` because in index `1`: number [1] is incompatible with number literal `20` [2].
[incompatible-type]

   test.js:29:31
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                                     ^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:27:14
   27|   const a = [2];
                    ^ [1]
   test.js:29:15
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                     ^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:29:31

Cannot assign array literal to `x` because in index `3`: number [1] is incompatible with number literal `4` [2].
[incompatible-type]

   test.js:29:31
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                                     ^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:28:14
   28|   const b = [4, 5];
                    ^ [1]
   test.js:29:21
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                           ^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:29:31

Cannot assign array literal to `x` because in index `4`: number [1] is incompatible with number literal `5` [2].
[incompatible-type]

   test.js:29:31
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                                     ^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:28:17
   28|   const b = [4, 5];
                       ^ [1]
   test.js:29:23
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                             ^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:29:41

Cannot assign array literal to `x` because in index `2`: number literal `3` [1] is incompatible with number literal
`30` [2]. [incompatible-type]

   test.js:29:41
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                                               ^ [1]

References:
   test.js:29:18
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                        ^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:29:50

Cannot assign array literal to `x` because in index `5`: number literal `6` [1] is incompatible with number literal
`60` [2]. [incompatible-type]

   test.js:29:50
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                                                        ^ [1]

References:
   test.js:29:25
   29|   const x: [1,20,30,4,5,60] = [1, ...a, 3, ...b, 6]; // error
                               ^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:44:4

Cannot cast `ret1[0]` to number literal `2` because number [1] is incompatible with number literal `2` [2].
[incompatible-type]

   test.js:44:4
   44|   (ret1[0]: 2); // error
          ^^^^^^^

References:
   test.js:39:27
   39|   function foo(arr: Array<number>) {
                                 ^^^^^^ [1]
   test.js:44:13
   44|   (ret1[0]: 2); // error
                   ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:45:4

Cannot cast `ret2[0]` to number literal `3` because number [1] is incompatible with number literal `3` [2].
[incompatible-type]

   test.js:45:4
   45|   (ret2[0]: 3); // error
          ^^^^^^^

References:
   test.js:39:27
   39|   function foo(arr: Array<number>) {
                                 ^^^^^^ [1]
   test.js:45:13
   45|   (ret2[0]: 3); // error
                   ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:52:4

Cannot cast `nonTup` to tuple type because array literal [1] has an unknown number of elements, so is incompatible with
tuple type [2]. [invalid-tuple-arity]

   test.js:52:4
   52|   (nonTup: [1,2,3]); // error
          ^^^^^^

References:
   test.js:51:18
   51|   const nonTup = [...tup];
                        ^^^^^^^^ [1]
   test.js:52:12
   52|   (nonTup: [1,2,3]); // error
                  ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:59:4

Cannot cast `nonTup` to tuple type because array literal [1] has an unknown number of elements, so is incompatible with
tuple type [2]. [invalid-tuple-arity]

   test.js:59:4
   59|   (nonTup: [1,2,3]); // error
          ^^^^^^

References:
   test.js:58:18
   58|   const nonTup = [...tup];
                        ^^^^^^^^ [1]
   test.js:59:12
   59|   (nonTup: [1,2,3]); // error
                  ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:63:6

string literal `hello` [1], a primitive, cannot be used as a subtype of `$Iterable` [2]. You can wrap it in
`new String(...))` to turn it into an object and attempt to use it as a subtype of an interface. [incompatible-type]

   test.js:63:6
   63| ([..."hello"]: Array<number>); // ERROR
            ^^^^^^^ [1]

References:
   <BUILTINS>/prelude.js:53:11
   53| interface $Iterable<+Yield,+Return,-Next> {
                 ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:70:30

Cannot assign array literal to `arr` because in array element: string [1] is incompatible with number [2].
[incompatible-type]

   test.js:70:30
   70|   const arr: Array<number> = [...foo()]; // error: Generators are iterables too!
                                    ^^^^^^^^^^

References:
   test.js:67:30
   67|   function *foo(): Generator<string, void, void> {
                                    ^^^^^^ [1]
   test.js:70:20
   70|   const arr: Array<number> = [...foo()]; // error: Generators are iterables too!
                          ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:76:12

Cannot return array literal because in array element: string [1] is incompatible with number [2]. [incompatible-type]

   test.js:76:12
   76|     return [...iter]; // error: Spec says you can spread iterables
                  ^^^^^^^^^

References:
   test.js:75:32
   75|   function test(iter: Iterable<string>): Array<number> {
                                      ^^^^^^ [1]
   test.js:75:48
   75|   function test(iter: Iterable<string>): Array<number> {
                                                      ^^^^^^ [2]



Found 12 errors
