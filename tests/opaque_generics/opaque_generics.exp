Error -------------------------------------------------------------------------------------- importtest-polarity.js:8:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   importtest-polarity.js:8:12
    8|     return x;
                  ^

References:
   importtest-polarity.js:7:38
    7| function test2(x: Covariant<number | string>) : Covariant<number> { // Error number | string ~> number
                                            ^^^^^^ [1]
   importtest-polarity.js:7:59
    7| function test2(x: Covariant<number | string>) : Covariant<number> { // Error number | string ~> number
                                                                 ^^^^^^ [2]
   test-polarity.js:16:31
   16| export opaque type Covariant<+T> = Foo<T>;
                                     ^ [3]


Error ------------------------------------------------------------------------------------- importtest-polarity.js:16:12

Cannot return `x` because number [1] is incompatible with string [2] in type argument `T` [3]. [incompatible-type]

   importtest-polarity.js:16:12
   16|     return x;
                  ^

References:
   importtest-polarity.js:15:33
   15| function test4(x: Contravariant<number>) : Contravariant<number | string> { // Error: number | string ~> number
                                       ^^^^^^ [1]
   importtest-polarity.js:15:67
   15| function test4(x: Contravariant<number>) : Contravariant<number | string> { // Error: number | string ~> number
                                                                         ^^^^^^ [2]
   test-polarity.js:17:35
   17| export opaque type Contravariant<-T> = Bar<T>;
                                         ^ [3]


Error ------------------------------------------------------------------------------------- importtest-polarity.js:24:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   importtest-polarity.js:24:12
   24|     return x;
                  ^

References:
   importtest-polarity.js:23:59
   23| function test6(x: Invariant<number>) : Invariant<number | string> { // Error: number ~> number | string
                                                                 ^^^^^^ [1]
   importtest-polarity.js:23:29
   23| function test6(x: Invariant<number>) : Invariant<number | string> { // Error: number ~> number | string
                                   ^^^^^^ [2]
   test-polarity.js:18:30
   18| export opaque type Invariant<T> = Baz<T>;
                                    ^ [3]


Error ------------------------------------------------------------------------------------- importtest-polarity.js:28:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   importtest-polarity.js:28:12
   28|     return x;
                  ^

References:
   importtest-polarity.js:27:38
   27| function test7(x: Invariant<number | string>) : Invariant<number> { // Error: number | string != number
                                            ^^^^^^ [1]
   importtest-polarity.js:27:59
   27| function test7(x: Invariant<number | string>) : Invariant<number> { // Error: number | string != number
                                                                 ^^^^^^ [2]
   test-polarity.js:18:30
   18| export opaque type Invariant<T> = Baz<T>;
                                    ^ [3]


Error ------------------------------------------------------------------------------------- importtest-polarity.js:37:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `S` [3]. [incompatible-type]

   importtest-polarity.js:37:12
   37|     return x;
                  ^

References:
   importtest-polarity.js:36:81
   36| function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                       ^^^^^^ [1]
   importtest-polarity.js:36:23
   36| function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                             ^^^^^^ [2]
   test-polarity.js:19:24
   19| export opaque type All<S,+T,-U> = FooBarBaz<S,T,U>;
                              ^ [3]


Error ------------------------------------------------------------------------------------- importtest-polarity.js:37:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   importtest-polarity.js:37:12
   37|     return x;
                  ^

References:
   importtest-polarity.js:36:40
   36| function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                              ^^^^^^ [1]
   importtest-polarity.js:36:89
   36| function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                               ^^^^^^ [2]
   test-polarity.js:19:27
   19| export opaque type All<S,+T,-U> = FooBarBaz<S,T,U>;
                                 ^ [3]


Error ------------------------------------------------------------------------------------- importtest-polarity.js:37:12

Cannot return `x` because in type argument `U` [1]: [incompatible-type]
 - Either null [2] is incompatible with number [3].
 - Or null [2] is incompatible with string [4].

   importtest-polarity.js:37:12
   37|     return x;
                  ^

References:
   test-polarity.js:19:30
   19| export opaque type All<S,+T,-U> = FooBarBaz<S,T,U>;
                                    ^ [1]
   importtest-polarity.js:36:115
   36| function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                                                         ^^^^ [2]
   importtest-polarity.js:36:48
   36| function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                      ^^^^^^ [3]
   importtest-polarity.js:36:57
   36| function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                               ^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------- importtest.js:5:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   importtest.js:5:12
   5|     return x;
                 ^

References:
   importtest.js:4:24
   4| function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                             ^^^^^^ [1]
   importtest.js:4:39
   4| function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                                            ^^^^^^ [2]
   test.js:1:24
   1| export opaque type Box<T> = [T];
                             ^ [3]


Error ---------------------------------------------------------------------------------------------- importtest.js:13:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   importtest.js:13:12
   13|     return x;
                  ^

References:
   importtest.js:12:30
   12| function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                    ^^^^^^ [1]
   importtest.js:12:51
   12| function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                                         ^^^^^^ [2]
   test.js:2:30
    2| export opaque type Container<T> = Box<T>;
                                    ^ [3]


Error ---------------------------------------------------------------------------------------------- importtest.js:21:12

Cannot return `x` because `Container` [1] is incompatible with `Box` [2]. [incompatible-type]

   importtest.js:21:12
   21|     return x;
                  ^

References:
   importtest.js:20:20
   20| function test5(x : Container<string>) : Box<string> { // Error: Container ~> Box
                          ^^^^^^^^^^^^^^^^^ [1]
   importtest.js:20:41
   20| function test5(x : Container<string>) : Box<string> { // Error: Container ~> Box
                                               ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- importtest.js:25:12

Cannot return `x` because `Box` [1] is incompatible with `Container` [2]. [incompatible-type]

   importtest.js:25:12
   25|     return x;
                  ^

References:
   importtest.js:24:20
   24| function test6(x : Box<string>) : Container<string> { // Error: Box ~> Container
                          ^^^^^^^^^^^ [1]
   importtest.js:24:35
   24| function test6(x : Box<string>) : Container<string> { // Error: Box ~> Container
                                         ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- test-polarity.js:9:28

Cannot use `T` [1] in an output position because `T` [1] is expected to occur only in input positions.
[incompatible-variance]

   test-polarity.js:9:28
   9| opaque type Bad1<-T> = Foo<T>; // Error: Foo expects covariant type
                                 ^

References:
   test-polarity.js:9:19
   9| opaque type Bad1<-T> = Foo<T>; // Error: Foo expects covariant type
                        ^ [1]


Error ------------------------------------------------------------------------------------------- test-polarity.js:10:28

Cannot use `T` [1] in an input position because `T` [1] is expected to occur only in output positions.
[incompatible-variance]

   test-polarity.js:10:28
   10| opaque type Bad2<+T> = Bar<T>; // Error: Bar expects contravariant type
                                  ^

References:
   test-polarity.js:10:19
   10| opaque type Bad2<+T> = Bar<T>; // Error: Bar expects contravariant type
                         ^ [1]


Error ------------------------------------------------------------------------------------------- test-polarity.js:11:28

Cannot use `T` [1] in an input/output position because `T` [1] is expected to occur only in input positions.
[incompatible-variance]

   test-polarity.js:11:28
   11| opaque type Bad3<-T> = Baz<T>; // Error: Baz expects invariant type
                                  ^

References:
   test-polarity.js:11:19
   11| opaque type Bad3<-T> = Baz<T>; // Error: Baz expects invariant type
                         ^ [1]


Error ------------------------------------------------------------------------------------------- test-polarity.js:12:28

Cannot use `T` [1] in an input/output position because `T` [1] is expected to occur only in output positions.
[incompatible-variance]

   test-polarity.js:12:28
   12| opaque type Bad4<+T> = Baz<T>; // Error: Baz expects invariant type
                                  ^

References:
   test-polarity.js:12:19
   12| opaque type Bad4<+T> = Baz<T>; // Error: Baz expects invariant type
                         ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:5:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   test.js:5:12
   5|     return x;
                 ^

References:
   test.js:4:24
   4| function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                             ^^^^^^ [1]
   test.js:4:39
   4| function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                                            ^^^^^^ [2]
   test.js:1:24
   1| export opaque type Box<T> = [T];
                             ^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:13:12

Cannot return `x` because string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type]

   test.js:13:12
   13|     return x;
                  ^

References:
   test.js:12:30
   12| function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                    ^^^^^^ [1]
   test.js:12:51
   12| function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                                         ^^^^^^ [2]
   test.js:2:30
    2| export opaque type Container<T> = Box<T>;
                                    ^ [3]



Found 17 errors
