Error ------------------------------------------------------------------------------------------------------ test.js:5:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:5:2
   5| (x : string); // error correctly
       ^

References:
   test.js:3:9
   3| let x : number = 1;
              ^^^^^^ [1]
   test.js:5:6
   5| (x : string); // error correctly
           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:7:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   7| //$FlowFixMe
      ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------------ test.js:8:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:8:2
   8| (x : string); // error not suppressed, missing code
       ^

References:
   test.js:3:9
   3| let x : number = 1;
              ^^^^^^ [1]
   test.js:8:6
   8| (x : string); // error not suppressed, missing code
           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:10:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   10| //$FlowFixMe[]
       ^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:11:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:11:2
   11| (x : string); // error not suppressed, malformed code
        ^

References:
   test.js:3:9
    3| let x : number = 1;
               ^^^^^^ [1]
   test.js:11:6
   11| (x : string); // error not suppressed, malformed code
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:13:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   13| // $FlowFixMe
       ^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:14:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:14:2
   14| (x : string); // error not suppressed, missing code
        ^

References:
   test.js:3:9
    3| let x : number = 1;
               ^^^^^^ [1]
   test.js:14:6
   14| (x : string); // error not suppressed, missing code
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:16:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

       v-
   16| /*
   17|
   18| $FlowFixMe*/
       -----------^


Error ----------------------------------------------------------------------------------------------------- test.js:19:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:19:2
   19| (x: string); // error not suppressed, missing code
        ^

References:
   test.js:3:9
    3| let x : number = 1;
               ^^^^^^ [1]
   test.js:19:5
   19| (x: string); // error not suppressed, missing code
           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:21:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   21| //$FlowFixMe arithmetic isn't parsed as an error code
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:22:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:22:2
   22| (x : string); // error not suppressed, missing code
        ^

References:
   test.js:3:9
    3| let x : number = 1;
               ^^^^^^ [1]
   test.js:22:6
   22| (x : string); // error not suppressed, missing code
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:30:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   30| // $FlowFixMe [incompatible-type]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:31:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:31:2
   31| (x : string); // error not suppressed, malformed code
        ^

References:
   test.js:3:9
    3| let x : number = 1;
               ^^^^^^ [1]
   test.js:31:6
   31| (x : string); // error not suppressed, malformed code
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:34:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:34:2
   34| (x : string); // error not suppressed + unused suppression
        ^

References:
   test.js:3:9
    3| let x : number = 1;
               ^^^^^^ [1]
   test.js:34:6
   34| (x : string); // error not suppressed + unused suppression
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:40:2

Cannot cast `y.x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:40:2
   40| (y.x : string); // both errors appear
        ^^^

References:
   test.js:38:24
   38| let y : number | { x : number }  = 1;
                              ^^^^^^ [1]
   test.js:40:8
   40| (y.x : string); // both errors appear
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:40:4

Cannot get `y.x` because property `x` is missing in `Number` [1]. [prop-missing]

   test.js:40:4
   40| (y.x : string); // both errors appear
          ^

References:
   test.js:38:9
   38| let y : number | { x : number }  = 1;
               ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:42:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   42| // $FlowFixMe
       ^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:43:2

Cannot cast `y.x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:43:2
   43| (y.x : string); // errors not suppressed, missing code
        ^^^

References:
   test.js:38:24
   38| let y : number | { x : number }  = 1;
                              ^^^^^^ [1]
   test.js:43:8
   43| (y.x : string); // errors not suppressed, missing code
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:43:4

Cannot get `y.x` because property `x` is missing in `Number` [1]. [prop-missing]

   test.js:43:4
   43| (y.x : string); // errors not suppressed, missing code
          ^

References:
   test.js:38:9
   38| let y : number | { x : number }  = 1;
               ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:46:4

Cannot get `y.x` because property `x` is missing in `Number` [1]. [prop-missing]

   test.js:46:4
   46| (y.x : string); // only the property access shows up
          ^

References:
   test.js:38:9
   38| let y : number | { x : number }  = 1;
               ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:49:2

Cannot cast `y.x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:49:2
   49| (y.x : string); // only the incompatibility shows up
        ^^^

References:
   test.js:38:24
   38| let y : number | { x : number }  = 1;
                              ^^^^^^ [1]
   test.js:49:8
   49| (y.x : string); // only the incompatibility shows up
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:70:2

Cannot cast `y.x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:70:2
   70| (y.x : string); // incompatibility shows up
        ^^^

References:
   test.js:38:24
   38| let y : number | { x : number }  = 1;
                              ^^^^^^ [1]
   test.js:70:8
   70| (y.x : string); // incompatibility shows up
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:75:2

Cannot cast `y.x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:75:2
   75| (y.x : string); // incompatibility shows up
        ^^^

References:
   test.js:38:24
   38| let y : number | { x : number }  = 1;
                              ^^^^^^ [1]
   test.js:75:8
   75| (y.x : string); // incompatibility shows up
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:80:2

Cannot cast `y.x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:80:2
   80| (y.x : string); // both
        ^^^

References:
   test.js:38:24
   38| let y : number | { x : number }  = 1;
                              ^^^^^^ [1]
   test.js:80:8
   80| (y.x : string); // both
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:80:4

Cannot get `y.x` because property `x` is missing in `Number` [1]. [prop-missing]

   test.js:80:4
   80| (y.x : string); // both
          ^

References:
   test.js:38:9
   38| let y : number | { x : number }  = 1;
               ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:91:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   91| //$FlowFixMe
       ^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:92:2

Cannot cast `z` to union type because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with boolean [3].

   test.js:92:2
   92| (z : string | boolean); // errors not suppressed, missing code
        ^

References:
   test.js:89:9
   89| let z : number = 3;
               ^^^^^^ [1]
   test.js:92:6
   92| (z : string | boolean); // errors not suppressed, missing code
            ^^^^^^ [2]
   test.js:92:15
   92| (z : string | boolean); // errors not suppressed, missing code
                     ^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:98:2

Cannot cast `z` to union type because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with boolean [3].

   test.js:98:2
   98| (z : string | boolean); // error + unused suppression
        ^

References:
   test.js:89:9
   89| let z : number = 3;
               ^^^^^^ [1]
   test.js:98:6
   98| (z : string | boolean); // error + unused suppression
            ^^^^^^ [2]
   test.js:98:15
   98| (z : string | boolean); // error + unused suppression
                     ^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:103:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   103| // $FlowFixMe
        ^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:104:8

Cannot call `foo` because no more than 1 argument is expected by function type [1]. [extra-arg]

   test.js:104:8
   104| foo(3, 4); // error not suppressed, missing code
               ^

References:
   test.js:101:22
   101| declare function foo (string) : void;
                             ^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:104:5

Cannot call `foo` with `3` bound to the first parameter because number [1] is incompatible with string [2].
[incompatible-type]

   test.js:104:5
   104| foo(3, 4); // error not suppressed, missing code
            ^ [1]

References:
   test.js:101:23
   101| declare function foo (string) : void;
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:111:8

Cannot call `foo` because no more than 1 argument is expected by function type [1]. [extra-arg]

   test.js:111:8
   111| foo(3, 4); // one error
               ^

References:
   test.js:101:22
   101| declare function foo (string) : void;
                             ^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:114:5

Cannot call `foo` with `3` bound to the first parameter because number [1] is incompatible with string [2].
[incompatible-type]

   test.js:114:5
   114| foo(3, 4); // one error
            ^ [1]

References:
   test.js:101:23
   101| declare function foo (string) : void;
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:119:2

Cannot cast `any` to object type because: [incompatible-type]
 - Either property `bar` is missing in object type [1] but exists in object type [2].
 - Or number [3] is incompatible with object type [2].

   test.js:119:2
   119| ((any: {} & number): {bar:string}); // error
         ^^^^^^^^^^^^^^^^^^

References:
   test.js:119:8
   119| ((any: {} & number): {bar:string}); // error
               ^^ [1]
   test.js:119:22
   119| ((any: {} & number): {bar:string}); // error
                             ^^^^^^^^^^^^ [2]
   test.js:119:13
   119| ((any: {} & number): {bar:string}); // error
                    ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:121:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   121| // $FlowFixMe
        ^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:122:2

Cannot cast `any` to object type because: [incompatible-type]
 - Either property `bar` is missing in object type [1] but exists in object type [2].
 - Or number [3] is incompatible with object type [2].

   test.js:122:2
   122| ((any: {} & number): {bar:string});  // error not suppressed, missing code
         ^^^^^^^^^^^^^^^^^^

References:
   test.js:122:8
   122| ((any: {} & number): {bar:string});  // error not suppressed, missing code
               ^^ [1]
   test.js:122:22
   122| ((any: {} & number): {bar:string});  // error not suppressed, missing code
                             ^^^^^^^^^^^^ [2]
   test.js:122:13
   122| ((any: {} & number): {bar:string});  // error not suppressed, missing code
                    ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:131:2

Cannot cast `any` to object type because: [incompatible-type]
 - Either property `bar` is missing in object type [1] but exists in object type [2].
 - Or number [3] is incompatible with object type [2].

   test.js:131:2
   131| ((any: {} & number): {bar:string});  // error + unused suppression
         ^^^^^^^^^^^^^^^^^^

References:
   test.js:131:8
   131| ((any: {} & number): {bar:string});  // error + unused suppression
               ^^ [1]
   test.js:131:22
   131| ((any: {} & number): {bar:string});  // error + unused suppression
                             ^^^^^^^^^^^^ [2]
   test.js:131:13
   131| ((any: {} & number): {bar:string});  // error + unused suppression
                    ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:135:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   135| //$FlowFixMe[incompatible-use, arithmetic]
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:136:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:136:2
   136| (x : string); // error + unused suppression
         ^

References:
   test.js:3:9
     3| let x : number = 1;
                ^^^^^^ [1]
   test.js:136:6
   136| (x : string); // error + unused suppression
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:138:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   138| //$FlowFixMe[incompatible-use,arithmetic]
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:139:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:139:2
   139| (x : string); // error + unused suppression
         ^

References:
   test.js:3:9
     3| let x : number = 1;
                ^^^^^^ [1]
   test.js:139:6
   139| (x : string); // error + unused suppression
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:142:2

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:142:2
   142| (x : string); // error + unused suppression
         ^

References:
   test.js:3:9
     3| let x : number = 1;
                ^^^^^^ [1]
   test.js:142:6
   142| (x : string); // error + unused suppression
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:144:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   144| //$FlowFixMe[A]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:147:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   147| //$FlowFixMe[ ]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:150:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   150| //$FlowFixMe[<]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:153:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   153| //$FlowFixMe[>]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:156:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   156| //$FlowFixMe[*]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:159:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   159| //$FlowFixMe[_]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:162:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   162| //$FlowFixMe[1]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:165:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

   165| //$FlowFixMe[0]
        ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:168:1

Suppression contains a malformed error code. Suppressions with error codes should be formatted as `$FlowFixMe[<CODE>]`.
[InferError]

        v------------
   168| /*$FlowFixMe[
   169| ]*/
        --^


Error --------------------------------------------------------------------------------------------------- unused.js:26:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   26| //$FlowFixMe unused
       ^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- unused.js:35:1

Suppression is missing a code. Please update this suppression to use an error code: `$FlowFixMe[<CODE>]` [InferError]

   35| //$FlowFixMe unused
       ^^^^^^^^^^^^^^^^^^^


Warning --------------------------------------------------------------------------------------------------- test.js:33:1

Unused suppression comment. [InferError]

   33| // $FlowFixMe[arithmetic]
       ^^^^^^^^^^^^^^^^^^^^^^^^^


Warning --------------------------------------------------------------------------------------------------- test.js:67:1

Unused suppression comment. [InferError]

   67| //$FlowFixMe[incompatible-type]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning --------------------------------------------------------------------------------------------------- test.js:72:1

Unused suppression comment. [InferError]

   72| //$FlowFixMe[incompatible-type]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning --------------------------------------------------------------------------------------------------- test.js:77:1

Unused suppression comment. [InferError]

   77| //$FlowFixMe[incompatible-type]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning --------------------------------------------------------------------------------------------------- test.js:78:1

Unused suppression comment. [InferError]

   78| //$FlowFixMe[prop-missing]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning --------------------------------------------------------------------------------------------------- test.js:84:1

Unused suppression comment. [InferError]

   84| //$FlowFixMe[arithmetic]
       ^^^^^^^^^^^^^^^^^^^^^^^^


Warning --------------------------------------------------------------------------------------------------- test.js:97:1

Unused suppression comment. [InferError]

   97| //$FlowFixMe[prop-missing]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning -------------------------------------------------------------------------------------------------- test.js:130:1

Unused suppression comment. [InferError]

   130| // $FlowFixMe[prop-missing]
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning -------------------------------------------------------------------------------------------------- test.js:141:1

Unused suppression comment. [InferError]

   141| //$FlowFixMe[incompatible-use]
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning -------------------------------------------------------------------------------------------------- unused.js:5:1

Unused suppression comment. [InferError]

   5| //$FlowFixMe[arithmetic] unused
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning -------------------------------------------------------------------------------------------------- unused.js:8:1

Unused suppression comment. [InferError]

   8| //$FlowFixMe[arithmetic] unused
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning ------------------------------------------------------------------------------------------------- unused.js:13:1

Unused suppression comment. [InferError]

   13| //$FlowFixMe[arithmetic] unused
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning ------------------------------------------------------------------------------------------------- unused.js:19:1

Unused suppression comment. [InferError]

   19| //$FlowFixMe[arithmetic] unused
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning ------------------------------------------------------------------------------------------------- unused.js:27:1

Unused suppression comment. [InferError]

   27| //$FlowFixMe[arithmetic] unused
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning ------------------------------------------------------------------------------------------------- unused.js:33:1

Unused suppression comment. [InferError]

   33| //$FlowFixMe[arithmetic] unused
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Warning ------------------------------------------------------------------------------------------------- unused.js:34:1

Unused suppression comment. [InferError]

   34| //$FlowFixMe[incompatible-type] unused
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



Found 53 errors and 16 warnings

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
