Error -------------------------------------------------------------------------------------------- class_static.js:13:11

Cannot use function type [1] with fewer than 2 type arguments. [missing-type-arg]

   class_static.js:13:11
   13| const y = OneTarg<string>(); // error, incorrect amount of args
                 ^^^^^^^

References:
   class_static.js:10:10
   10|   static <K, V>(): OneTarg<K, V>;
                ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ repos_use.js:20:1

Cannot cast `err1` to string literal `FOO` because string literal `BAR` [1] is incompatible with string literal
`FOO` [2]. [incompatible-type]

   repos_use.js:20:1
   20| err1 as 'FOO'; // ERR
       ^^^^

References:
   repos_use.js:9:23
    9| declare const dict: {[MyEnum]: mixed};
                             ^^^^^^ [1]
   repos_use.js:20:9
   20| err1 as 'FOO'; // ERR
               ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- repos_use.js:21:22

Cannot assign `getKeys1(...)` to `err1_` because `MyEnum` [1] is incompatible with string literal `FOO` [2].
[incompatible-type]

   repos_use.js:21:22
   21| const err1_: 'FOO' = getKeys1(dict); // ERR
                            ^^^^^^^^^^^^^^

References:
   repos_use.js:9:23
    9| declare const dict: {[MyEnum]: mixed};
                             ^^^^^^ [1]
   repos_use.js:21:14
   21| const err1_: 'FOO' = getKeys1(dict); // ERR
                    ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ repos_use.js:24:1

Cannot cast `err2` to string literal `FOO` because string literal `BAR` [1] is incompatible with string literal
`FOO` [2]. [incompatible-type]

   repos_use.js:24:1
   24| err2 as 'FOO'; // ERR
       ^^^^

References:
   repos_use.js:9:23
    9| declare const dict: {[MyEnum]: mixed};
                             ^^^^^^ [1]
   repos_use.js:24:9
   24| err2 as 'FOO'; // ERR
               ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- repos_use.js:25:22

Cannot assign `getKeys2(...)` to `err2_` because `TKey` [1] is incompatible with string literal `FOO` [2].
[incompatible-type]

   repos_use.js:25:22
   25| const err2_: 'FOO' = getKeys2(dict); // ERR
                            ^^^^^^^^^^^^^^

References:
   repos_use.js:7:27
    7| declare function getKeys2<TKey>({+[T<TKey>]: mixed}): TKey;
                                 ^^^^ [1]
   repos_use.js:25:14
   25| const err2_: 'FOO' = getKeys2(dict); // ERR
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:7:19

Cannot assign `identity<...>(...)` to `y` because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:7:19
   7| const y: string = identity<_>(3); // Error, string incompatible with number.
                        ^^^^^^^^^^^^^^

References:
   test.js:7:31
   7| const y: string = identity<_>(3); // Error, string incompatible with number.
                                    ^ [1]
   test.js:7:10
   7| const y: string = identity<_>(3); // Error, string incompatible with number.
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:11:11

Cannot call `unimplementable` because `T` [1] is underconstrained by call of `unimplementable` [2]. Either add explicit
type arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   test.js:11:11
   11| const a = unimplementable<_>(); // Ok, not exported. Leaks a tvar, errors in LTI and pinned to any
                 ^^^^^^^^^^^^^^^

References:
   test.js:9:34
    9| declare function unimplementable<T>(): {x: T};
                                        ^ [1]
   test.js:11:11
   11| const a = unimplementable<_>(); // Ok, not exported. Leaks a tvar, errors in LTI and pinned to any
                 ^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:18:1

Cannot cast `z` to string because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:18:1
   18| z as string; // Error, number lower bound string upper bound
       ^

References:
   test.js:17:23
   17| const z = identity<_>(3); // Give z a lower bound.
                             ^ [1]
   test.js:18:6
   18| z as string; // Error, number lower bound string upper bound
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:23:6

Cannot call `unimplementable` because `T` [1] is underconstrained by call of `unimplementable` [2]. Either add explicit
type arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   test.js:23:6
   23|   x: unimplementable<_>(), // Error in LTI, requires concrete annot
            ^^^^^^^^^^^^^^^

References:
   test.js:9:34
    9| declare function unimplementable<T>(): {x: T};
                                        ^ [1]
   test.js:23:6
   23|   x: unimplementable<_>(), // Error in LTI, requires concrete annot
            ^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:24:6

Cannot call `readOnly` because `T` [1] is underconstrained by call of `readOnly` [2]. Either add explicit type arguments
or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   test.js:24:6
   24|   y: readOnly<_>(), // Error in LTI
            ^^^^^^^^

References:
   test.js:20:27
   20| declare function readOnly<T>(): {+x: T};
                                 ^ [1]
   test.js:24:6
   24|   y: readOnly<_>(), // Error in LTI
            ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------- under_constrained_speculation.js:1:2

Cannot cast `0` to string because number [1] is incompatible with string [2]. [incompatible-type]

   under_constrained_speculation.js:1:2
   1| (0: string); // error: intentially left here to ensure that implicit instantiation
       ^ [1]

References:
   under_constrained_speculation.js:1:5
   1| (0: string); // error: intentially left here to ensure that implicit instantiation
          ^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:14:1

Cannot call `C` because `K` [1] is underconstrained by call of `C` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:14:1
   14| C(any_); // okay, we infer C<any, any>
       ^

References:
   under_constrained_speculation.js:5:11
    5|   static <K, V>(_: void): C<K, V>;
                 ^ [1]
   under_constrained_speculation.js:14:1
   14| C(any_); // okay, we infer C<any, any>
       ^^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:14:1

Cannot call `C` because `V` [1] is underconstrained by call of `C` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:14:1
   14| C(any_); // okay, we infer C<any, any>
       ^

References:
   under_constrained_speculation.js:5:14
    5|   static <K, V>(_: void): C<K, V>;
                    ^ [1]
   under_constrained_speculation.js:14:1
   14| C(any_); // okay, we infer C<any, any>
       ^^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:15:1

Cannot call `C` because `K` [1] is underconstrained by call of `C` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:15:1
   15| C(undefined); // error branches are under-constrained for the first overload,
       ^

References:
   under_constrained_speculation.js:5:11
    5|   static <K, V>(_: void): C<K, V>;
                 ^ [1]
   under_constrained_speculation.js:15:1
   15| C(undefined); // error branches are under-constrained for the first overload,
       ^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:15:1

Cannot call `C` because `V` [1] is underconstrained by call of `C` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:15:1
   15| C(undefined); // error branches are under-constrained for the first overload,
       ^

References:
   under_constrained_speculation.js:5:14
    5|   static <K, V>(_: void): C<K, V>;
                    ^ [1]
   under_constrained_speculation.js:15:1
   15| C(undefined); // error branches are under-constrained for the first overload,
       ^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:19:1

Cannot call `foo` because `K` [1] is underconstrained by call of `foo` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:19:1
   19| foo(any_); // error first overload selected, but K, V are under-constrained
       ^^^

References:
   under_constrained_speculation.js:9:22
    9| declare function foo<K, V>(_: void): C<K, V>;
                            ^ [1]
   under_constrained_speculation.js:19:1
   19| foo(any_); // error first overload selected, but K, V are under-constrained
       ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:19:1

Cannot call `foo` because `V` [1] is underconstrained by call of `foo` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:19:1
   19| foo(any_); // error first overload selected, but K, V are under-constrained
       ^^^

References:
   under_constrained_speculation.js:9:25
    9| declare function foo<K, V>(_: void): C<K, V>;
                               ^ [1]
   under_constrained_speculation.js:19:1
   19| foo(any_); // error first overload selected, but K, V are under-constrained
       ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:20:1

Cannot call `foo` because `K` [1] is underconstrained by call of `foo` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:20:1
   20| foo(undefined); // error branches are under-constrained for the first overload,
       ^^^

References:
   under_constrained_speculation.js:9:22
    9| declare function foo<K, V>(_: void): C<K, V>;
                            ^ [1]
   under_constrained_speculation.js:20:1
   20| foo(undefined); // error branches are under-constrained for the first overload,
       ^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------- under_constrained_speculation.js:20:1

Cannot call `foo` because `V` [1] is underconstrained by call of `foo` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   under_constrained_speculation.js:20:1
   20| foo(undefined); // error branches are under-constrained for the first overload,
       ^^^

References:
   under_constrained_speculation.js:9:25
    9| declare function foo<K, V>(_: void): C<K, V>;
                               ^ [1]
   under_constrained_speculation.js:20:1
   20| foo(undefined); // error branches are under-constrained for the first overload,
       ^^^^^^^^^^^^^^ [2]



Found 19 errors
