Error ------------------------------------------------------------------------------------------------------ test.js:4:3

Cannot cast `a!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:4:3
   4|   a! as empty; // LHS is number
        ^

References:
   test.js:2:22
   2| function A(a: null | number) {//Using TS syntax to be able to compare with TS
                           ^^^^^^ [1]
   test.js:4:9
   4|   a! as empty; // LHS is number
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:8:3

`a` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to values
with nullable types. [illegal-assert-operator]

   test.js:8:3
   8|   a! as number;// ok
        ^^

References:
   test.js:8:3
   8|   a! as number;// ok
        ^ [1]


Error ------------------------------------------------------------------------------------------------------ test.js:9:3

Cannot cast `a!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:9:3
   9|   a! as empty; // LHS is number
        ^

References:
   test.js:7:15
   7| function B(a: number) {
                    ^^^^^^ [1]
   test.js:9:9
   9|   a! as empty; // LHS is number
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:3

`a` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to values
with nullable types. [illegal-assert-operator]

   test.js:9:3
   9|   a! as empty; // LHS is number
        ^^

References:
   test.js:9:3
   9|   a! as empty; // LHS is number
        ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:14:3

Cannot cast `f()!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:14:3
   14|   f()! as empty; // LHS is number
         ^^^

References:
   test.js:12:21
   12| function C(f: () => number | null) {
                           ^^^^^^ [1]
   test.js:14:11
   14|   f()! as empty; // LHS is number
                 ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:15:3

`f` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to values
with nullable types. [illegal-assert-operator]

   test.js:15:3
   15|   f!() as number // LHS is ?number
         ^^

References:
   test.js:15:3
   15|   f!() as number // LHS is ?number
         ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:15:3

Cannot cast `(f!)()` to number because null [1] is incompatible with number [2]. [incompatible-type]

   test.js:15:3
   15|   f!() as number // LHS is ?number
         ^^^^

References:
   test.js:12:30
   12| function C(f: () => number | null) {
                                    ^^^^ [1]
   test.js:15:11
   15|   f!() as number // LHS is ?number
                 ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:20:3

Cannot cast `(g!)()` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:20:3
   20|   g!() as empty; // LHS is number
         ^^^^

References:
   test.js:18:29
   18| function D(g: null | (() => number)){
                                   ^^^^^^ [1]
   test.js:20:11
   20|   g!() as empty; // LHS is number
                 ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:21:3

Cannot call `g` because null [1] is not a function. [not-a-function]

   test.js:21:3
   21|   g()! // Calling null
         ^

References:
   test.js:18:15
   18| function D(g: null | (() => number)){
                     ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:26:3

Cannot cast `((a!).b()!).c!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:26:3
   26|   a!.b()!.c! as empty; // LHS is number
         ^^^^^^^^^

References:
   test.js:24:54
   24| function E(a: null | { b: (() => (null | { c: null | number }))}) {
                                                            ^^^^^^ [1]
   test.js:26:17
   26|   a!.b()!.c! as empty; // LHS is number
                       ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:30:3

Cannot cast `a?.b!.c` to number because undefined (result of null short-circuiting an optional chain) [1] is
incompatible with number [2]. [incompatible-type]

   test.js:30:3
   30|   a?.b!.c as number; // LHS is ?number
         ^

References:
   test.js:29:15
   29| function F(a: null | { b: null | { c: number }}) {
                     ^^^^ [1]
   test.js:30:14
   30|   a?.b!.c as number; // LHS is ?number
                    ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:32:3

Cannot cast `a?.b!.c!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:32:3
   32|   a?.b!.c! as empty; // LHS is number
         ^^^^^^^

References:
   test.js:29:39
   29| function F(a: null | { b: null | { c: number }}) {
                                             ^^^^^^ [1]
   test.js:32:15
   32|   a?.b!.c! as empty; // LHS is number
                     ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:34:3

Cannot cast `(a?.b!).c` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:34:3
   34|   (a?.b)!.c as empty; //LHS is number
         ^^^^^^^^^

References:
   test.js:29:39
   29| function F(a: null | { b: null | { c: number }}) {
                                             ^^^^^^ [1]
   test.js:34:16
   34|   (a?.b)!.c as empty; //LHS is number
                      ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:39:3

Cannot cast `((a!).b()!).c!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:39:3
   39|   a!.b()!.c! as empty; // LHS is number
         ^^^^^^^^^

References:
   test.js:37:54
   37| function G(a: null | { b: (() => (null | { c: null | number }))}) {
                                                            ^^^^^^ [1]
   test.js:39:17
   39|   a!.b()!.c! as empty; // LHS is number
                       ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:41:3

Cannot cast `((a!).b()!)['c']` to empty because null [1] is incompatible with empty [2]. [incompatible-type]

   test.js:41:3
   41|   a!.b()!['c'] as empty; // LHS is ?number
         ^^^^^^^^^^^^

References:
   test.js:37:47
   37| function G(a: null | { b: (() => (null | { c: null | number }))}) {
                                                     ^^^^ [1]
   test.js:41:19
   41|   a!.b()!['c'] as empty; // LHS is ?number
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:41:3

Cannot cast `((a!).b()!)['c']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:41:3
   41|   a!.b()!['c'] as empty; // LHS is ?number
         ^^^^^^^^^^^^

References:
   test.js:37:54
   37| function G(a: null | { b: (() => (null | { c: null | number }))}) {
                                                            ^^^^^^ [1]
   test.js:41:19
   41|   a!.b()!['c'] as empty; // LHS is ?number
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:42:3

Cannot cast `a?.b()!['c']` to number because undefined (result of null short-circuiting an optional chain) [1] is
incompatible with number [2]. [incompatible-type]

   test.js:42:3
   42|   a?.b()!['c'] as number; // LHS is ?number
         ^

References:
   test.js:37:15
   37| function G(a: null | { b: (() => (null | { c: null | number }))}) {
                     ^^^^ [1]
   test.js:42:19
   42|   a?.b()!['c'] as number; // LHS is ?number
                         ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:42:3

Cannot cast `a?.b()!['c']` to number because null [1] is incompatible with number [2]. [incompatible-type]

   test.js:42:3
   42|   a?.b()!['c'] as number; // LHS is ?number
         ^^^^^^^^^^^^

References:
   test.js:37:47
   37| function G(a: null | { b: (() => (null | { c: null | number }))}) {
                                                     ^^^^ [1]
   test.js:42:19
   42|   a?.b()!['c'] as number; // LHS is ?number
                         ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:44:3

Cannot cast `a?.b()!['c']!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:44:3
   44|   a?.b()!['c']! as empty; // LHS is number
         ^^^^^^^^^^^^

References:
   test.js:37:54
   37| function G(a: null | { b: (() => (null | { c: null | number }))}) {
                                                            ^^^^^^ [1]
   test.js:44:20
   44|   a?.b()!['c']! as empty; // LHS is number
                          ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:50:3

Cannot cast `(((a!).b!)()!).c!` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:50:3
   50|   a!.b!()!.c! as empty; // LHS is number
         ^^^^^^^^^^

References:
   test.js:48:59
   48| function H(a: null | { b: null | () => null | { c: null | number }}) {
                                                                 ^^^^^^ [1]
   test.js:50:18
   50|   a!.b!()!.c! as empty; // LHS is number
                        ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:54:3

Cannot cast `a?.b()!['c']` to number because undefined (result of null short-circuiting an optional chain) [1] is
incompatible with number [2]. [incompatible-type]

   test.js:54:3
   54|   a?.b()!['c'] as number; // LHS is ?number
         ^

References:
   test.js:53:15
   53| function I(a: null | { b: () => null | { c: number }}) {
                     ^^^^ [1]
   test.js:54:19
   54|   a?.b()!['c'] as number; // LHS is ?number
                         ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:56:3

Cannot cast `(a?.b()!)['c']` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:56:3
   56|   (a?.b())!['c'] as empty; // LHS is number
         ^^^^^^^^^^^^^^

References:
   test.js:53:45
   53| function I(a: null | { b: () => null | { c: number }}) {
                                                   ^^^^^^ [1]
   test.js:56:21
   56|   (a?.b())!['c'] as empty; // LHS is number
                           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:60:3

Cannot cast `a?.().b?.c` to number because undefined (result of null short-circuiting an optional chain) [1] is
incompatible with number [2]. [incompatible-type]

   test.js:60:3
   60|   a?.().b?.c as number // LHS is ?number from both nulls
         ^

References:
   test.js:59:15
   59| function J(a: null | (() => { b: null | { c: number }})) {
                     ^^^^ [1]
   test.js:60:17
   60|   a?.().b?.c as number // LHS is ?number from both nulls
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:60:3

Cannot cast `a?.().b?.c` to number because undefined (result of null short-circuiting an optional chain) [1] is
incompatible with number [2]. [incompatible-type]

   test.js:60:3
   60|   a?.().b?.c as number // LHS is ?number from both nulls
         ^^^^^^^

References:
   test.js:59:34
   59| function J(a: null | (() => { b: null | { c: number }})) {
                                        ^^^^ [1]
   test.js:60:17
   60|   a?.().b?.c as number // LHS is ?number from both nulls
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:61:3

Cannot cast `a?.().b!.c` to number because undefined (result of null short-circuiting an optional chain) [1] is
incompatible with number [2]. [incompatible-type]

   test.js:61:3
   61|   a?.().b!.c as number // LHS is ?number from only a's null
         ^

References:
   test.js:59:15
   59| function J(a: null | (() => { b: null | { c: number }})) {
                     ^^^^ [1]
   test.js:61:17
   61|   a?.().b!.c as number // LHS is ?number from only a's null
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:63:3

Cannot cast `(a?.().b!).c` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:63:3
   63|   (a?.().b)!.c as empty // LHS is number
         ^^^^^^^^^^^^

References:
   test.js:59:46
   59| function J(a: null | (() => { b: null | { c: number }})) {
                                                    ^^^^^^ [1]
   test.js:63:19
   63|   (a?.().b)!.c as empty // LHS is number
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:71:5

Cannot cast `(c!).#p` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:71:5
   71|     c!.#p as empty; // LHS is number
           ^^^^^

References:
   test.js:67:7
   67|   #p: number = 42;
             ^^^^^^ [1]
   test.js:71:14
   71|     c!.#p as empty; // LHS is number
                    ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:76:10

Cannot assign `1` to `x.a!` because number [1] is incompatible with object type [2]. [incompatible-type]

   test.js:76:10
   76|   x.a! = 1; // error
                ^ [1]

References:
   test.js:75:20
   75| function L(x: {a?: { b?: number }, c: { d?: number, e?: number, f?: number }}) {
                          ^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:78:3

`x.a` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   test.js:78:3
   78|   x.a!.b = 42; // ok
         ^^^^

References:
   test.js:78:3
   78|   x.a!.b = 42; // ok
         ^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:79:3

`x.a` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   test.js:79:3
   79|   x.a!.b = "43"; // error
         ^^^^

References:
   test.js:79:3
   79|   x.a!.b = "43"; // error
         ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:79:12

Cannot assign `"43"` to `(x.a!).b` because string [1] is incompatible with number [2]. [incompatible-type]

   test.js:79:12
   79|   x.a!.b = "43"; // error
                  ^^^^ [1]

References:
   test.js:77:22
   77|   x.a! = ({} as {b?: number}); // ok
                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:80:5

Cannot get `x.f` because property `f` is missing in object type [1]. [prop-missing]

   test.js:80:5
   80|   x.f.d += 42; // error addition
           ^

References:
   test.js:75:15
   75| function L(x: {a?: { b?: number }, c: { d?: number, e?: number, f?: number }}) {
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:80:7

Cannot get `x.f.d` because property `d` is missing in `void` (due to access of non-existent property `f`) [1].
[incompatible-use]

   test.js:80:7
   80|   x.f.d += 42; // error addition
             ^

References:
   test.js:80:3
   80|   x.f.d += 42; // error addition
         ^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:80:7

Cannot update `x.f.d` because property `d` is missing in `void` (due to access of non-existent property `f`) [1].
[incompatible-use]

   test.js:80:7
   80|   x.f.d += 42; // error addition
             ^

References:
   test.js:80:3
   80|   x.f.d += 42; // error addition
         ^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:82:4

`x.c.d` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   test.js:82:4
   82|   (x.c.d! += 42) as empty; // LHS is number
          ^^^^^^

References:
   test.js:82:4
   82|   (x.c.d! += 42) as empty; // LHS is number
          ^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:82:4

Cannot cast `x.c.d! += 42` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   test.js:82:4
   82|   (x.c.d! += 42) as empty; // LHS is number
          ^^^^^

References:
   test.js:81:4
   81|   (x.c.d! += 42) as number; // ok
          ^^^^^^^^^^^^ [1]
   test.js:82:21
   82|   (x.c.d! += 42) as empty; // LHS is number
                           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:83:3

Cannot use operator `+=` with operands number [1] and boolean literal `false` [2] [unsafe-addition]

   test.js:83:3
   83|   x.c.e! += false; // incompatible operation
         ^^^^^^^^^^^^^^^

References:
   test.js:75:57
   75| function L(x: {a?: { b?: number }, c: { d?: number, e?: number, f?: number }}) {
                                                               ^^^^^^ [1]
   test.js:83:13
   83|   x.c.e! += false; // incompatible operation
                   ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:88:3

Cannot use operator `+=` with operands null [1] and number literal `10` [2] [unsafe-addition]

   test.js:88:3
   88|   y += 10; // error
         ^^^^^^^

References:
   test.js:86:15
   86| function M(x: null | number) {
                     ^^^^ [1]
   test.js:88:8
   88|   y += 10; // error
              ^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:92:3

Cannot use operator `+=` with operands number [1] and boolean literal `false` [2] [unsafe-addition]

   test.js:92:3
   92|   w! += false; // error incompatible
         ^^^^^^^^^^^

References:
   test.js:86:22
   86| function M(x: null | number) {
                            ^^^^^^ [1]
   test.js:92:9
   92|   w! += false; // error incompatible
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- useful_check.js:2:1

`x` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to values
with nullable types. [illegal-assert-operator]

   useful_check.js:2:1
   2| x!; // error
      ^^

References:
   useful_check.js:2:1
   2| x!; // error
      ^ [1]


Error ---------------------------------------------------------------------------------------------- useful_check.js:3:1

`x` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to values
with nullable types. [illegal-assert-operator]

   useful_check.js:3:1
   3| x! = 42; // error
      ^^

References:
   useful_check.js:3:1
   3| x! = 42; // error
      ^ [1]


Error ---------------------------------------------------------------------------------------------- useful_check.js:4:1

`x + 20` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   useful_check.js:4:1
   4| (x + 20)!; // error;
      ^^^^^^^^^

References:
   useful_check.js:4:2
   4| (x + 20)!; // error;
       ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- useful_check.js:7:1

`y` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to values
with nullable types. [illegal-assert-operator]

   useful_check.js:7:1
   7| y!; // error;
      ^^

References:
   useful_check.js:7:1
   7| y!; // error;
      ^ [1]


Error ---------------------------------------------------------------------------------------------- useful_check.js:8:1

`y.a` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   useful_check.js:8:1
   8| y.a!; // error;
      ^^^^

References:
   useful_check.js:8:1
   8| y.a!; // error;
      ^^^ [1]


Error --------------------------------------------------------------------------------------------- useful_check.js:10:1

`y.a` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   useful_check.js:10:1
   10| y.a!.b; // error
       ^^^^

References:
   useful_check.js:10:1
   10| y.a!.b; // error
       ^^^ [1]


Error --------------------------------------------------------------------------------------------- useful_check.js:23:1

`a3[0]` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   useful_check.js:23:1
   23| a3[0]!; // error
       ^^^^^^

References:
   useful_check.js:23:1
   23| a3[0]!; // error
       ^^^^^ [1]


Error --------------------------------------------------------------------------------------------- useful_check.js:26:1

`o2.e` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   useful_check.js:26:1
   26| o2.e!; // error
       ^^^^^

References:
   useful_check.js:26:1
   26| o2.e!; // error
       ^^^^ [1]


Error --------------------------------------------------------------------------------------------- useful_check.js:27:1

`o3.e` [1] is not a valid target of the nonnull assertion operator (`!`). The assert operator can only be applied to
values with nullable types. [illegal-assert-operator]

   useful_check.js:27:1
   27| o3.e!; // error
       ^^^^^

References:
   useful_check.js:27:1
   27| o3.e!; // error
       ^^^^ [1]



Found 48 errors
