Error ------------------------------------------------------------------------------------------ <BUILTINS>/core.js:90:3

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   90| | $ReadOnlyArray<mixed>
         ^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:727:35

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   727|     concat<S = T>(...items: Array<$ReadOnlyArray<S> | S>): Array<T | S>;
                                          ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:740:75

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   740|     every<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): boolean;
                                                                                  ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:752:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   752|     filter<This, S: T>(callbackfn: (this: This, value: T, index: number, array: $ReadOnlyArray<T>) => implies value is S, thisArg: This): Array<S>;
                                                                                        ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:758:76

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   758|     filter<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg : This): Array<T>;
                                                                                   ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:768:80

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   768|     find<This, S: T>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => implies value is S, thisArg: This): S | void;
                                                                                       ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:778:74

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   778|     find<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): T | void;
                                                                                 ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:788:79

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   788|     findIndex<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): number;
                                                                                      ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:798:78

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   798|     findLast<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): T | void;
                                                                                     ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:808:83

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   808|     findLastIndex<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): number;
                                                                                          ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:814:77

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   814|     forEach<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): void;
                                                                                    ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:847:76

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   847|     map<U, This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => U, thisArg: This): Array<U>;
                                                                                   ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:858:80

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   858|     flatMap<U, This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => $ReadOnlyArray<U> | U, thisArg: This): Array<U>;
                                                                                       ^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:858:102

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   858|     flatMap<U, This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => $ReadOnlyArray<U> | U, thisArg: This): Array<U>;
                                                                                                             ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:872:44

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   872|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                                   ^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:885:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   885|       callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => T,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:893:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   893|       callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => U,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:901:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   901|       callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => T,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:909:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   909|       callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => U,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:926:74

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   926|     some<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): boolean;
                                                                                 ^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1013:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1013|     filter<This, S: T>(callbackfn: (this: This, value: T, index: number, array: $ReadOnlyArray<T>) => implies value is S, thisArg: This): Array<S>;
                                                                                         ^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1072:93

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1072|     flatMap<U, This>(callbackfn: (this : This, value: T, index: number, array: Array<T>) => $ReadOnlyArray<U> | U, thisArg: This): Array<U>;
                                                                                                     ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:1192:9

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1192|   +raw: $ReadOnlyArray<string>;
                 ^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1454:45

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1454|     static raw: (callSite: interface {+raw: $ReadOnlyArray<string>}, ...substitutions: $ReadOnlyArray<mixed>) => string;
                                                     ^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1454:88

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1454|     static raw: (callSite: interface {+raw: $ReadOnlyArray<string>}, ...substitutions: $ReadOnlyArray<mixed>) => string;
                                                                                                ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1792:66

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1792|         value: null | string | number | boolean | interface {} | $ReadOnlyArray<mixed>,
                                                                          ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2036:43

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2036| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2250:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2250|       T extends $ReadOnlyArray<mixed> ? {[K in keyof T]: Awaited<T[K]>} :
                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2260:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2260|       T extends $ReadOnlyArray<mixed> ? {[K in keyof T]: $SettledPromiseResult<Awaited<T[K]>>} :
                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2771:45

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2771| declare function queueMicrotask<TArguments: $ReadOnlyArray<mixed>>(
                                                     ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2996:70

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2996|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                                              ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3025:31

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3025| type ReturnType<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3025:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3025| type ReturnType<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                                                                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3026:23

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3026|   T extends (...args: $ReadOnlyArray<empty>) => infer Return ? Return :
                               ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3027:28

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3027|   T extends hook (...args: $ReadOnlyArray<empty>) => infer Return ? Return : any;
                                    ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3030:31

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3030| type Parameters<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3030:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3030| type Parameters<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                                                                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3113:47

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3113| type Object$Assign = (target: any, ...source: $ReadOnlyArray<any>) => any;
                                                       ^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:146:28

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   146|   type ChildrenArray<+T> = $ReadOnlyArray<ChildrenArray<T>> | T;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:167:18

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   167|     ...children: $ReadOnlyArray<React$Node>
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:837:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   837|       inputs?: ?$ReadOnlyArray<mixed>,
                        ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:850:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   850|       inputs?: ?$ReadOnlyArray<mixed>,
                        ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:859:43

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   859|     declare hook useCallback<T: (...args: $ReadOnlyArray<empty>) => mixed>(
                                                  ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:861:16

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   861|       inputs: ?$ReadOnlyArray<mixed>,
                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:872:16

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   872|       inputs: ?$ReadOnlyArray<mixed>,
                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:884:16

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   884|       inputs: ?$ReadOnlyArray<mixed>,
                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:930:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   930|       inputs?: ?$ReadOnlyArray<mixed>,
                        ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:997:30

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   997|     type ChildrenArray<+T> = $ReadOnlyArray<ChildrenArray<T>> | T;
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------- deprecated/nonMaybeType.js:1:10

The utility type `$NonMaybeType` is deprecated, use `NonNullable` instead. [deprecated-utility]

   1| type T = $NonMaybeType<?number>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------- deprecated/readonly.js:1:10

The utility type `$ReadOnly` is deprecated, use `Readonly` instead. [deprecated-utility]

   1| type T = $ReadOnly<{a: string}>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------- deprecated/readonly_type.js:1:10

The utility type `$ReadOnly` is deprecated, use `Readonly` instead. [deprecated-utility]

   1| type A = $ReadOnly<[string, number]>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------- deprecated/readonly_type.js:2:10

The utility type `$ReadOnly` is deprecated, use `Readonly` instead. [deprecated-utility]

   2| type B = $ReadOnly<[number]>; // ERROR
               ^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------- deprecated/readonlyarray.js:1:10

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1| type T = $ReadOnlyArray<number>; // error
               ^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------- deprecated/readonlymap.js:1:10

The utility type `$ReadOnlyMap` is deprecated, use `ReadonlyMap` instead. [deprecated-utility]

   1| type T = $ReadOnlyMap<string, number>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------- deprecated/readonlymap.js:2:14

Cannot assign `3` to `x` because number [1] is incompatible with `$ReadOnlyMap` [2]. [incompatible-type]

   deprecated/readonlymap.js:2:14
   2| const x: T = 3; // ERROR
                   ^ [1]

References:
   deprecated/readonlymap.js:2:10
   2| const x: T = 3; // ERROR
               ^ [2]


Error ----------------------------------------------------------------------------------- deprecated/readonlyset.js:1:10

The utility type `$ReadOnlySet` is deprecated, use `ReadonlySet` instead. [deprecated-utility]

   1| type T = $ReadOnlySet<number>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- deprecated/unknown.js:1:10

The utility type `mixed` is deprecated, use `unknown` instead. [deprecated-utility]

   1| type T = mixed; // ERROR
               ^^^^^


Error --------------------------------------------------------------------------------------- deprecated/unknown.js:3:10

The utility type `mixed` is deprecated, use `unknown` instead. [deprecated-utility]

   3| const x: mixed = 1; // ERROR
               ^^^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:1:20

The equivalent of TypeScript's `in` variance annotation is `-` in Flow. [ts-syntax]

   1| declare function f<in A>(A): void; // ERROR
                         ^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:1:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   1| declare function f<in A>(A): void; // ERROR
                         ^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:2:20

The equivalent of TypeScript's `out` variance annotation is `+` in Flow. [ts-syntax]

   2| declare function f<out A>(): A; // ERROR
                         ^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:2:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   2| declare function f<out A>(): A; // ERROR
                         ^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:3:20

The equivalent of TypeScript's `in out` variance annotation in Flow is to simply leave it out - it's the default if you
don't have a variance annotation. [ts-syntax]

   3| declare function f<in out A>(A): A; // ERROR
                         ^^^^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:3:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   3| declare function f<in out A>(A): A; // ERROR
                         ^^^^^^


Error ---------------------------------------------------------------------------------------------------- keyof.js:3:10

`keyof` is only supported when used inline in a mapped type. The equivalent of TypeScript's `keyof` type operator in
Flow is the `$Keys` utility type, used in the form `$Keys<T>`. [ts-syntax]

   3| type T = keyof O; // ERROR
               ^^^^^^^


Error ---------------------------------------------------------------------------------------------------- never.js:1:10

The closest equivalent of TypeScript's `never` type in Flow is `empty`. [ts-syntax]

   1| type T = never; // ERROR
               ^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:1:10

The equivalent of TypeScript's `readonly` type operator applied to a tuple type is `$ReadOnly<[T, S]>`. [ts-syntax]

   1| type A = readonly [string, number]; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:2:10

The equivalent of TypeScript's `readonly` type operator applied to an array type is `$ReadOnlyArray<T>`. [ts-syntax]

   2| type B = readonly string[]; // ERROR
               ^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:3:10

TypeScript's `readonly` type operator is not valid in Flow. For array types, you can use `$ReadOnlyArray<T>`. For object
and tuple types you can use `$ReadOnly<T>`. [ts-syntax]

   3| type C = readonly number; // ERROR
               ^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------- readonly_variance.js:2:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   2|   readonly foo: string, // ERROR
        ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:11:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   11|   readonly [string]: mixed; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:15:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   15|   readonly prop: string; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:19:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   19|   readonly prop: string; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------------- readonlymap.js:2:14

Cannot assign `3` to `x` because number [1] is incompatible with `$ReadOnlyMap` [2]. [incompatible-type]

   readonlymap.js:2:14
   2| const x: T = 3; // ERROR
                   ^ [1]

References:
   readonlymap.js:2:10
   2| const x: T = 3; // ERROR
               ^ [2]


Error ------------------------------------------------------------------------------------------------ satisfies.js:4:18

Cannot build a typed interface for this module. You should annotate the exports of this module with types. Cannot
determine the type of this satisfies expression. Please provide an annotation, e.g., by adding a type cast around this
expression. [signature-verification-failure]

   4| export const a = m satisfies T; // ERROR
                       ^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ satisfies.js:4:18

The closest equivalent of TypeScript's `satisfies` expression in Flow is to do a cast in the form `<expr> as <type>`.
[ts-syntax]

   4| export const a = m satisfies T; // ERROR
                       ^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:1:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   1| type A<T extends string> = [T];
             ^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:2:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   2| type B<+T extends string> = [T];
             ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:3:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   3| type C<T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:4:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   4| type D<+T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ undefined.js:1:10

The equivalent of TypeScript's `undefined` type in Flow is `void`. Flow does not have separate `void` and `undefined`
types. [ts-syntax]

   1| type T = undefined; // ERROR
               ^^^^^^^^^



Found 81 errors
