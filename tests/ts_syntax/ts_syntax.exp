Error ------------------------------------------------------------------------------------------ <BUILTINS>/core.js:90:3

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   90| | $ReadOnlyArray<mixed>
         ^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:739:35

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   739|     concat<S = T>(...items: Array<$ReadOnlyArray<S> | S>): Array<T | S>;
                                          ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:752:75

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   752|     every<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): boolean;
                                                                                  ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:764:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   764|     filter<This, S: T>(callbackfn: (this: This, value: T, index: number, array: $ReadOnlyArray<T>) => implies value is S, thisArg: This): Array<S>;
                                                                                        ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:770:76

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   770|     filter<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg : This): Array<T>;
                                                                                   ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:780:80

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   780|     find<This, S: T>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => implies value is S, thisArg: This): S | void;
                                                                                       ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:790:74

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   790|     find<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): T | void;
                                                                                 ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:800:79

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   800|     findIndex<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): number;
                                                                                      ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:810:78

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   810|     findLast<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): T | void;
                                                                                     ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:820:83

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   820|     findLastIndex<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): number;
                                                                                          ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:826:77

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   826|     forEach<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): void;
                                                                                    ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:859:76

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   859|     map<U, This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => U, thisArg: This): Array<U>;
                                                                                   ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:870:80

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   870|     flatMap<U, This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => $ReadOnlyArray<U> | U, thisArg: This): Array<U>;
                                                                                       ^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:870:102

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   870|     flatMap<U, This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => $ReadOnlyArray<U> | U, thisArg: This): Array<U>;
                                                                                                             ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:884:44

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   884|     flat(depth: void | 1): Array<T extends $ReadOnlyArray<infer E> ? E : T>;
                                                   ^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:897:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   897|       callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => T,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:905:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   905|       callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => U,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:913:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   913|       callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => T,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:921:84

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   921|       callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: $ReadOnlyArray<T>) => U,
                                                                                           ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:938:74

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   938|     some<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): boolean;
                                                                                 ^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1025:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1025|     filter<This, S: T>(callbackfn: (this: This, value: T, index: number, array: $ReadOnlyArray<T>) => implies value is S, thisArg: This): Array<S>;
                                                                                         ^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1084:93

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1084|     flatMap<U, This>(callbackfn: (this : This, value: T, index: number, array: Array<T>) => $ReadOnlyArray<U> | U, thisArg: This): Array<U>;
                                                                                                     ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- <BUILTINS>/core.js:1204:9

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1204|   +raw: $ReadOnlyArray<string>;
                 ^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1466:45

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1466|     static raw: (callSite: interface {+raw: $ReadOnlyArray<string>}, ...substitutions: $ReadOnlyArray<mixed>) => string;
                                                     ^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1466:88

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1466|     static raw: (callSite: interface {+raw: $ReadOnlyArray<string>}, ...substitutions: $ReadOnlyArray<mixed>) => string;
                                                                                                ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:1804:66

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1804|         value: null | string | number | boolean | interface {} | $ReadOnlyArray<mixed>,
                                                                          ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2048:43

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2048| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2262:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2262|       T extends $ReadOnlyArray<mixed> ? {[K in keyof T]: Awaited<T[K]>} :
                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2272:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2272|       T extends $ReadOnlyArray<mixed> ? {[K in keyof T]: $SettledPromiseResult<Awaited<T[K]>>} :
                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:2783:45

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   2783| declare function queueMicrotask<TArguments: $ReadOnlyArray<mixed>>(
                                                     ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3008:70

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3008|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                                              ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3037:31

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3037| type ReturnType<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3037:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3037| type ReturnType<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                                                                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3038:23

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3038|   T extends (...args: $ReadOnlyArray<empty>) => infer Return ? Return :
                               ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3039:28

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3039|   T extends hook (...args: $ReadOnlyArray<empty>) => infer Return ? Return : any;
                                    ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3042:31

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3042| type Parameters<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3042:81

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3042| type Parameters<T: ((...args: $ReadOnlyArray<empty>) => mixed) | hook (...args: $ReadOnlyArray<empty>) => mixed> =
                                                                                         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/core.js:3125:47

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3125| type Object$Assign = (target: any, ...source: $ReadOnlyArray<any>) => any;
                                                       ^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:136:28

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   136|   type ChildrenArray<+T> = $ReadOnlyArray<ChildrenArray<T>> | T;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:157:18

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   157|     ...children: $ReadOnlyArray<React$Node>
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:875:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   875|       inputs?: ?$ReadOnlyArray<mixed>,
                        ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:896:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   896|       inputs?: ?$ReadOnlyArray<mixed>,
                        ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:905:43

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   905|     declare hook useCallback<T: (...args: $ReadOnlyArray<empty>) => mixed>(
                                                  ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:907:16

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   907|       inputs: ?$ReadOnlyArray<mixed>,
                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:918:16

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   918|       inputs: ?$ReadOnlyArray<mixed>,
                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:930:16

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   930|       inputs: ?$ReadOnlyArray<mixed>,
                       ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- <BUILTINS>/react.js:976:17

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   976|       inputs?: ?$ReadOnlyArray<mixed>,
                        ^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------- <BUILTINS>/react.js:1042:30

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1042|     type ChildrenArray<+T> = $ReadOnlyArray<ChildrenArray<T>> | T;
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------- deprecated/keyof.js:3:10

The utility type `$Keys` is deprecated, use `keyof` instead. For example, `type KeyType = keyof MyObjectType;` 
[deprecated-utility]

   3| type T = $Keys<O>; // ERROR
               ^^^^^^^^


Error ---------------------------------------------------------------------------------- deprecated/nonMaybeType.js:1:10

The utility type `$NonMaybeType` is deprecated, use `NonNullable` instead. [deprecated-utility]

   1| type T = $NonMaybeType<?number>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------- deprecated/readonly.js:1:10

The utility type `$ReadOnly` is deprecated, use `Readonly` instead. [deprecated-utility]

   1| type T = $ReadOnly<{a: string}>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------- deprecated/readonly.js:7:23

Cannot assign object literal to `a` because property `b` is extra in object literal [1] but missing in object type [2].
Exact objects do not accept extra props. [incompatible-type]

   deprecated/readonly.js:7:23
   7| let a: exportedType = {b: 1}; // ERROR
                            ^^^^^^ [1]

References:
   deprecated/readonly.js:7:8
   7| let a: exportedType = {b: 1}; // ERROR
             ^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------- deprecated/readonly_type.js:3:10

The utility type `$ReadOnly` is deprecated, use `Readonly` instead. [deprecated-utility]

   3| type A = $ReadOnly<[string, number]>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------- deprecated/readonly_type.js:4:10

The utility type `$ReadOnly` is deprecated, use `Readonly` instead. [deprecated-utility]

   4| type B = $ReadOnly<[number]>; // ERROR
               ^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------- deprecated/readonly_type.js:6:23

Cannot assign object literal to `a` because property `b` is extra in object literal [1] but missing in
`exportedType` [2]. Exact objects do not accept extra props. [incompatible-type]

   deprecated/readonly_type.js:6:23
   6| let a: exportedType = {b: 1}; // ERROR
                            ^^^^^^ [1]

References:
   deprecated/readonly_type.js:6:8
   6| let a: exportedType = {b: 1}; // ERROR
             ^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- deprecated/readonly_type.js:10:29

Cannot assign `3` to `b` because number [1] is incompatible with `exportedValuesType` [2]. [incompatible-type]

   deprecated/readonly_type.js:10:29
   10| let b: exportedValuesType = 3; // ERROR
                                   ^ [1]

References:
   deprecated/readonly_type.js:10:8
   10| let b: exportedValuesType = 3; // ERROR
              ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------- deprecated/readonlyarray.js:1:10

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   1| type T = $ReadOnlyArray<number>; // error
               ^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------- deprecated/readonlymap.js:1:10

The utility type `$ReadOnlyMap` is deprecated, use `ReadonlyMap` instead. [deprecated-utility]

   1| type T = $ReadOnlyMap<string, number>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------- deprecated/readonlymap.js:2:14

Cannot assign `3` to `x` because number [1] is incompatible with `$ReadOnlyMap` [2]. [incompatible-type]

   deprecated/readonlymap.js:2:14
   2| const x: T = 3; // ERROR
                   ^ [1]

References:
   deprecated/readonlymap.js:2:10
   2| const x: T = 3; // ERROR
               ^ [2]


Error ----------------------------------------------------------------------------------- deprecated/readonlyset.js:1:10

The utility type `$ReadOnlySet` is deprecated, use `ReadonlySet` instead. [deprecated-utility]

   1| type T = $ReadOnlySet<number>; // ERROR
               ^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- deprecated/unknown.js:1:10

The utility type `mixed` is deprecated, use `unknown` instead. [deprecated-utility]

   1| type T = mixed; // ERROR
               ^^^^^


Error --------------------------------------------------------------------------------------- deprecated/unknown.js:3:10

The utility type `mixed` is deprecated, use `unknown` instead. [deprecated-utility]

   3| const x: mixed = 1; // ERROR
               ^^^^^


Error --------------------------------------------------------------------------------------- deprecated/unknown.js:9:15

The utility type `mixed` is deprecated, use `unknown` instead. [deprecated-utility]

   9|     catch (e: mixed) {} // ERROR
                    ^^^^^


Error ---------------------------------------------------------------------------------------- deprecated/values.js:3:11

The utility type `$Values` is deprecated, use `Values` instead. [deprecated-utility]

   3| type T1 = $Values<O>; // ERROR
                ^^^^^^^^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:1:20

The equivalent of TypeScript's `in` variance annotation is `-` in Flow. [ts-syntax]

   1| declare function f<in A>(A): void; // ERROR
                         ^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:1:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   1| declare function f<in A>(A): void; // ERROR
                         ^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:2:20

The equivalent of TypeScript's `out` variance annotation is `+` in Flow. [ts-syntax]

   2| declare function f<out A>(): A; // ERROR
                         ^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:2:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   2| declare function f<out A>(): A; // ERROR
                         ^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:3:20

The equivalent of TypeScript's `in out` variance annotation in Flow is to simply leave it out - it's the default if you
don't have a variance annotation. [ts-syntax]

   3| declare function f<in out A>(A): A; // ERROR
                         ^^^^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:3:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   3| declare function f<in out A>(A): A; // ERROR
                         ^^^^^^


Error ---------------------------------------------------------------------------------------------------- never.js:1:10

The closest equivalent of TypeScript's `never` type in Flow is `empty`. [ts-syntax]

   1| type T = never; // ERROR
               ^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:1:10

The equivalent of TypeScript's `readonly` type operator applied to a tuple type is `$ReadOnly<[T, S]>`. [ts-syntax]

   1| type A = readonly [string, number]; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:2:10

The equivalent of TypeScript's `readonly` type operator applied to an array type is `$ReadOnlyArray<T>`. [ts-syntax]

   2| type B = readonly string[]; // ERROR
               ^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:3:10

TypeScript's `readonly` type operator is not valid in Flow. For array types, you can use `$ReadOnlyArray<T>`. For object
and tuple types you can use `$ReadOnly<T>`. [ts-syntax]

   3| type C = readonly number; // ERROR
               ^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------- readonly_variance.js:2:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   2|   readonly foo: string, // ERROR
        ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:11:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   11|   readonly [string]: mixed; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:15:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   15|   readonly prop: string; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:19:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   19|   readonly prop: string; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------------- readonlymap.js:2:14

Cannot assign `3` to `x` because number [1] is incompatible with `$ReadOnlyMap` [2]. [incompatible-type]

   readonlymap.js:2:14
   2| const x: T = 3; // ERROR
                   ^ [1]

References:
   readonlymap.js:2:10
   2| const x: T = 3; // ERROR
               ^ [2]


Error ------------------------------------------------------------------------------------ reserved_core_js_type.js:2:19

Cannot declare `$ReadOnlyMap` [1] because the name is a core builtin type. [name-already-bound]

   2|     declare class $ReadOnlyMap {}
                        ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ reserved_core_js_type.js:3:19

Cannot declare `$ReadOnlySet` [1] because the name is a core builtin type. [name-already-bound]

   3|     declare class $ReadOnlySet {}
                        ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ reserved_core_js_type.js:4:19

Cannot declare `ReadonlyMap` [1] because the name is a core builtin type. [name-already-bound]

   4|     declare class ReadonlyMap {}
                        ^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ reserved_core_js_type.js:5:19

Cannot declare `ReadonlySet` [1] because the name is a core builtin type. [name-already-bound]

   5|     declare class ReadonlySet {}
                        ^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ reserved_core_js_type.js:9:11

Cannot declare `$ReadOnlyMap` [1] because the name is a core builtin type. [name-already-bound]

   9|     class $ReadOnlyMap {}
                ^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- reserved_core_js_type.js:10:11

Cannot declare `$ReadOnlySet` [1] because the name is a core builtin type. [name-already-bound]

   10|     class $ReadOnlySet {}
                 ^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- reserved_core_js_type.js:11:11

Cannot declare `ReadonlyMap` [1] because the name is a core builtin type. [name-already-bound]

   11|     class ReadonlyMap {}
                 ^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- reserved_core_js_type.js:12:11

Cannot declare `ReadonlySet` [1] because the name is a core builtin type. [name-already-bound]

   12|     class ReadonlySet {}
                 ^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- reserved_type.js:2:9

Cannot declare `$NonMaybeType` [1], because `$NonMaybeType` is a reserved type name. [reserved-keyword]

   2|    type $NonMaybeType = string | number;
              ^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- reserved_type.js:3:9

Cannot declare `NonNullable` [1], because `NonNullable` is a reserved type name. [reserved-keyword]

   3|    type NonNullable = number;
              ^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- reserved_type.js:4:9

Cannot declare `$ReadOnly` [1], because `$ReadOnly` is a reserved type name. [reserved-keyword]

   4|    type $ReadOnly = string;
              ^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- reserved_type.js:5:9

Cannot declare `Readonly` [1], because `Readonly` is a reserved type name. [reserved-keyword]

   5|    type Readonly = string;
              ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- reserved_type.js:6:9

Cannot declare `$Keys` [1], because `$Keys` is a reserved type name. [reserved-keyword]

   6|    type $Keys = string;
              ^^^^^ [1]


Error --------------------------------------------------------------------------------------------- reserved_type.js:7:9

Cannot declare `$Values` [1], because `$Values` is a reserved type name. [reserved-keyword]

   7|    type $Values<T> = Array<T>;
              ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- reserved_type.js:8:9

Cannot declare `Values` [1], because `Values` is a reserved type name. [reserved-keyword]

   8|    type Values = Array<string>;
              ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:11:17

Cannot declare `$NonMaybeType` [1], because `$NonMaybeType` is a reserved type name. [reserved-keyword]

   11|    declare type $NonMaybeType = string | number;
                       ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:12:17

Cannot declare `NonNullable` [1], because `NonNullable` is a reserved type name. [reserved-keyword]

   12|    declare type NonNullable = number;
                       ^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:13:17

Cannot declare `$ReadOnly` [1], because `$ReadOnly` is a reserved type name. [reserved-keyword]

   13|    declare type $ReadOnly = string;
                       ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:14:17

Cannot declare `Readonly` [1], because `Readonly` is a reserved type name. [reserved-keyword]

   14|    declare type Readonly = string;
                       ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:15:17

Cannot declare `$Keys` [1], because `$Keys` is a reserved type name. [reserved-keyword]

   15|    declare type $Keys = string;
                       ^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:16:17

Cannot declare `$Values` [1], because `$Values` is a reserved type name. [reserved-keyword]

   16|    declare type $Values<T> = Array<T>;
                       ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:17:17

Cannot declare `Values` [1], because `Values` is a reserved type name. [reserved-keyword]

   17|    declare type Values = Array<string>;
                       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:21:18

Cannot declare `$NonMaybeType` [1], because `$NonMaybeType` is a reserved type name. [reserved-keyword]

   21|    declare class $NonMaybeType {}
                        ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:22:18

Cannot declare `NonNullable` [1], because `NonNullable` is a reserved type name. [reserved-keyword]

   22|    declare class NonNullable {}
                        ^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:23:18

Cannot declare `$ReadOnly` [1], because `$ReadOnly` is a reserved type name. [reserved-keyword]

   23|    declare class $ReadOnly {}
                        ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:24:18

Cannot declare `Readonly` [1], because `Readonly` is a reserved type name. [reserved-keyword]

   24|    declare class Readonly {}
                        ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:25:18

Cannot declare `$Keys` [1], because `$Keys` is a reserved type name. [reserved-keyword]

   25|    declare class $Keys<TT> {}
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:26:18

Cannot declare `$Values` [1], because `$Values` is a reserved type name. [reserved-keyword]

   26|    declare class $Values<T> {}
                        ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:27:18

Cannot declare `Values` [1], because `Values` is a reserved type name. [reserved-keyword]

   27|    declare class Values {}
                        ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:31:10

Cannot declare `$NonMaybeType` [1], because `$NonMaybeType` is a reserved type name. [reserved-keyword]

   31|    class $NonMaybeType {}
                ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:32:10

Cannot declare `NonNullable` [1], because `NonNullable` is a reserved type name. [reserved-keyword]

   32|    class NonNullable {}
                ^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:33:10

Cannot declare `$ReadOnly` [1], because `$ReadOnly` is a reserved type name. [reserved-keyword]

   33|    class $ReadOnly {}
                ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:34:10

Cannot declare `Readonly` [1], because `Readonly` is a reserved type name. [reserved-keyword]

   34|    class Readonly {}
                ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:35:10

Cannot declare `$Keys` [1], because `$Keys` is a reserved type name. [reserved-keyword]

   35|    class $Keys<TT> {}
                ^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:36:10

Cannot declare `$Values` [1], because `$Values` is a reserved type name. [reserved-keyword]

   36|    class $Values<T> {}
                ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- reserved_type.js:37:10

Cannot declare `Values` [1], because `Values` is a reserved type name. [reserved-keyword]

   37|    class Values {}
                ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ satisfies.js:4:18

Cannot build a typed interface for this module. You should annotate the exports of this module with types. Cannot
determine the type of this satisfies expression. Please provide an annotation, e.g., by adding a type cast around this
expression. [signature-verification-failure]

   4| export const a = m satisfies T; // ERROR
                       ^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ satisfies.js:4:18

The closest equivalent of TypeScript's `satisfies` expression in Flow is to do a cast in the form `<expr> as <type>`.
[ts-syntax]

   4| export const a = m satisfies T; // ERROR
                       ^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:1:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   1| type A<T extends string> = [T];
             ^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:2:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   2| type B<+T extends string> = [T];
             ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:3:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   3| type C<T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:4:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   4| type D<+T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ undefined.js:1:10

The equivalent of TypeScript's `undefined` type in Flow is `void`. Flow does not have separate `void` and `undefined`
types. [ts-syntax]

   1| type T = undefined; // ERROR
               ^^^^^^^^^



Found 122 errors
