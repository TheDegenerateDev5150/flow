Error --------------------------------------------------------------------------------------------- compatibility.js:3:9

Cannot assign `y` to `x` because property `bar` is missing in object type [1] but exists in object type [2] in property
`x`. [incompatible-type]

   compatibility.js:3:9
   3|     x = y; // 2 errors: `foo` not found in y.x; `bar` not found in x.x
              ^

References:
   compatibility.js:2:20
   2|   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                         ^^^^^^^^^^^^^^^ [1]
   compatibility.js:2:47
   2|   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                                                    ^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- compatibility.js:3:9

Cannot assign `y` to `x` because property `foo` is missing in object type [1] but exists in object type [2] in property
`x`. [incompatible-type]

   compatibility.js:3:9
   3|     x = y; // 2 errors: `foo` not found in y.x; `bar` not found in x.x
              ^

References:
   compatibility.js:2:47
   2|   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                                                    ^^^^^^^^^^^^^^^ [1]
   compatibility.js:2:20
   2|   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                         ^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- compatibility.js:7:9

Cannot assign `y` to `x` because number [1] is incompatible with string [2] in property `foo`. [incompatible-type]

   compatibility.js:7:9
   7|     x = y; // 2 errors: string !~> number; number !~> string
              ^

References:
   compatibility.js:6:42
   6|   function(x: { foo: string }, y: { foo: number }) {
                                               ^^^^^^ [1]
   compatibility.js:6:22
   6|   function(x: { foo: string }, y: { foo: number }) {
                           ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- compatibility.js:11:9

Cannot assign `y` to `x` because number [1] is incompatible with string [2] in property `x.foo`. [incompatible-type]

   compatibility.js:11:9
   11|     x = y; // 2 errors: string !~> number; number !~> string
               ^

References:
   compatibility.js:10:54
   10|   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                                            ^^^^^^ [1]
   compatibility.js:10:27
   10|   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- compatibility.js:15:9

Cannot assign `y` to `x` because number [1] is incompatible with string [2] in property `foo`. [incompatible-type]

   compatibility.js:15:9
   15|     x = y; // 1 error: number !~> string
               ^

References:
   compatibility.js:14:44
   14|   function(x: { +foo: string }, y: { +foo: number }) {
                                                  ^^^^^^ [1]
   compatibility.js:14:23
   14|   function(x: { +foo: string }, y: { +foo: number }) {
                             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- compatibility.js:19:9

Cannot assign `y` to `x` because number [1] is incompatible with string [2] in property `x.foo`. [incompatible-type]

   compatibility.js:19:9
   19|     x = y; // 2 errors: string !~> number; number !~> string
               ^

References:
   compatibility.js:18:56
   18|   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                                              ^^^^^^ [1]
   compatibility.js:18:28
   18|   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- compatibility.js:23:9

Cannot assign `y` to `x` because string [1] is incompatible with number [2] in property `foo`. [incompatible-type]

   compatibility.js:23:9
   23|     x = y; // 1 error: string !~> number
               ^

References:
   compatibility.js:22:23
   22|   function(x: { -foo: string }, y: { -foo: number }) {
                             ^^^^^^ [1]
   compatibility.js:22:44
   22|   function(x: { -foo: string }, y: { -foo: number }) {
                                                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- compatibility.js:27:9

Cannot assign `y` to `x` because number [1] is incompatible with string [2] in property `x.foo`. [incompatible-type]

   compatibility.js:27:9
   27|     x = y; // 2 errors: string !~> number; number !~> string
               ^

References:
   compatibility.js:26:56
   26|   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                                              ^^^^^^ [1]
   compatibility.js:26:28
   26|   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- conversion.js:10:1

Cannot cast `Object(...)` to `Number` because object type [1] is incompatible with `Number` [2]. [incompatible-type]

   conversion.js:10:1
   10| Object(undefined) as Number; // error
       ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:97:24
   97|     static (o: ?void): { [key: any]: any, ... };
                              ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   conversion.js:10:22
   10| Object(undefined) as Number; // error
                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- conversion.js:19:3

Cannot call `z.charAt` because property `charAt` is missing in `Number` [1]. [prop-missing]

   conversion.js:19:3
   19| z.charAt(0) as string;
         ^^^^^^

References:
   <BUILTINS>/core.js:99:25
   99|     static (o: number): Number;
                               ^^^^^^ [1]


Error -------------------------------------------------------------------------- different_call_prop_no_fast_path.js:8:1

Cannot cast `MyThunk` to `ThunkType` because number [1] is incompatible with string [2] in the return value.
[incompatible-type]

   different_call_prop_no_fast_path.js:8:1
   8| MyThunk as ThunkType<string>; // error: number ~> string
      ^^^^^^^

References:
   different_call_prop_no_fast_path.js:7:36
   7| declare const MyThunk: MyThunkType<number>;
                                         ^^^^^^ [1]
   different_call_prop_no_fast_path.js:8:22
   8| MyThunk as ThunkType<string>; // error: number ~> string
                           ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objects.js:4:3

Cannot get `x.foo` because property `foo` is missing in object type [1]. [prop-missing]

   objects.js:4:3
   4| x.foo as string; // error, key doesn't exist
        ^^^

References:
   objects.js:3:8
   3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- objects.js:5:3

Cannot get `x['foo']` because property `foo` is missing in object type [1]. [prop-missing]

   objects.js:5:3
   5| x['foo'] as string; // error, key doesn't exist
        ^^^^^

References:
   objects.js:3:8
   3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- objects.js:6:1

Cannot cast `x[123]` to boolean because string [1] is incompatible with boolean [2]. [incompatible-type]

   objects.js:6:1
   6| x[123] as boolean; // error, string !~> boolean
      ^^^^^^

References:
   objects.js:3:16
   3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
                     ^^^^^^ [1]
   objects.js:6:11
   6| x[123] as boolean; // error, string !~> boolean
                ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objects.js:7:1

Cannot cast `x.bar` to boolean because string [1] is incompatible with boolean [2]. [incompatible-type]

   objects.js:7:1
   7| x.bar as boolean; // error, string !~> boolean
      ^^^^^

References:
   objects.js:3:29
   3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
                                  ^^^^^^ [1]
   objects.js:7:10
   7| x.bar as boolean; // error, string !~> boolean
               ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objects.js:8:1

Cannot cast `x['123']` to boolean because string [1] is incompatible with boolean [2]. [incompatible-type]

   objects.js:8:1
   8| x['123'] as boolean; // error, string !~> boolean
      ^^^^^^^^

References:
   objects.js:3:16
   3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
                     ^^^^^^ [1]
   objects.js:8:13
   8| x['123'] as boolean; // error, string !~> boolean
                  ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- objects.js:9:12

Cannot assign `false` to `x['123']` because boolean [1] is incompatible with string [2]. [incompatible-type]

   objects.js:9:12
   9| x['123'] = false; // error, boolean !~> string
                 ^^^^^ [1]

References:
   objects.js:3:16
   3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- objects.js:10:10

Cannot assign `false` to `x[123]` because boolean [1] is incompatible with string [2]. [incompatible-type]

   objects.js:10:10
   10| x[123] = false; // error, boolean !~> string
                ^^^^^ [1]

References:
   objects.js:3:16
    3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- objects.js:11:3

Cannot assign `'derp'` to `x['foo' + 'bar']` because an index signature declaring the expected key / value type is
missing in object type [1]. [prop-missing]

   objects.js:11:3
   11| x['foo' + 'bar'] = 'derp'; // error: no indexed type
         ^^^^^^^^^^^^^

References:
   objects.js:3:8
    3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- objects.js:12:3

Cannot get `x[`...`]` because property `foo` is missing in object type [1]. [prop-missing]

   objects.js:12:3
   12| x[`foo`] as string; // error, key doesn't exist
         ^^^^^

References:
   objects.js:3:8
    3| var x: {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- objects.js:15:12

Cannot assign `123` to `y['foo']` because number [1] is incompatible with string [2]. [incompatible-type]

   objects.js:15:12
   15| y['foo'] = 123; // error, number !~> string
                  ^^^ [1]

References:
   objects.js:14:14
   14| var y: {foo: string} = {foo: 'bar'};
                    ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- objects.js:16:3

Cannot assign `'abc'` to `y['bar']` because property `bar` is missing in object type [1]. [prop-missing]

   objects.js:16:3
   16| y['bar'] = 'abc'; // error, property not found
         ^^^^^

References:
   objects.js:14:8
   14| var y: {foo: string} = {foo: 'bar'};
              ^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- objects.js:18:1

Cannot cast `y['hasOwnProperty']` to string because function type [1] is incompatible with string [2].
[incompatible-type]

   objects.js:18:1
    18| y['hasOwnProperty'] as string; // error, prototype method is not a string
        ^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:235:5
   235|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   objects.js:18:24
    18| y['hasOwnProperty'] as string; // error, prototype method is not a string
                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- unaliased_assign.js:26:11

Cannot assign `10` to `obj.x` because number [1] is incompatible with string [2]. [incompatible-type]

   unaliased_assign.js:26:11
   26|   obj.x = 10;  // error
                 ^^ [1]

References:
   unaliased_assign.js:25:14
   25|   obj = { x: "hey" };
                    ^^^^^ [2]



Found 24 errors
