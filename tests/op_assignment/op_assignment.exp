Error ----------------------------------------------------------------------------------------------------- test.js:67:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:67:3
   67|   x += 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:68:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:68:3
   68|   x -= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:69:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:69:3
   69|   x *= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:70:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:70:3
   70|   x /= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:71:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:71:3
   71|   x **= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:72:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:72:3
   72|   x %= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:73:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:73:3
   73|   x &&= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:74:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:74:3
   74|   x ||= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:75:3

Cannot reassign constant `x` [1]. [reassign-const]

   test.js:75:3
   75|   x ??= 2; // Error: cannot reassign constant
         ^

References:
   test.js:66:9
   66|   const x = 1;
               ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:81:3

Cannot reassign constant `sx` [1]. [reassign-const]

   test.js:81:3
   81|   sx += "b"; // Error: cannot reassign constant
         ^^

References:
   test.js:80:9
   80|   const sx = "a";
               ^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:87:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   87|   o.p += 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:88:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   88|   o.p -= 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:89:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   89|   o.p *= 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:90:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   90|   o.p /= 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:91:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   91|   o.p **= 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:92:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   92|   o.p %= 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:93:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   93|   o.p &&= 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:94:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   94|   o.p ||= 2; // Error: property is non-writable
           ^


Error ----------------------------------------------------------------------------------------------------- test.js:95:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   95|   o.p ??= 2; // Error: property is non-writable
           ^


Error ---------------------------------------------------------------------------------------------------- test.js:101:5

Cannot update `o.p` because property `p` is not writable. [cannot-write]

   101|   o.p += "b"; // Error: property is non-writable
            ^


Error ---------------------------------------------------------------------------------------------------- test.js:107:5

Cannot get `o.p` because property `p` is not readable. [cannot-read]

   107|   o.p += 2; // Error: property is non-readable
            ^


Error ---------------------------------------------------------------------------------------------------- test.js:117:9

Cannot assign `3` to `x` because number [1] is incompatible with boolean [2]. [incompatible-type]

   test.js:117:9
   117|   x &&= 3; // Error: number not assignable to boolean
                ^ [1]

References:
   test.js:114:10
   114|   let x: boolean = false;
                 ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:118:9

Cannot assign `3` to `y` because number [1] is incompatible with boolean [2]. [incompatible-type]

   test.js:118:9
   118|   y ||= 3; // Error: number not assignable to boolean
                ^ [1]

References:
   test.js:115:10
   115|   let y: boolean = false;
                 ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:119:9

Cannot assign `3` to `z` because number [1] is incompatible with boolean [2]. [incompatible-type]

   test.js:119:9
   119|   z ??= 3; // Error: number not assignable to boolean
                ^ [1]

References:
   test.js:116:11
   116|   let z: ?boolean = false;
                  ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- test.js:138:29

Cannot expect number as the return type of function because number [1] is incompatible with implicitly-returned
undefined. [incompatible-type]

   138|   function alwaysThrows1(): number { x ??= invariant(false); } // Error
                                    ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:139:29

Cannot expect number as the return type of function because number [1] is incompatible with implicitly-returned
undefined. [incompatible-type]

   139|   function alwaysThrows2(): number { y &&= invariant(false); } // Error
                                    ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:140:29

Cannot expect number as the return type of function because number [1] is incompatible with implicitly-returned
undefined. [incompatible-type]

   140|   function alwaysThrows3(): number { x ||= invariant(false); } // Error: void ~> number, constant-condition error
                                    ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- test.js:140:38

This condition is likely falsy.
[WARNING]: Flow's type inference may be incorrect that it could be null at runtime (due to `any` annotations,
out-of-bounds array accesses, etc.). If the check is valid, you might want to make [1] nullable (`T` -> `?T`).
[constant-condition]

   test.js:140:38
   140|   function alwaysThrows3(): number { x ||= invariant(false); } // Error: void ~> number, constant-condition error
                                             ^

References:
   test.js:135:10
   135|   let x: null = null;
                 ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:145:3

Invalid left-hand side in assignment expression. [invalid-lhs]

   145|   [a] += 1; // error
          ^^^


Error ---------------------------------------------------------------------------------------------------- test.js:146:4

Invalid left-hand side in assignment expression. [invalid-lhs]

   146|   ({b} += 1); // error
           ^^^



Found 30 errors
