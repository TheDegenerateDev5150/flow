Error ----------------------------------------------------------------------------- class-extends-and-implements.js:15:6

Cannot extend `A` [1] with `C` because string [2] is incompatible with number [3] in property `p`. [incompatible-type]

   class-extends-and-implements.js:15:6
   15|   p: string;
            ^^^^^^ [2]

References:
   class-extends-and-implements.js:14:17
   14| class C extends A {
                       ^ [1]
   class-extends-and-implements.js:7:6
    7|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:19:6

Cannot extend `B` [1] with `D` because string [2] is incompatible with number [3] in property `p`. [incompatible-type]

   class-extends-and-implements.js:19:6
   19|   p: string;
            ^^^^^^ [2]

References:
   class-extends-and-implements.js:18:17
   18| class D extends B<empty> {
                       ^^^^^^^^ [1]
   class-extends-and-implements.js:11:6
   11|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:31:6

Cannot implement `E` [1] with `G` because string [2] is incompatible with number [3] in property `p`.
[incompatible-type]

   class-extends-and-implements.js:31:6
   31|   p: string;
            ^^^^^^ [2]

References:
   class-extends-and-implements.js:30:20
   30| class G implements E {
                          ^ [1]
   class-extends-and-implements.js:23:6
   23|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:35:6

Cannot implement `F` [1] with `H` because string [2] is incompatible with number [3] in property `p`.
[incompatible-type]

   class-extends-and-implements.js:35:6
   35|   p: string;
            ^^^^^^ [2]

References:
   class-extends-and-implements.js:34:20
   34| class H implements F<empty> {
                          ^^^^^^^^ [1]
   class-extends-and-implements.js:27:6
   27|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:47:6

Cannot extend `I` [1] with `K` because string [2] is incompatible with number [3] in property `p`. [incompatible-type]

   class-extends-and-implements.js:47:6
   47|   p: string;
            ^^^^^^ [2]

References:
   class-extends-and-implements.js:46:21
   46| interface K extends I {
                           ^ [1]
   class-extends-and-implements.js:39:6
   39|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:51:6

Cannot extend `J` [1] with `L` because string [2] is incompatible with number [3] in property `p`. [incompatible-type]

   class-extends-and-implements.js:51:6
   51|   p: string;
            ^^^^^^ [2]

References:
   class-extends-and-implements.js:50:21
   50| interface L extends J<empty> {
                           ^^^^^^^^ [1]
   class-extends-and-implements.js:43:6
   43|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:71:7

Cannot extend `M1` [1] with `O` because string [2] is incompatible with number [3] in property `p1`. [incompatible-type]

   class-extends-and-implements.js:71:7
   71|   p1: string;
             ^^^^^^ [2]

References:
   class-extends-and-implements.js:70:21
   70| interface O extends M1, M2 {
                           ^^ [1]
   class-extends-and-implements.js:55:7
   55|   p1: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:72:7

Cannot extend `M2` [1] with `O` because string [2] is incompatible with number [3] in property `p2`. [incompatible-type]

   class-extends-and-implements.js:72:7
   72|   p2: string;
             ^^^^^^ [2]

References:
   class-extends-and-implements.js:70:25
   70| interface O extends M1, M2 {
                               ^^ [1]
   class-extends-and-implements.js:59:7
   59|   p2: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:76:7

Cannot extend `N1` [1] with `P` because string [2] is incompatible with number [3] in property `p1`. [incompatible-type]

   class-extends-and-implements.js:76:7
   76|   p1: string;
             ^^^^^^ [2]

References:
   class-extends-and-implements.js:75:21
   75| interface P extends N1<empty>, N2<empty> {
                           ^^^^^^^^^ [1]
   class-extends-and-implements.js:63:7
   63|   p1: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:77:7

Cannot extend `N2` [1] with `P` because string [2] is incompatible with number [3] in property `p2`. [incompatible-type]

   class-extends-and-implements.js:77:7
   77|   p2: string;
             ^^^^^^ [2]

References:
   class-extends-and-implements.js:75:32
   75| interface P extends N1<empty>, N2<empty> {
                                      ^^^^^^^^^ [1]
   class-extends-and-implements.js:67:7
   67|   p2: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:97:7

Cannot implement `Q1` [1] with `S` because number [2] is incompatible with string [3] in property `p1`.
[incompatible-type]

   class-extends-and-implements.js:97:7
   97|   p1: number;
             ^^^^^^ [2]

References:
   class-extends-and-implements.js:96:20
   96| class S implements Q1, Q2 {
                          ^^ [1]
   class-extends-and-implements.js:81:7
   81|   p1: string;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:98:7

Cannot implement `Q2` [1] with `S` because number [2] is incompatible with string [3] in property `p2`.
[incompatible-type]

   class-extends-and-implements.js:98:7
   98|   p2: number;
             ^^^^^^ [2]

References:
   class-extends-and-implements.js:96:24
   96| class S implements Q1, Q2 {
                              ^^ [1]
   class-extends-and-implements.js:85:7
   85|   p2: string;
             ^^^^^^ [3]


Error ---------------------------------------------------------------------------- class-extends-and-implements.js:102:7

Cannot implement `R1` [1] with `T` because number [2] is incompatible with string [3] in property `p1`.
[incompatible-type]

   class-extends-and-implements.js:102:7
   102|   p1: number;
              ^^^^^^ [2]

References:
   class-extends-and-implements.js:101:20
   101| class T implements R1<empty>, R2<empty> {
                           ^^^^^^^^^ [1]
   class-extends-and-implements.js:89:7
    89|   p1: string;
              ^^^^^^ [3]


Error ---------------------------------------------------------------------------- class-extends-and-implements.js:103:7

Cannot implement `R2` [1] with `T` because number [2] is incompatible with string [3] in property `p2`.
[incompatible-type]

   class-extends-and-implements.js:103:7
   103|   p2: number;
              ^^^^^^ [2]

References:
   class-extends-and-implements.js:101:31
   101| class T implements R1<empty>, R2<empty> {
                                      ^^^^^^^^^ [1]
   class-extends-and-implements.js:93:7
    93|   p2: string;
              ^^^^^^ [3]


Error ------------------------------------------------------------------------------- class-refinement-env-merge.js:12:5

Cannot cast `this.p` to number because string [1] is incompatible with number [2]. [incompatible-type]

   class-refinement-env-merge.js:12:5
   12|     this.p as number;
           ^^^^^^

References:
   class-refinement-env-merge.js:7:15
    7|   p: number | string;
                     ^^^^^^ [1]
   class-refinement-env-merge.js:12:15
   12|     this.p as number;
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------- class-refinement-env-merge.js:12:5

Cannot cast `this.p` to number because string [1] is incompatible with number [2]. [incompatible-type]

   class-refinement-env-merge.js:12:5
   12|     this.p as number;
           ^^^^^^

References:
   class-refinement-env-merge.js:10:16
   10|       this.p = 'foo';
                      ^^^^^ [1]
   class-refinement-env-merge.js:12:15
   12|     this.p as number;
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:16:5

Cannot cast `this.a` to number because string [1] is incompatible with number [2]. [incompatible-type]

   desc-class-properties.js:16:5
   16|     this.a as number; // Error: string ~> number
           ^^^^^^

References:
   desc-class-properties.js:7:6
    7|   a: string;
            ^^^^^^ [1]
   desc-class-properties.js:16:15
   16|     this.a as number; // Error: string ~> number
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:17:5

Cannot cast `super.a` to number because string [1] is incompatible with number [2]. [incompatible-type]

   desc-class-properties.js:17:5
   17|     super.a as number; // Error: string ~> number
           ^^^^^^^

References:
   desc-class-properties.js:7:6
    7|   a: string;
            ^^^^^^ [1]
   desc-class-properties.js:17:16
   17|     super.a as number; // Error: string ~> number
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:18:5

Cannot cast `this.b` to number because string [1] is incompatible with number [2]. [incompatible-type]

   desc-class-properties.js:18:5
   18|     this.b as number; // Error: string ~> number
           ^^^^^^

References:
   desc-class-properties.js:11:6
   11|   b: string;
            ^^^^^^ [1]
   desc-class-properties.js:18:15
   18|     this.b as number; // Error: string ~> number
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:19:5

Cannot cast `this.#c` to number because string [1] is incompatible with number [2]. [incompatible-type]

   desc-class-properties.js:19:5
   19|     this.#c as number; // Error: string ~> number
           ^^^^^^^

References:
   desc-class-properties.js:13:7
   13|   #c: string;
             ^^^^^^ [1]
   desc-class-properties.js:19:16
   19|     this.#c as number; // Error: string ~> number
                      ^^^^^^ [2]


Error --------------------------------------------------------------------------------- indexer-key-compatibility.js:7:1

Cannot cast `o` to object type because `number` [1] is not exactly the same as `string` [2] in the indexer property's
key. 

The above-mentioned two types must be the same because the indexer is invariantly typed. To fix the error,
- Either make `{[k: number]: any}` [3] and `{[k: string]: any}` [4] exactly the same
- Or make the indexer in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   indexer-key-compatibility.js:7:1
   7| o as {[k: string]: any};
      ^

References:
   indexer-key-compatibility.js:6:21
   6| declare var o: {[k: number]: any};
                          ^^^^^^ [1]
   indexer-key-compatibility.js:7:11
   7| o as {[k: string]: any};
                ^^^^^^ [2]
   indexer-key-compatibility.js:6:16
   6| declare var o: {[k: number]: any};
                     ^^^^^^^^^^^^^^^^^^ [3]
   indexer-key-compatibility.js:7:6
   7| o as {[k: string]: any};
           ^^^^^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------- loc-primary-for-covariant-ops.js:8:8

Cannot cast `any` to function type because `string` [1] is not exactly the same as `number` [2] in property `p` of the
first parameter. 

The above-mentioned two types must be the same because property `p` is invariantly typed. To fix the error,
- Either make `{p: string, ...}` [3] and `{p: number, ...}` [4] exactly the same
- Or make property `p` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary-for-covariant-ops.js:8:8
   8| any as (x: {p: number}) => void as (x: {p: string}) => void;
             ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   loc-primary-for-covariant-ops.js:8:44
   8| any as (x: {p: number}) => void as (x: {p: string}) => void;
                                                 ^^^^^^ [1]
   loc-primary-for-covariant-ops.js:8:16
   8| any as (x: {p: number}) => void as (x: {p: string}) => void;
                     ^^^^^^ [2]
   loc-primary-for-covariant-ops.js:8:40
   8| any as (x: {p: number}) => void as (x: {p: string}) => void;
                                             ^^^^^^^^^^^ [3]
   loc-primary-for-covariant-ops.js:8:12
   8| any as (x: {p: number}) => void as (x: {p: string}) => void;
                 ^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------- loc-primary-for-covariant-ops.js:11:8

Cannot cast `any` to `X` because `string` [1] is not exactly the same as `number` [2] in property `p` of type argument
`T` [3]. 

The above-mentioned two types must be the same because property `p` is invariantly typed. To fix the error,
- Either make `{p: string, ...}` [4] and `{p: number, ...}` [5] exactly the same
- Or make property `p` in object type [5] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary-for-covariant-ops.js:11:8
   11| any as X<{p: number}> as X<{p: string}>;
              ^^^^^^^^^^^^^^

References:
   loc-primary-for-covariant-ops.js:11:32
   11| any as X<{p: number}> as X<{p: string}>;
                                      ^^^^^^ [1]
   loc-primary-for-covariant-ops.js:11:14
   11| any as X<{p: number}> as X<{p: string}>;
                    ^^^^^^ [2]
   loc-primary-for-covariant-ops.js:10:9
   10| type X<-T> = mixed;
               ^ [3]
   loc-primary-for-covariant-ops.js:11:28
   11| any as X<{p: number}> as X<{p: string}>;
                                  ^^^^^^^^^^^ [4]
   loc-primary-for-covariant-ops.js:11:10
   11| any as X<{p: number}> as X<{p: string}>;
                ^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------- loc-primary.js:8:1

Cannot cast `a1` to `A` because `number` [1] is not exactly the same as `string` [2] in property `p`. 

The above-mentioned two types must be the same because property `p` is invariantly typed. To fix the error,
- Either make `{p: number, ...}` [3] and `A` [4] exactly the same
- Or make property `p` in `A` [5] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:8:1
   8| a1 as A; // Error: string ~> number. We should point to a1.
      ^^

References:
   loc-primary.js:7:21
   7| declare var a1: {p: number};
                          ^^^^^^ [1]
   loc-primary.js:6:14
   6| type A = {p: string};
                   ^^^^^^ [2]
   loc-primary.js:7:17
   7| declare var a1: {p: number};
                      ^^^^^^^^^^^ [3]
   loc-primary.js:6:10
   6| type A = {p: string};
               ^^^^^^^^^^^ [4]
   loc-primary.js:8:7
   8| a1 as A; // Error: string ~> number. We should point to a1.
            ^ [5]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:10:6

Cannot cast object literal to `A` because number [1] is incompatible with string [2] in property `p`.
[incompatible-type]

   loc-primary.js:10:6
   10| ({p: a2}) as A; // Error: string ~> number. We should point to a2.
            ^^

References:
   loc-primary.js:9:17
    9| declare var a2: number;
                       ^^^^^^ [1]
   loc-primary.js:6:14
    6| type A = {p: string};
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:11:6

Cannot cast object literal to `A` because number [1] is incompatible with string [2] in property `p`.
[incompatible-type]

   loc-primary.js:11:6
   11| ({p: 42}) as A; // Error: string ~> number. We should point to 42.
            ^^ [1]

References:
   loc-primary.js:6:14
    6| type A = {p: string};
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:15:1

Cannot cast `b1` to `B` because `{b: number, ...}` [1] is not exactly the same as `{b: string, ...}` [2] in property
`a`. 

The above-mentioned two types must be the same because property `a` is invariantly typed. To fix the error,
- Either make `{a: {b: number, ...}, ...}` [3] and `B` [4] exactly the same
- Or make property `a` in `B` [5] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:15:1
   15| b1 as B; // Error: string ~> number. We should point to b1.
       ^^

References:
   loc-primary.js:14:21
   14| declare var b1: {a: {b: number}};
                           ^^^^^^^^^^^ [1]
   loc-primary.js:13:14
   13| type B = {a: {b: string}};
                    ^^^^^^^^^^^ [2]
   loc-primary.js:14:17
   14| declare var b1: {a: {b: number}};
                       ^^^^^^^^^^^^^^^^ [3]
   loc-primary.js:13:10
   13| type B = {a: {b: string}};
                ^^^^^^^^^^^^^^^^ [4]
   loc-primary.js:15:7
   15| b1 as B; // Error: string ~> number. We should point to b1.
             ^ [5]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:17:6

Cannot cast object literal to `B` because `number` [1] is not exactly the same as `string` [2] in property `a.b`. 

The above-mentioned two types must be the same because property `b` is invariantly typed. To fix the error,
- Either make `{b: number, ...}` [3] and `{b: string, ...}` [4] exactly the same
- Or make property `b` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:17:6
   17| ({a: b2}) as B; // Error: string ~> number. We should point to b2.
            ^^

References:
   loc-primary.js:16:21
   16| declare var b2: {b: number};
                           ^^^^^^ [1]
   loc-primary.js:13:18
   13| type B = {a: {b: string}};
                        ^^^^^^ [2]
   loc-primary.js:16:17
   16| declare var b2: {b: number};
                       ^^^^^^^^^^^ [3]
   loc-primary.js:13:14
   13| type B = {a: {b: string}};
                    ^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- loc-primary.js:19:10

Cannot cast object literal to `B` because number [1] is incompatible with string [2] in property `a.b`.
[incompatible-type]

   loc-primary.js:19:10
   19| ({a: {b: b3}}) as B; // Error: string ~> number. We should point to b3.
                ^^

References:
   loc-primary.js:18:17
   18| declare var b3: number;
                       ^^^^^^ [1]
   loc-primary.js:13:18
   13| type B = {a: {b: string}};
                        ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- loc-primary.js:20:10

Cannot cast object literal to `B` because number [1] is incompatible with string [2] in property `a.b`.
[incompatible-type]

   loc-primary.js:20:10
   20| ({a: {b: 42}}) as B; // Error: string ~> number. We should point to 42.
                ^^ [1]

References:
   loc-primary.js:13:18
   13| type B = {a: {b: string}};
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:24:1

Cannot cast `c1` to `C` because `{b: {c: number, ...}, ...}` [1] is not exactly the same as
`{b: {c: string, ...}, ...}` [2] in property `a`. 

The above-mentioned two types must be the same because property `a` is invariantly typed. To fix the error,
- Either make `{a: {b: {c: number, ...}, ...}, ...}` [3] and `C` [4] exactly the same
- Or make property `a` in `C` [5] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:24:1
   24| c1 as C; // Error: string ~> number. We should point to c1.
       ^^

References:
   loc-primary.js:23:21
   23| declare var c1: {a: {b: {c: number}}};
                           ^^^^^^^^^^^^^^^^ [1]
   loc-primary.js:22:14
   22| type C = {a: {b: {c: string}}};
                    ^^^^^^^^^^^^^^^^ [2]
   loc-primary.js:23:17
   23| declare var c1: {a: {b: {c: number}}};
                       ^^^^^^^^^^^^^^^^^^^^^ [3]
   loc-primary.js:22:10
   22| type C = {a: {b: {c: string}}};
                ^^^^^^^^^^^^^^^^^^^^^ [4]
   loc-primary.js:24:7
   24| c1 as C; // Error: string ~> number. We should point to c1.
             ^ [5]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:26:6

Cannot cast object literal to `C` because `{c: number, ...}` [1] is not exactly the same as `{c: string, ...}` [2] in
property `a.b`. 

The above-mentioned two types must be the same because property `b` is invariantly typed. To fix the error,
- Either make `{b: {c: number, ...}, ...}` [3] and `{b: {c: string, ...}, ...}` [4] exactly the same
- Or make property `b` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:26:6
   26| ({a: c2}) as C; // Error: string ~> number. We should point to c2.
            ^^

References:
   loc-primary.js:25:21
   25| declare var c2: {b: {c: number}};
                           ^^^^^^^^^^^ [1]
   loc-primary.js:22:18
   22| type C = {a: {b: {c: string}}};
                        ^^^^^^^^^^^ [2]
   loc-primary.js:25:17
   25| declare var c2: {b: {c: number}};
                       ^^^^^^^^^^^^^^^^ [3]
   loc-primary.js:22:14
   22| type C = {a: {b: {c: string}}};
                    ^^^^^^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- loc-primary.js:28:10

Cannot cast object literal to `C` because `number` [1] is not exactly the same as `string` [2] in property `a.b.c`. 

The above-mentioned two types must be the same because property `c` is invariantly typed. To fix the error,
- Either make `{c: number, ...}` [3] and `{c: string, ...}` [4] exactly the same
- Or make property `c` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:28:10
   28| ({a: {b: c3}}) as C; // Error: string ~> number. We should point to c3.
                ^^

References:
   loc-primary.js:27:21
   27| declare var c3: {c: number};
                           ^^^^^^ [1]
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]
   loc-primary.js:27:17
   27| declare var c3: {c: number};
                       ^^^^^^^^^^^ [3]
   loc-primary.js:22:18
   22| type C = {a: {b: {c: string}}};
                        ^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- loc-primary.js:30:14

Cannot cast object literal to `C` because number [1] is incompatible with string [2] in property `a.b.c`.
[incompatible-type]

   loc-primary.js:30:14
   30| ({a: {b: {c: c4}}}) as C; // Error: string ~> number. We should point to c4.
                    ^^

References:
   loc-primary.js:29:17
   29| declare var c4: number;
                       ^^^^^^ [1]
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- loc-primary.js:31:14

Cannot cast object literal to `C` because number [1] is incompatible with string [2] in property `a.b.c`.
[incompatible-type]

   loc-primary.js:31:14
   31| ({a: {b: {c: 42}}}) as C; // Error: string ~> number. We should point to 42.
                    ^^ [1]

References:
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:35:1

Cannot cast `d1` to `D` because `{b: {c: {d: number, ...}, ...}, ...}` [1] is not exactly the same as
`{b: {c: {d: string, ...}, ...}, ...}` [2] in property `a`. 

The above-mentioned two types must be the same because property `a` is invariantly typed. To fix the error,
- Either make `{a: {b: {c: {d: number, ...}, ...}, ...}, ...}` [3] and `D` [4] exactly the same
- Or make property `a` in `D` [5] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:35:1
   35| d1 as D; // Error: string ~> number. We should point to d1.
       ^^

References:
   loc-primary.js:34:21
   34| declare var d1: {a: {b: {c: {d: number}}}};
                           ^^^^^^^^^^^^^^^^^^^^^ [1]
   loc-primary.js:33:14
   33| type D = {a: {b: {c: {d: string}}}};
                    ^^^^^^^^^^^^^^^^^^^^^ [2]
   loc-primary.js:34:17
   34| declare var d1: {a: {b: {c: {d: number}}}};
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   loc-primary.js:33:10
   33| type D = {a: {b: {c: {d: string}}}};
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   loc-primary.js:35:7
   35| d1 as D; // Error: string ~> number. We should point to d1.
             ^ [5]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:37:6

Cannot cast object literal to `D` because `{c: {d: number, ...}, ...}` [1] is not exactly the same as
`{c: {d: string, ...}, ...}` [2] in property `a.b`. 

The above-mentioned two types must be the same because property `b` is invariantly typed. To fix the error,
- Either make `{b: {c: {d: number, ...}, ...}, ...}` [3] and `{b: {c: {d: string, ...}, ...}, ...}` [4] exactly the same
- Or make property `b` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:37:6
   37| ({a: d2}) as D; // Error: string ~> number. We should point to d2.
            ^^

References:
   loc-primary.js:36:21
   36| declare var d2: {b: {c: {d: number}}};
                           ^^^^^^^^^^^^^^^^ [1]
   loc-primary.js:33:18
   33| type D = {a: {b: {c: {d: string}}}};
                        ^^^^^^^^^^^^^^^^ [2]
   loc-primary.js:36:17
   36| declare var d2: {b: {c: {d: number}}};
                       ^^^^^^^^^^^^^^^^^^^^^ [3]
   loc-primary.js:33:14
   33| type D = {a: {b: {c: {d: string}}}};
                    ^^^^^^^^^^^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- loc-primary.js:39:10

Cannot cast object literal to `D` because `{d: number, ...}` [1] is not exactly the same as `{d: string, ...}` [2] in
property `a.b.c`. 

The above-mentioned two types must be the same because property `c` is invariantly typed. To fix the error,
- Either make `{c: {d: number, ...}, ...}` [3] and `{c: {d: string, ...}, ...}` [4] exactly the same
- Or make property `c` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:39:10
   39| ({a: {b: d3}}) as D; // Error: string ~> number. We should point to d3.
                ^^

References:
   loc-primary.js:38:21
   38| declare var d3: {c: {d: number}};
                           ^^^^^^^^^^^ [1]
   loc-primary.js:33:22
   33| type D = {a: {b: {c: {d: string}}}};
                            ^^^^^^^^^^^ [2]
   loc-primary.js:38:17
   38| declare var d3: {c: {d: number}};
                       ^^^^^^^^^^^^^^^^ [3]
   loc-primary.js:33:18
   33| type D = {a: {b: {c: {d: string}}}};
                        ^^^^^^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- loc-primary.js:41:14

Cannot cast object literal to `D` because `number` [1] is not exactly the same as `string` [2] in property `a.b.c.d`. 

The above-mentioned two types must be the same because property `d` is invariantly typed. To fix the error,
- Either make `{d: number, ...}` [3] and `{d: string, ...}` [4] exactly the same
- Or make property `d` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   loc-primary.js:41:14
   41| ({a: {b: {c: d4}}}) as D; // Error: string ~> number. We should point to d4.
                    ^^

References:
   loc-primary.js:40:21
   40| declare var d4: {d: number};
                           ^^^^^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]
   loc-primary.js:40:17
   40| declare var d4: {d: number};
                       ^^^^^^^^^^^ [3]
   loc-primary.js:33:22
   33| type D = {a: {b: {c: {d: string}}}};
                            ^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- loc-primary.js:43:18

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.
[incompatible-type]

   loc-primary.js:43:18
   43| ({a: {b: {c: {d: d5}}}}) as D; // Error: string ~> number. We should point to d5.
                        ^^

References:
   loc-primary.js:42:17
   42| declare var d5: number;
                       ^^^^^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- loc-primary.js:44:18

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.
[incompatible-type]

   loc-primary.js:44:18
   44| ({a: {b: {c: {d: 42}}}}) as D; // Error: string ~> number. We should point to 42.
                        ^^ [1]

References:
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:15:1

Cannot cast `x1` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:15:1
   15| x1 as empty; // X ~> empty. Ref should point to first `new X()`.
       ^^

References:
   loc-reference.js:8:12
    8| const x1 = new X();
                  ^^^^^^^ [1]
   loc-reference.js:15:7
   15| x1 as empty; // X ~> empty. Ref should point to first `new X()`.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:16:1

Cannot cast `x2` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:16:1
   16| x2 as empty; // X ~> empty. Ref should point to first `X` annotation.
       ^^

References:
   loc-reference.js:9:11
    9| const x2: X = new X();
                 ^ [1]
   loc-reference.js:16:7
   16| x2 as empty; // X ~> empty. Ref should point to first `X` annotation.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:17:1

Cannot cast `x3` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:17:1
   17| x3 as empty; // X ~> empty. Ref should point to first `new X()`.
       ^^

References:
   loc-reference.js:8:12
    8| const x1 = new X();
                  ^^^^^^^ [1]
   loc-reference.js:17:7
   17| x3 as empty; // X ~> empty. Ref should point to first `new X()`.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:18:1

Cannot cast `x4` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:18:1
   18| x4 as empty; // X ~> empty. Ref should point to first `X` annotation.
       ^^

References:
   loc-reference.js:9:11
    9| const x2: X = new X();
                 ^ [1]
   loc-reference.js:18:7
   18| x4 as empty; // X ~> empty. Ref should point to first `X` annotation.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:19:1

Cannot cast `x5` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:19:1
   19| x5 as empty; // X ~> empty. Ref should point to second `X` annotation.
       ^^

References:
   loc-reference.js:12:11
   12| const x5: X = x1;
                 ^ [1]
   loc-reference.js:19:7
   19| x5 as empty; // X ~> empty. Ref should point to second `X` annotation.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:20:1

Cannot cast `x6` to empty because `X` [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:20:1
   20| x6 as empty; // X ~> empty. Ref should point to second `X` annotation.
       ^^

References:
   loc-reference.js:8:12
    8| const x1 = new X();
                  ^^^^^^^ [1]
   loc-reference.js:20:7
   20| x6 as empty; // X ~> empty. Ref should point to second `X` annotation.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:29:1

Cannot cast `y1` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:29:1
   29| y1 as empty; // number ~> empty. Ref should point to 42.
       ^^

References:
   loc-reference.js:22:12
   22| const y1 = 42;
                  ^^ [1]
   loc-reference.js:29:7
   29| y1 as empty; // number ~> empty. Ref should point to 42.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:30:1

Cannot cast `y2` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:30:1
   30| y2 as empty; // number ~> empty. Ref should point to first `number` annotation.
       ^^

References:
   loc-reference.js:23:11
   23| const y2: number = -42;
                 ^^^^^^ [1]
   loc-reference.js:30:7
   30| y2 as empty; // number ~> empty. Ref should point to first `number` annotation.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:31:1

Cannot cast `y3` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:31:1
   31| y3 as empty; // number ~> empty. Ref should point to 42.
       ^^

References:
   loc-reference.js:22:12
   22| const y1 = 42;
                  ^^ [1]
   loc-reference.js:31:7
   31| y3 as empty; // number ~> empty. Ref should point to 42.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:32:1

Cannot cast `y4` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:32:1
   32| y4 as empty; // number ~> empty. Ref should point to first `number` annotation.
       ^^

References:
   loc-reference.js:23:11
   23| const y2: number = -42;
                 ^^^^^^ [1]
   loc-reference.js:32:7
   32| y4 as empty; // number ~> empty. Ref should point to first `number` annotation.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:33:1

Cannot cast `y5` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:33:1
   33| y5 as empty; // number ~> empty. Ref should point to second `number` annotation.
       ^^

References:
   loc-reference.js:26:11
   26| const y5: number = y1;
                 ^^^^^^ [1]
   loc-reference.js:33:7
   33| y5 as empty; // number ~> empty. Ref should point to second `number` annotation.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:34:1

Cannot cast `y6` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   loc-reference.js:34:1
   34| y6 as empty; // number ~> empty. Ref should point to 42.
       ^^

References:
   loc-reference.js:22:12
   22| const y1 = 42;
                  ^^ [1]
   loc-reference.js:34:7
   34| y6 as empty; // number ~> empty. Ref should point to 42.
             ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:37:3

Cannot cast `x` to number because string [1] is incompatible with number [2]. [incompatible-type]

   loc-reference.js:37:3
   37|   x as number; // string ~> number. Ref should point to `x: string`.
         ^

References:
   loc-reference.js:36:17
   36| function fn1(x: string) {
                       ^^^^^^ [1]
   loc-reference.js:37:8
   37|   x as number; // string ~> number. Ref should point to `x: string`.
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:41:3

Cannot cast `x` to number because mixed [1] is incompatible with number [2]. [incompatible-type]

   loc-reference.js:41:3
   41|   x as number; // T ~> number. Ref should point to `x: T`.
         ^

References:
   loc-reference.js:40:20
   40| function fn2<T>(x: T) {
                          ^ [1]
   loc-reference.js:41:8
   41|   x as number; // T ~> number. Ref should point to `x: T`.
              ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:8:24

number literal `42` [1] is not a class. [not-a-class]

   misc-incompatibles.js:8:24
   8| declare class X mixins Y {}
                             ^

References:
   misc-incompatibles.js:6:11
   6| const Y = 42;
                ^^ [1]


Error -------------------------------------------------------------------------------------- misc-incompatibles.js:11:11

Cannot extend `A` [1] with `B` because number [1] is not inheritable. [incompatible-use]

   misc-incompatibles.js:11:11
   11| interface B extends A {}
                 ^

References:
   misc-incompatibles.js:11:21
   11| interface B extends A {}
                           ^ [1]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:14:3

Cannot access object type [1] with computed property using boolean literal `true` [2]. [invalid-computed-prop]

   misc-incompatibles.js:14:3
   14| o[true];
         ^^^^ [2]

References:
   misc-incompatibles.js:13:16
   13| declare var o: {};
                      ^^ [1]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:15:3

Cannot use boolean literal `true` [1] to assign a computed property. Computed properties may only be numeric or string
literal values. See https://flow.org/en/docs/types/literals/ for more information on literal types.
[invalid-computed-prop]

   15| o[true] = 42;
         ^^^^ [1]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:17:1

Invalid left-hand side in assignment expression. [invalid-lhs]

   17| [nope] += 1;
       ^^^^^^


Error ----------------------------------------------------------------------------------------------------- order.js:9:6

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `a`.
[incompatible-type]

   order.js:9:6
    9|   a: 42,
            ^^ [1]

References:
   order.js:13:6
   13|   a: boolean,
            ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- order.js:11:6

Cannot cast object literal to object type because boolean [1] is incompatible with number [2] in property `c`.
[incompatible-type]

   order.js:11:6
   11|   c: true,
            ^^^^ [1]

References:
   order.js:14:6
   14|   c: number,
            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- order.js:10:7

Cannot cast `'foo'` to empty because string [1] is incompatible with empty [2]. [incompatible-type]

   order.js:10:7
   10|   b: ('foo': empty),
             ^^^^^ [1]

References:
   order.js:10:14
   10|   b: ('foo': empty),
                    ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:12:8

Cannot cast `any` to object type because property `p` is read-only in object type [1] but writable in object type [2].
[incompatible-variance]

   prop-variance.js:12:8
   12| any as {+p: T} as {p: T}; // Error: read-only ~> writable
              ^^^^^^^ [1]

References:
   prop-variance.js:12:19
   12| any as {+p: T} as {p: T}; // Error: read-only ~> writable
                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:14:8

Cannot cast `any` to object type because property `p` is read-only in object type [1] but write-only in object type [2].
[incompatible-variance]

   prop-variance.js:14:8
   14| any as {+p: T} as {-p: T}; // Error: read-only ~> write-only
              ^^^^^^^ [1]

References:
   prop-variance.js:14:19
   14| any as {+p: T} as {-p: T}; // Error: read-only ~> write-only
                         ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:15:8

Cannot cast `any` to object type because property `p` is write-only in object type [1] but readable in object type [2].
[incompatible-variance]

   prop-variance.js:15:8
   15| any as {-p: T} as {p: T}; // Error: write-only ~> readable
              ^^^^^^^ [1]

References:
   prop-variance.js:15:19
   15| any as {-p: T} as {p: T}; // Error: write-only ~> readable
                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:16:8

Cannot cast `any` to object type because property `p` is write-only in object type [1] but read-only in object type [2].
[incompatible-variance]

   prop-variance.js:16:8
   16| any as {-p: T} as {+p: T}; // Error: write-only ~> read-only
              ^^^^^^^ [1]

References:
   prop-variance.js:16:19
   16| any as {-p: T} as {+p: T}; // Error: write-only ~> read-only
                         ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- typeof-unexpected.js:6:15

`typeof` can only be used to get the type of variables. [ParseError]

   6| (null: typeof 42);
                    ^^



Found 68 errors
