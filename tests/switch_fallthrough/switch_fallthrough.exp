Error ------------------------------------------------------------------------------------------------------ test.js:9:3

Cannot cast `x` to string literal `bar` because string literal `baz` [1] is incompatible with string literal `bar` [2].
[incompatible-type]

   test.js:9:3
   9|   x as 'bar'; // error
        ^

References:
   test.js:4:20
   4|   declare const x: Enum;
                         ^^^^ [1]
   test.js:9:8
   9|   x as 'bar'; // error
             ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:3

Cannot cast `x` to string literal `bar` because string literal `foo` [1] is incompatible with string literal `bar` [2].
[incompatible-type]

   test.js:9:3
   9|   x as 'bar'; // error
        ^

References:
   test.js:4:20
   4|   declare const x: Enum;
                         ^^^^ [1]
   test.js:9:8
   9|   x as 'bar'; // error
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:18:5

Cannot compare `x` [1] to string literal `qux` [2], because `x` [1] is not a subtype of string literal `qux` [2] and
string literal `qux` [2] is not a subtype of `x` [1]. In **rare** cases, these types may have overlapping values but
lack a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check.
 [invalid-compare]

   test.js:18:5
   18|     case 'qux': // error
           ^^^^^^^^^^

References:
   test.js:13:17
   13|   declare const x: Enum;
                       ^ [1]
   test.js:18:10
   18|     case 'qux': // error
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:29:5

Cannot compare `x` [1] to string literal `qux` [2], because `x` [1] is not a subtype of string literal `qux` [2] and
string literal `qux` [2] is not a subtype of `x` [1]. In **rare** cases, these types may have overlapping values but
lack a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check.
 [invalid-compare]

   test.js:29:5
   29|     case 'qux': // error
           ^^^^^^^^^^

References:
   test.js:24:17
   24|   declare const x: Enum;
                       ^ [1]
   test.js:29:10
   29|     case 'qux': // error
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:40:3

Cannot cast `x` to string literal `foo` because string literal `baz` [1] is incompatible with string literal `foo` [2].
[incompatible-type]

   test.js:40:3
   40|   x as 'foo'; // error
         ^

References:
   test.js:35:18
   35|   declare let x: Enum;
                        ^^^^ [1]
   test.js:40:8
   40|   x as 'foo'; // error
              ^^^^^ [2]



Found 5 errors
