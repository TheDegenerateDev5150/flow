Error ---------------------------------------------------------------------------------------------------- apply.js:10:7

Cannot call `apply` with `noRest1` bound to `fn` because number [1] is incompatible with number literal `123` [2] in the
second argument. [incompatible-type]

   apply.js:10:7
   10| apply(noRest1, ['hi', 456]); // Error - 456 ~> 123
             ^^^^^^^

References:
   apply.js:10:23
   10| apply(noRest1, ['hi', 456]); // Error - 456 ~> 123
                             ^^^ [1]
   apply.js:8:30
    8| function noRest1(x: 'hi', y: 123): true { return true; }
                                    ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:11:7

Cannot call `apply` with `noRest1` bound to `fn` because function [1] requires another argument from function type [2].
[incompatible-type]

   apply.js:11:7
   11| apply(noRest1, ['hi']); // Error - too few args
             ^^^^^^^

References:
   apply.js:8:1
    8| function noRest1(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   apply.js:2:7
    2|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:17:7

Cannot call `apply` with `withRest1` bound to `fn` because number [1] is incompatible with number literal `123` [2] in
index 1. [incompatible-type]

   apply.js:17:7
   17| apply(withRest1, ['hi', 456]); // Error - 456 ~> 123
             ^^^^^^^^^

References:
   apply.js:17:25
   17| apply(withRest1, ['hi', 456]); // Error - 456 ~> 123
                               ^^^ [1]
   apply.js:15:36
   15| function withRest1(...rest: ['hi', 123]): true { return true; }
                                          ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:18:7

Cannot call `apply` with `withRest1` bound to `fn` because rest array [1] has 1 element but tuple type [2] has 2
elements. [invalid-tuple-arity]

   apply.js:18:7
   18| apply(withRest1, ['hi']); // Error - too few args
             ^^^^^^^^^

References:
   apply.js:2:7
    2|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:15:29
   15| function withRest1(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:19:7

Cannot call `apply` with `withRest1` bound to `fn` because rest array [1] has 3 elements but tuple type [2] has 2
elements. [invalid-tuple-arity]

   apply.js:19:7
   19| apply(withRest1, ['hi', 123, false]); // Error - too many args
             ^^^^^^^^^

References:
   apply.js:2:7
    2|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:15:29
   15| function withRest1(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:29:11

Cannot call `applyType` with `noRest2` bound to `fn` because number [1] is incompatible with number literal `123` [2] in
the second argument. [incompatible-type]

   apply.js:29:11
   29| applyType(noRest2, ['hi', 456]); // Error - 456 ~> 123
                 ^^^^^^^

References:
   apply.js:29:27
   29| applyType(noRest2, ['hi', 456]); // Error - 456 ~> 123
                                 ^^^ [1]
   apply.js:27:30
   27| function noRest2(x: 'hi', y: 123): true { return true; }
                                    ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:30:11

Cannot call `applyType` with `noRest2` bound to `fn` because function [1] requires another argument from function
type [2]. [incompatible-type]

   apply.js:30:11
   30| applyType(noRest2, ['hi']); // Error - too few args
                 ^^^^^^^

References:
   apply.js:27:1
   27| function noRest2(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   apply.js:23:7
   23|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:36:11

Cannot call `applyType` with `withRest2` bound to `fn` because number [1] is incompatible with number literal `123` [2]
in index 1. [incompatible-type]

   apply.js:36:11
   36| applyType(withRest2, ['hi', 456]); // Error - 456 ~> 123
                 ^^^^^^^^^

References:
   apply.js:36:29
   36| applyType(withRest2, ['hi', 456]); // Error - 456 ~> 123
                                   ^^^ [1]
   apply.js:34:36
   34| function withRest2(...rest: ['hi', 123]): true { return true; }
                                          ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:37:11

Cannot call `applyType` with `withRest2` bound to `fn` because rest array [1] has 1 element but tuple type [2] has 2
elements. [invalid-tuple-arity]

   apply.js:37:11
   37| applyType(withRest2, ['hi']); // Error - too few args
                 ^^^^^^^^^

References:
   apply.js:23:7
   23|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:34:29
   34| function withRest2(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:38:11

Cannot call `applyType` with `withRest2` bound to `fn` because rest array [1] has 3 elements but tuple type [2] has 2
elements. [invalid-tuple-arity]

   apply.js:38:11
   38| applyType(withRest2, ['hi', 123, false]); // Error - too many args
                 ^^^^^^^^^

References:
   apply.js:23:7
   23|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:34:29
   34| function withRest2(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:30:3

Cannot create `AcceptsWhatever` element because string [1] is incompatible with number [2] in the return value.
[incompatible-use]

   jsx.js:30:3
   30| (<AcceptsWhatever />) as number; // Error string ~> number
         ^^^^^^^^^^^^^^^

References:
   jsx.js:29:68
   29| declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]
   jsx.js:30:26
   30| (<AcceptsWhatever />) as number; // Error string ~> number
                                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:31:3

Cannot create `AcceptsWhatever` element because: [incompatible-use]
 - Either string [1] is incompatible with number [2] in the return value.
 - Or props [3] is incompatible with null [4].

   jsx.js:31:3
   31| (<AcceptsWhatever name="hi">Text</AcceptsWhatever>) as number; // Error string ~> number
         ^^^^^^^^^^^^^^^

References:
   jsx.js:29:68
   29| declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]
   jsx.js:31:56
   31| (<AcceptsWhatever name="hi">Text</AcceptsWhatever>) as number; // Error string ~> number
                                                              ^^^^^^ [2]
   jsx.js:31:2
   31| (<AcceptsWhatever name="hi">Text</AcceptsWhatever>) as number; // Error string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   jsx.js:13:10
   13|   props: null,
                ^^^^ [4]


Error ------------------------------------------------------------------------------------------------------ jsx.js:34:2

Cannot create `ExpectsProps` element because: [incompatible-use]
 - Either property `name` is missing in object type [1] but exists in object type [2] in the first parameter.
 - Or null [3] is incompatible with object type [2].

   jsx.js:34:2
   34| <ExpectsProps />; // Error - missing prop
        ^^^^^^^^^^^^

References:
   jsx.js:10:14
   10|   C: (props: {}, children: Children) => Elem,
                    ^^ [1]
   jsx.js:33:38
   33| declare function ExpectsProps(props: {name: string}, children: any): string;
                                            ^^^^^^^^^^^^^^ [2]
   jsx.js:34:1
   34| <ExpectsProps />; // Error - missing prop
       ^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------------ jsx.js:35:3

Cannot create `ExpectsProps` element because: [incompatible-use]
 - Either string [1] is incompatible with number [2] in the return value.
 - Or props [3] is incompatible with null [4].

   jsx.js:35:3
   35| (<ExpectsProps name="hi">Text</ExpectsProps>) as number; // Error string ~> number
         ^^^^^^^^^^^^

References:
   jsx.js:33:70
   33| declare function ExpectsProps(props: {name: string}, children: any): string;
                                                                            ^^^^^^ [1]
   jsx.js:35:50
   35| (<ExpectsProps name="hi">Text</ExpectsProps>) as number; // Error string ~> number
                                                        ^^^^^^ [2]
   jsx.js:35:2
   35| (<ExpectsProps name="hi">Text</ExpectsProps>) as number; // Error string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   jsx.js:13:10
   13|   props: null,
                ^^^^ [4]


Error ------------------------------------------------------------------------------------------------------ jsx.js:38:2

Cannot create `ExpectsChildrenTuple` element because rest array [1] has 0 elements but tuple type [2] has 1 element.
[incompatible-use]

   jsx.js:38:2
   38| <ExpectsChildrenTuple />; // Error - missing child
        ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:38:1
   38| <ExpectsChildrenTuple />; // Error - missing child
       ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   jsx.js:37:61
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:40:2

Cannot create `ExpectsChildrenTuple` element because number [1] is incompatible with string [2] in index 0.
[incompatible-use]

   jsx.js:40:2
   40| <ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>; // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:40:24
   40| <ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>; // Error: number ~> string
                              ^^^ [1]
   jsx.js:37:62
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:41:2

Cannot create `ExpectsChildrenTuple` element because rest array [1] has 2 elements but tuple type [2] has 1 element.
[incompatible-use]

   jsx.js:41:2
   41| <ExpectsChildrenTuple>Hi {'there'}</ExpectsChildrenTuple>; // Error: too many children
        ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:41:1
   41| <ExpectsChildrenTuple>Hi {'there'}</ExpectsChildrenTuple>; // Error: too many children
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   jsx.js:37:61
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:49:2

Cannot create `ExpectsChildrenArray` element because number [1] is incompatible with string [2] in array element.
[incompatible-use]

   jsx.js:49:2
   49| <ExpectsChildrenArray>{123}</ExpectsChildrenArray>; // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:49:24
   49| <ExpectsChildrenArray>{123}</ExpectsChildrenArray>; // Error: number ~> string
                              ^^^ [1]
   jsx.js:45:19
   45|   children: Array<string>,
                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:5:55

Cannot call `fun` because no more than 2 arguments are expected by function [1]. [extra-arg]

   spread.js:5:55
   5| fun(...['hi' as const], ...[], ...[123 as const], ...[true as const]); // Error - true is unused
                                                            ^^^^

References:
   spread.js:1:1
   1| function fun(x: 'hi', y: 123) {}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- spread.js:6:49

Cannot call `fun` because no more than 2 arguments are expected by function [1]. [extra-arg]

   spread.js:6:49
   6| fun(...['hi' as const], ...[true as const], ...[123 as const]); // Error: true ~> 123 and 123 is unused
                                                      ^^^

References:
   spread.js:1:1
   1| function fun(x: 'hi', y: 123) {}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- spread.js:6:29

Cannot call `fun` with boolean literal `true` bound to `y` because boolean literal `true` [1] is incompatible with
number literal `123` [2]. [incompatible-type]

   spread.js:6:29
   6| fun(...['hi' as const], ...[true as const], ...[123 as const]); // Error: true ~> 123 and 123 is unused
                                  ^^^^ [1]

References:
   spread.js:1:26
   1| function fun(x: 'hi', y: 123) {}
                               ^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:17:42

Cannot call `funWithRestArray` with boolean literal `true` bound to `y` because boolean literal `true` [1] is
incompatible with number literal `123` [2]. [incompatible-type]

   spread.js:17:42
   17| funWithRestArray(...['hi' as const], ...[true as const], ...[123 as const]); // Error: true ~> 123
                                                ^^^^ [1]

References:
   spread.js:12:39
   12| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:26:37

Cannot call `funWithRestArray` because string [1] is incompatible with number literal `123` [2]. [incompatible-type]

   spread.js:26:37
   26| funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                           ^^^^^ [1]

References:
   spread.js:12:39
   12| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:26:37

Cannot call `funWithRestArray` because string [1] is incompatible with number [2] in array element. [incompatible-type]

   spread.js:26:37
   26| funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                           ^^^^^ [1]

References:
   spread.js:12:59
   12| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                                                 ^^^^^^ [2]



Found 24 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
