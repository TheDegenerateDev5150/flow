Error ------------------------------------------------------------------------------------------ enum-filtering.js:16:17

Cannot cast `y.x` to empty because string literal `NONE` [1] is incompatible with empty [2]. [incompatible-type]

   enum-filtering.js:16:17
   16|       default: (y.x: empty); // We error here. Ideally we would not, so if you figure it out in the future with good perf, you can remove error from snapshot
                       ^^^

References:
   enum-filtering.js:2:53
    2| type Selection = { x: 'ONE' } | { x: 'TWO' } | { x: 'NONE' }
                                                           ^^^^^^ [1]
   enum-filtering.js:16:22
   16|       default: (y.x: empty); // We error here. Ideally we would not, so if you figure it out in the future with good perf, you can remove error from snapshot
                            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ issue-198.js:9:20

Cannot call `str.toFixed` because property `toFixed` is missing in `String` [1]. [prop-missing]

   issue-198.js:9:20
     9|         return str.toFixed();
                           ^^^^^^^

References:
   <BUILTINS>/core.js:489:39
   489|     toFixed(fractionDigits?: number): string;
                                              ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ issue-324.js:8:10

Cannot assign `barstr` to `foostr` because: [incompatible-type]
 - Either `Bar` [1] is incompatible with `Foo` [2].
 - Or `Bar` [1] is incompatible with string [3].

   issue-324.js:8:10
   8| foostr = barstr;
               ^^^^^^

References:
   issue-324.js:6:13
   6| var barstr: Bar | string = new Bar();
                  ^^^ [1]
   issue-324.js:5:13
   5| var foostr: Foo | string = new Foo();
                  ^^^ [2]
   issue-324.js:5:19
   5| var foostr: Foo | string = new Foo();
                        ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- issue-7322.js:20:2

Cannot cast `x.noReturn()` to number because undefined [1] is incompatible with number [2]. [incompatible-type]

   issue-7322.js:20:2
   20| (x.noReturn(): number);
        ^^^^^^^^^^^^

References:
   issue-7322.js:2:13
    2|   noReturn() { }
                   ^ [1]
   issue-7322.js:20:16
   20| (x.noReturn(): number);
                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-7322.js:21:2

Cannot cast `x.returnNoArg()` to number because undefined [1] is incompatible with number [2]. [incompatible-type]

   issue-7322.js:21:2
   21| (x.returnNoArg(): number);
        ^^^^^^^^^^^^^^^

References:
   issue-7322.js:3:18
    3|   returnNoArg(): void {
                        ^^^^ [1]
   issue-7322.js:21:19
   21| (x.returnNoArg(): number);
                         ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-7322.js:22:2

Cannot cast `x.returnUndefined()` to number because undefined [1] is incompatible with number [2]. [incompatible-type]

   issue-7322.js:22:2
   22| (x.returnUndefined(): number);
        ^^^^^^^^^^^^^^^^^^^

References:
   issue-7322.js:6:22
    6|   returnUndefined(): void {
                            ^^^^ [1]
   issue-7322.js:22:23
   22| (x.returnUndefined(): number);
                             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- short_enum_error.js:11:8

Cannot call `t2` with `t1` bound to the first parameter because `T1` [1] is incompatible with `T2` [2].
[incompatible-type]

Type `T1` [1] includes members `a1`, `b1`, `c1` that are not included in type `T2` [2].

   short_enum_error.js:11:8
   11|     t2(t1); // error (function)
              ^^

References:
   short_enum_error.js:9:21
    9|     declare var t1: T1;
                           ^^ [1]
   short_enum_error.js:10:25
   10|     declare function t2(T2): void;
                               ^^ [2]


Error ----------------------------------------------------------------------------------------- short_enum_error.js:12:5

Cannot cast `t1` to `T2` because `T1` [1] is incompatible with `T2` [2]. [incompatible-type]

Type `T1` [1] includes members `a1`, `b1`, `c1` that are not included in type `T2` [2].

   short_enum_error.js:12:5
   12|     t1 as T2; // error (cast)
           ^^

References:
   short_enum_error.js:9:21
    9|     declare var t1: T1;
                           ^^ [1]
   short_enum_error.js:12:11
   12|     t1 as T2; // error (cast)
                 ^^ [2]


Error ---------------------------------------------------------------------------------------- short_enum_error.js:22:10

Cannot cast `_` to `T1` because string [1] is incompatible with `T1` [2]. [incompatible-type]

   short_enum_error.js:22:10
   22|     _ as T2 as T1; // error fails quick_subtype and slow path
                ^^ [1]

References:
   short_enum_error.js:22:16
   22|     _ as T2 as T1; // error fails quick_subtype and slow path
                      ^^ [2]


Error ---------------------------------------------------------------------------------------- short_enum_error.js:41:10

Cannot cast `_` to `T2` because: [incompatible-type]
 - Either string literal `a` [1] is incompatible with number [2].
 - Or string literal `a` [1] is incompatible with number [3].
 - Or string literal `a` [1] is incompatible with number [4].

   short_enum_error.js:41:10
   41|     _ as T1 as T2; // error -- expanded pair-wise due to mismatching tags
                ^^ [1]

References:
   short_enum_error.js:36:34
   36|     const obj = { a: 1, b: 2, c: 3 };
                                        ^ [2]
   short_enum_error.js:36:28
   36|     const obj = { a: 1, b: 2, c: 3 };
                                  ^ [3]
   short_enum_error.js:36:22
   36|     const obj = { a: 1, b: 2, c: 3 };
                            ^ [4]


Error ---------------------------------------------------------------------------------------- short_enum_error.js:41:10

Cannot cast `_` to `T2` because: [incompatible-type]
 - Either string literal `b` [1] is incompatible with number [2].
 - Or string literal `b` [1] is incompatible with number [3].
 - Or string literal `b` [1] is incompatible with number [4].

   short_enum_error.js:41:10
   41|     _ as T1 as T2; // error -- expanded pair-wise due to mismatching tags
                ^^ [1]

References:
   short_enum_error.js:36:34
   36|     const obj = { a: 1, b: 2, c: 3 };
                                        ^ [2]
   short_enum_error.js:36:28
   36|     const obj = { a: 1, b: 2, c: 3 };
                                  ^ [3]
   short_enum_error.js:36:22
   36|     const obj = { a: 1, b: 2, c: 3 };
                            ^ [4]


Error ---------------------------------------------------------------------------------------- short_enum_error.js:41:10

Cannot cast `_` to `T2` because: [incompatible-type]
 - Either string literal `c` [1] is incompatible with number [2].
 - Or string literal `c` [1] is incompatible with number [3].
 - Or string literal `c` [1] is incompatible with number [4].

   short_enum_error.js:41:10
   41|     _ as T1 as T2; // error -- expanded pair-wise due to mismatching tags
                ^^ [1]

References:
   short_enum_error.js:36:34
   36|     const obj = { a: 1, b: 2, c: 3 };
                                        ^ [2]
   short_enum_error.js:36:28
   36|     const obj = { a: 1, b: 2, c: 3 };
                                  ^ [3]
   short_enum_error.js:36:22
   36|     const obj = { a: 1, b: 2, c: 3 };
                            ^ [4]


Error ---------------------------------------------------------------------------------------- short_enum_error.js:42:10

Cannot cast `_` to `T1` because number [1] is incompatible with `T1` [2]. [incompatible-type]

   short_enum_error.js:42:10
   42|     _ as T2 as T1; // error -- folded into a single error
                ^^ [1]

References:
   short_enum_error.js:42:16
   42|     _ as T2 as T1; // error -- folded into a single error
                      ^^ [2]


Error ---------------------------------------------------------------------------------------- short_enum_error.js:49:10

Cannot cast `_` to `T2` because `T1` [1] is incompatible with `T2` [2]. [incompatible-type]

Type `T1` [1] includes members `a1`, `b1`, `c1` and 5 more that are not included in type `T2` [2].

   short_enum_error.js:49:10
   49|     _ as T1 as T2; // error
                ^^ [1]

References:
   short_enum_error.js:49:16
   49|     _ as T1 as T2; // error
                      ^^ [2]


Error ---------------------------------------------------------------------------------------- short_enum_error.js:50:10

Cannot cast `_` to `T1` because `T2` [1] is incompatible with `T1` [2]. [incompatible-type]

Type `T2` [1] includes members `a2`, `b2`, `c2` that are not included in type `T1` [2].

   short_enum_error.js:50:10
   50|     _ as T2 as T1; // error
                ^^ [1]

References:
   short_enum_error.js:50:16
   50|     _ as T2 as T1; // error
                      ^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:2:5

Cannot call `bar` with `0` bound to `x` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with `Document` [3].

   union.js:2:5
   2| bar(0);
          ^ [1]

References:
   union.js:1:28
   1| function bar(x: Document | string): void { }
                                 ^^^^^^ [2]
   union.js:1:17
   1| function bar(x: Document | string): void { }
                      ^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:8:13

Cannot assign `new E()` to `c` because `D` [1] is incompatible with `C` [2]. [incompatible-type]

   union.js:8:13
   8|   var c:C = new E(); // error, since E could be D, and D is not a subtype of C
                  ^^^^^^^ [1]

References:
   union.js:8:9
   8|   var c:C = new E(); // error, since E could be D, and D is not a subtype of C
              ^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:9:19

Cannot use `E` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`. [value-as-type]

   9|   function qux(e: E) { } // error: value-as-type
                        ^



Found 18 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
