Error ------------------------------------------------------------------------------------------------------- A.js:13:10

Cannot return object literal because property `foo` is missing in object type [1] but exists in object literal [2]. Any
property that does not exist in object type [1] must be compatible with its indexer number [3]. [incompatible-type]

   A.js:13:10
   13|   return { foo: "bar" }
                ^^^^^^^^^^^^^^ [2]

References:
   A.js:12:18
   12| function foo2(): {[key: number]: string} {
                        ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   A.js:12:25
   12| function foo2(): {[key: number]: string} {
                               ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------------- A.js:18:17

Cannot return object literal because in property `foo`: string [1] is incompatible with number [2]. [incompatible-type]

   A.js:18:17
   18|   return { foo: "bar" }
                       ^^^^^ [1]

References:
   A.js:17:34
   17| function foo3(): {[key: string]: number} {
                                        ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:23:10

Cannot return object literal because property `foo` is missing in object type [1] but exists in object literal [2]. Any
property that does not exist in object type [1] must be compatible with its indexer number [3]. [incompatible-type]

   A.js:23:10
   23|   return { foo: "bar" }
                ^^^^^^^^^^^^^^ [2]

References:
   A.js:22:18
   22| function foo4(): {[key: number]: number} {
                        ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   A.js:22:25
   22| function foo4(): {[key: number]: number} {
                               ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------------- A.js:38:17

Cannot return object literal because in property `foo`: string [1] is incompatible with number [2]. [incompatible-type]

   A.js:38:17
   38|   return { foo: "bar" }
                       ^^^^^ [1]

References:
   A.js:37:47
   37| function foo7(): {[key: string]: number; foo: number} {
                                                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ call.js:2:2

Cannot cast `y` to object type because object type [1] is incompatible with function prototype [2]. [incompatible-type]

   call.js:2:2
   2| (y: {(number): string, ...});
       ^

References:
   call.js:1:16
   1| declare var y: {[string]: boolean};
                     ^^^^^^^^^^^^^^^^^^^ [1]
   call.js:2:5
   2| (y: {(number): string, ...});
          ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ call.js:2:2

Cannot cast `y` to object type because a call signature declaring the expected parameter / return type is missing in
object type [1] but exists in object type [2]. [incompatible-type]

   call.js:2:2
   2| (y: {(number): string, ...});
       ^

References:
   call.js:1:16
   1| declare var y: {[string]: boolean};
                     ^^^^^^^^^^^^^^^^^^^ [1]
   call.js:2:5
   2| (y: {(number): string, ...});
          ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- multiple.js:5:7

Multiple indexers are not supported. [unsupported-syntax]

   5|       [k2: number]: number, // error: not supported (yet)
            ^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------------ test.js:4:8

Cannot assign object literal to `o1` because in property `bar`: string [1] is incompatible with number [2].
[incompatible-type]

   test.js:4:8
   4|   bar: "", // error: string ~/~ number
             ^^ [1]

References:
   test.js:2:23
   2| var o1: {[key: Key1]: number} = {
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:7:4

Cannot get `o1.qux` because property `qux` is missing in object type [1]. [prop-missing]

   test.js:7:4
   7| o1.qux; // error: qux not found
         ^^^

References:
   test.js:2:9
   2| var o1: {[key: Key1]: number} = {
              ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:14:4

Cannot get `o2.qux` because property `qux` is missing in object type [1]. [prop-missing]

   test.js:14:4
   14| o2.qux; // error: qux not found
          ^^^

References:
   test.js:12:9
   12| var o2: {[key: Key2]: number} = { foo: 0 }; // OK to leave out bar
               ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:19:1

Cannot extend `C` [1] with `D` because in property `x` > the indexer property's key: property `qux` is missing in object
type [2]. [prop-missing]

   test.js:19:1
       v---------------------------------------------------
   19| class D extends C<{foo: number, bar: string, ...}> {
   20|   x: { foo: number, qux: boolean, ... }; // error: qux not found
   21| }
       ^

References:
   test.js:19:17
   19| class D extends C<{foo: number, bar: string, ...}> {
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:19:19
   19| class D extends C<{foo: number, bar: string, ...}> {
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:20:6

Cannot extend `C` [1] with `D` because in property `x`: an index signature declaring the expected key / value type is
missing in object type [2] but exists in object type [3]. [incompatible-type]

This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   test.js:20:6
   20|   x: { foo: number, qux: boolean, ... }; // error: qux not found
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]

References:
   test.js:19:17
   19| class D extends C<{foo: number, bar: string, ...}> {
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:17:6
   17|   x: {[key: $Keys<X>]: any}; // object with larger key set than X's
            ^^^^^^^^^^^^^^^^^^^^^^ [3]



Found 12 errors
