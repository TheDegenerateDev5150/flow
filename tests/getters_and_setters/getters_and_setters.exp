Error ---------------------------------------------------------------------------------------------------- class.js:25:3

Computed property keys not supported. [unsupported-syntax]

   25|   set [z](x: string) {}
         ^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- class.js:26:3

Computed property keys not supported. [unsupported-syntax]

   26|   get [z](): string { return string; }
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- class.js:33:35

Cannot assign `foo.goodGetterWithAnnotation` to `testGetterWithError` because number [1] is incompatible with
string [2]. [incompatible-type]

   class.js:33:35
   33| var testGetterWithError: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   class.js:8:35
    8|   get goodGetterWithAnnotation(): number { return 4; }
                                         ^^^^^^ [1]
   class.js:33:26
   33| var testGetterWithError: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- class.js:37:32

Cannot assign `"hello"` to `foo.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
[incompatible-type]

   class.js:37:32
   37| foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ [1]

References:
   class.js:9:35
    9|   set goodSetterWithAnnotation(x: number) { z = x; }
                                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- class.js:39:44

Cannot assign `foo.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is
incompatible with number [2]. [incompatible-type]

   class.js:39:44
   39| var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   class.js:15:43
   15|   get propWithSubtypingGetterAndSetter(): ?number { return 4; }
                                                 ^^^^^^^ [1]
   class.js:39:35
   39| var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- declare_class.js:25:3

Cannot shadow proto property `propOverriddenWithGetter` [1] because number [2] is incompatible with string [3].
[incompatible-type]

   declare_class.js:25:3
   25|   propOverriddenWithGetter: number; // error: can't shadow proto with incompatible own
         ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_class.js:26:7
   26|   get propOverriddenWithGetter(): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class.js:25:29
   25|   propOverriddenWithGetter: number; // error: can't shadow proto with incompatible own
                                   ^^^^^^ [2]
   declare_class.js:26:35
   26|   get propOverriddenWithGetter(): string;
                                         ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------- declare_class.js:28:3

Cannot shadow proto property `propOverriddenWithSetter` [1] because string [2] is incompatible with number [3].
[incompatible-type]

   declare_class.js:28:3
   28|   propOverriddenWithSetter: number; // error: can't shadow proto with incompatible own
         ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_class.js:29:7
   29|   set propOverriddenWithSetter(x: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class.js:29:35
   29|   set propOverriddenWithSetter(x: string): void;
                                         ^^^^^^ [2]
   declare_class.js:28:29
   28|   propOverriddenWithSetter: number; // error: can't shadow proto with incompatible own
                                   ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------- declare_class.js:37:36

Cannot assign `foo.goodGetterWithAnnotation` to `testGetterWithError2` because number [1] is incompatible with
string [2]. [incompatible-type]

   declare_class.js:37:36
   37| var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_class.js:8:35
    8|   get goodGetterWithAnnotation(): number;
                                         ^^^^^^ [1]
   declare_class.js:37:27
   37| var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- declare_class.js:42:32

Cannot assign `"hello"` to `foo.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
[incompatible-type]

   declare_class.js:42:32
   42| foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ [1]

References:
   declare_class.js:9:35
    9|   set goodSetterWithAnnotation(x: number): void;
                                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- declare_class.js:44:44

Cannot assign `foo.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is
incompatible with number [2]. [incompatible-type]

   declare_class.js:44:44
   44| var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_class.js:15:43
   15|   get propWithSubtypingGetterAndSetter(): ?number;
                                                 ^^^^^^^ [1]
   declare_class.js:44:35
   44| var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- object.js:46:3

Computed getters and setters are not yet supported. [unsupported-syntax]

   46|   set [z](x: string) {},
         ^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- object.js:47:3

Computed getters and setters are not yet supported. [unsupported-syntax]

         v------------------
   47|   get [z](): string {
   48|     return string;
   49|   },
         ^


Error -------------------------------------------------------------------------------------------------- object.js:59:35

Cannot assign `obj.goodGetterWithAnnotation` to `testGetterWithError` because number [1] is incompatible with
string [2]. [incompatible-type]

   object.js:59:35
   59| var testGetterWithError: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object.js:12:35
   12|   get goodGetterWithAnnotation(): number {
                                         ^^^^^^ [1]
   object.js:59:26
   59| var testGetterWithError: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- object.js:63:32

Cannot assign `'hello'` to `obj.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
[incompatible-type]

   object.js:63:32
   63| obj.goodSetterWithAnnotation = 'hello'; // Error string ~> number
                                      ^^^^^^^ [1]

References:
   object.js:16:35
   16|   set goodSetterWithAnnotation(x: number) {
                                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- object.js:65:44

Cannot assign `obj.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is
incompatible with number [2]. [incompatible-type]

   object.js:65:44
   65| var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object.js:26:43
   26|   get propWithSubtypingGetterAndSetter(): ?number {
                                                 ^^^^^^^ [1]
   object.js:65:35
   65| var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- object.js:70:39

Cannot assign `new C()` to `obj.exampleOfOrderOfGetterAndSetter` because `C` [1] is incompatible with `B` [2].
[incompatible-type]

   object.js:70:39
   70| obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                             ^^^^^^^ [1]

References:
   object.js:39:42
   39|   set exampleOfOrderOfGetterAndSetter(x: B) {},
                                                ^ [2]


Error --------------------------------------------------------------------------------------------------- object.js:74:3

Cannot assign `obj.exampleOfOrderOfGetterAndSetterReordered` to `testExampleOrOrderOfGetterAndSetterReordered` because
`A` [1] is incompatible with number [2]. [incompatible-type]

   object.js:74:3
   74|   obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object.js:42:51
   42|   get exampleOfOrderOfGetterAndSetterReordered(): A {
                                                         ^ [1]
   object.js:73:51
   73| var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- object.js:76:1

Cannot cast `obj['stringLiteral']` to string because number [1] is incompatible with string [2]. [incompatible-type]

   object.js:76:1
   76| obj['stringLiteral'] as string; // err, num !~> string
       ^^^^^^^^^^^^^^^^^^^^

References:
   object.js:52:24
   52|   get stringLiteral(): number {
                              ^^^^^^ [1]
   object.js:76:25
   76| obj['stringLiteral'] as string; // err, num !~> string
                               ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- object.js:77:24

Cannot assign `'foo'` to `obj['stringLiteral']` because string [1] is incompatible with number [2]. [incompatible-type]

   object.js:77:24
   77| obj['stringLiteral'] = 'foo'; // err, string !~> num
                              ^^^^^ [1]

References:
   object.js:51:24
   51|   set stringLiteral(x: number) {},
                              ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- object_type.js:36:38

Cannot assign `obj.goodGetterWithAnnotation` to `testGetterWithError2` because number [1] is incompatible with
string [2]. [incompatible-type]

   object_type.js:36:38
   36|   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_type.js:12:35
   12|   get goodGetterWithAnnotation(): number,
                                         ^^^^^^ [1]
   object_type.js:36:29
   36|   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                   ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- object_type.js:41:34

Cannot assign `"hello"` to `obj.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
[incompatible-type]

   object_type.js:41:34
   41|   obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                        ^^^^^^^ [1]

References:
   object_type.js:13:35
   13|   set goodSetterWithAnnotation(x: number): void,
                                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- object_type.js:43:46

Cannot assign `obj.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is
incompatible with number [2]. [incompatible-type]

   object_type.js:43:46
   43|   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_type.js:19:43
   19|   get propWithSubtypingGetterAndSetter(): ?number, // OK
                                                 ^^^^^^^ [1]
   object_type.js:43:37
   43|   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                           ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- object_type.js:48:41

Cannot assign `new C()` to `obj.exampleOfOrderOfGetterAndSetter` because `C` [1] is incompatible with `B` [2].
[incompatible-type]

   object_type.js:48:41
   48|   obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                               ^^^^^^^ [1]

References:
   object_type.js:26:42
   26|   set exampleOfOrderOfGetterAndSetter(x: B): void,
                                                ^ [2]


Error ---------------------------------------------------------------------------------------------- object_type.js:52:5

Cannot assign `obj.exampleOfOrderOfGetterAndSetterReordered` to `testExampleOrOrderOfGetterAndSetterReordered` because
`A` [1] is incompatible with number [2]. [incompatible-type]

   object_type.js:52:5
   52|     obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_type.js:29:51
   29|   get exampleOfOrderOfGetterAndSetterReordered(): A,
                                                         ^ [1]
   object_type.js:51:53
   51|   var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:21:2

Cannot extend `Base` [1] with `<<anonymous class>>` because property `x` is read-only in `<<anonymous class>>` [2] but
writable in `Base` [1]. [incompatible-variance]

   variance.js:21:2
        v-------------------
   21| (class extends Base {
   22|   // error: getter incompatible with read/write property
   23|   get x(): B { return b }
   24| });
       ^ [2]

References:
   variance.js:21:16
   21| (class extends Base {
                      ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:26:2

Cannot extend `Base` [1] with `<<anonymous class>>` because property `x` is write-only in `<<anonymous class>>` [2] but
readable in `Base` [1]. [incompatible-variance]

   variance.js:26:2
        v-------------------
   26| (class extends Base {
   27|   // error: setter incompatible with read/write property
   28|   set x(value: B): void {}
   29| });
       ^ [2]

References:
   variance.js:26:16
   26| (class extends Base {
                      ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:37:2

Cannot extend `Base` [1] with `<<anonymous class>>` because property `pos` is write-only in `<<anonymous class>>` [2]
but read-only in `Base` [1]. [incompatible-variance]

   variance.js:37:2
        v-------------------
   37| (class extends Base {
   38|   // error: setter incompatible with read-only property
   39|   set pos(value: B): void {}
   40| });
       ^ [2]

References:
   variance.js:37:16
   37| (class extends Base {
                      ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:47:2

Cannot extend `Base` [1] with `<<anonymous class>>` because property `neg` is read-only in `<<anonymous class>>` [2] but
write-only in `Base` [1]. [incompatible-variance]

   variance.js:47:2
        v-------------------
   47| (class extends Base {
   48|   // error: getter incompatible with write-only property
   49|   get neg(): B { return b }
   50| });
       ^ [2]

References:
   variance.js:47:16
   47| (class extends Base {
                      ^^^^ [1]



Found 28 errors
